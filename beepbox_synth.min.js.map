{"version":3,"names":["_a","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","TypePresets","sampleLoadingState","constructor","statusTable","urlTable","totalSamples","samplesLoaded","SampleLoadedEvent","Event","super","SampleLoadEvents","EventTarget","sampleLoadEvents","startLoadingSample","url","chipWaveIndex","presetSettings","rawLoopOptions","customSampleRate","sampleLoaderAudioContext","AudioContext","sampleRate","closedSampleLoaderAudioContext","chipWave","Config","chipWaves","rawChipWave","rawChipWaves","rawRawChipWave","rawRawChipWaves","fetch","response","ok","arrayBuffer","Error","decodeAudioData","audioBuffer","samples","centerWave","Array","from","getChannelData","integratedSamples","performIntegral","length","dispatchEvent","close","catch","error","alert","loadScript","willReloadForCustomSamples","script","document","createElement","src","head","appendChild","addEventListener","event","loadBuiltInSamples","set","defaultIntegratedSamples","defaultSamples","name","expression","isSampled","isPercussion","extraSampleDetune","startIndex","index","integratedChipWave","dictionary","chipWaveSamples","kicksample","snaresample","pianosample","WOWsample","overdrivesample","trumpetsample","saxophonesample","orchhitsample","detatchedviolinsample","synthsample","sonic3snaresample","comeonsample","choirsample","overdrivensample","flutesample","legatoviolinsample","tremoloviolinsample","amenbreaksample","pizzicatoviolinsample","timallengruntsample","tubasample","loopingcymbalsample","kickdrumsample","snaredrumsample","closedhihatsample","foothihatsample","openhihatsample","crashsample","pianoC4sample","liverpadsample","marimbasample","susdotwavsample","wackyboxttssample","peppersteak1","peppersteak2","vinyl","slapbass","hdeboverdrive","sunsoftbass","masculinechoir","femininechoir","southtololoche","harp","panflute","krumhorn","timpani","crowdhey","warioland4brass","warioland4organ","warioland4daow","warioland4hourchime","warioland4tick","kirbykick","kirbysnare","kirbybongo","kirbyclick","funkkick","funksnare","funksnareleft","funksnareright","funktomhigh","funktomlow","funkhihatclosed","funkhihathalfopen","funkhihatopen","funkhihatopentip","funkhihatfoot","funkcrash","funkcrashtip","funkride","chipWaveIndexOffset","chipWaveSample","chronoperc1finalsample","synthkickfmsample","woodclicksample","acousticsnaresample","catpaintboxsample","gameboypaintboxsample","mariopaintboxsample","drumpaintboxsample","yoshipaintboxsample","starpaintboxsample","fireflowerpaintboxsample","dogpaintbox","oinkpaintbox","swanpaintboxsample","facepaintboxsample","console","log","generateSineWave","wave","Float32Array","sineWaveLength","i","Math","sin","PI","generateTriWave","asin","generateTrapezoidWave","drive","max","min","generateSquareWave","phaseWidth","centerPoint","abs","generateSawWave","inverse","generateQuasiSineWave","round","sum","average","push","centerAndNormalizeWave","magn","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","ultraboxnewchipnoiserand","pow","clz32","b3","b4","b5","b6","b0","b1","b2","white","lastOut","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","cos","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","effectsIncludeRingModulation","effectsIncludeGranular","calculateRingModHertz","sliderHz","sliderHzOffset","ringModHzRange","floor","ringModMinHz","ringModMaxHz","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","jsonFormat","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","octaveMin","octaveMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","granularOutputLoudnessCompensation","raw","newArray","Object","assign","key","rawChipToIntegrated","firstIndexForSamplesInChipWaveList","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","ringModRange","rmHzOffsetCenter","rmHzOffsetMax","rmHzOffsetMin","granularRange","grainSizeMin","grainSizeMax","grainSizeStep","grainRangeMax","grainAmountsMax","granularEnvelopeType","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","algorithms6Op","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","newEnvelopes","feedbacks","indices","feedbacks6Op","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","unisonVoicesMin","unisonVoicesMax","unisonSpreadMin","unisonSpreadMax","unisonOffsetMin","unisonOffsetMax","unisonExpressionMin","unisonExpressionMax","unisonSignMin","unisonSignMax","sineWaveMask","sineWave","perEnvelopeSpeedIndices","perEnvelopeSpeedToIndices","perEnvelopeBoundMin","perEnvelopeBoundMax","randomEnvelopeSeedMax","randomEnvelopeStepsMax","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","enableAcousticSustain","sustainTypeNames","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","maxIndex","promptName","promptDesc","ceil","invertSliderIndicator","test","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","instrumentToPreset","instrument","factor","countBits","n","isPowerOf2","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","reverb","dynamism","shape","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","eqFilterType","eqSimpleCut","eqSimplePeak","envelopeSpeed","discreteEnvelope","panDelay","waveform","customChipWave","noteFilter","harmonics","stringSustain","stringSustainType","feedbackEnvelope","volume","fastTwoNoteArp","arpeggioSpeed","noteFilterType","noteSimpleCut","noteSimplePeak","pitchEnvelopeStart","pitchEnvelopeEnd","perEnvelopeSpeed","perEnvelopeLowerBound","perEnvelopeUpperBound","isDrum","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","chorus","eqSubFilters0","noteSubFilters0","spectrum","pulseEnvelope","noteSubFilters1","eqSubFilters1","drums","pitchShiftSemitones","clicklessTransition","echoSustain","echoDelayBeats","pan","customChipWaveIntegral","detuneCents","aliases","eqSubFilters4","noteSubFilters2","noteSubFilters4","pitchEnvelopeInverse","decimalOffset","pitchEnvelopeStart0","pitchEnvelopeEnd0","envelopeInverse0","pitchEnvelopeStart1","pitchEnvelopeEnd1","envelopeInverse1","pitchEnvelopeStart2","pitchEnvelopeEnd2","envelopeInverse2","eqSubFilters2","eqSubFilters3","isUsingAdvancedLoopControls","chipWaveLoopStart","chipWaveLoopEnd","chipWaveLoopMode","chipWavePlayBackwards","chipWaveStartOffset","customAlgorithm","mods","steps","seed","granular","grainSize","grainAmounts","grainRange","discrete","unisonVoices","unisonSpread","unisonOffset","unisonExpression","unisonSign","monoChordTone","ringMod","ringModHz","ringModWaveformIndex","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","pushFront","element","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","get","remove","oldBuffer","size","events","activeEvents","listeners","raise","eventType","eventData","extraEventData","pop","listen","callback","unlisten","lisen","indexOf","splice","unlistenAll","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","highShelf2ndOrder","slope","A","Aplus","Aminus","sqrtA2Alpha","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","warpInfinityToNyquist","atan","PRIME32_1","PRIME32_2","PRIME32_3","PRIME32_4","PRIME32_5","encoder","xxHash32","input","buffer","TextEncoder","encode","acc","accN","limit","lane","laneN0","laneN1","laneNP","acc0","acc1","epsilon","clamp","val","validateRange","parseFloatWithDefault","defaultValue","parseFloat","Number","isNaN","parseIntWithDefault","parseInt","encode32BitNumber","base64IntToCharCode","decode32BitNumber","compressed","charIndex","base64CharCodeToInt","charCodeAt","encodeUnisonSettings","v","o","cleanS","cleanSDivided","cleanO","cleanODivided","cleanE","cleanI","convertLegacyKeyToKeyAndOctave","rawKeyIndex","octave","BitFieldReader","source","_bits","_readIndex","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","clear","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","song","channel","isModChannel","noteArray","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","format","toLowerCase","isArray","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","pointObject","lowestPitch","highestPitch","oldMin","newMin","old","Operator","copy","CustomAlgorithm","fromPreset","carriers","modulation","CustomFeedBack","inIndices","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","Grain","delayLinePosition","ageInSamples","maxAgeInSamples","parabolicEnvelopeAmplitude","parabolicEnvelopeSlope","parabolicEnvelopeCurve","rcbEnvelopeAmplitude","rcbEnvelopeAttackIndex","rcbEnvelopeReleaseIndex","rcbEnvelopeSustain","initializeParabolicEnvelope","durationInSamples","invDuration","invDurationSquared","updateParabolicEnvelope","initializeRCBEnvelope","updateRCBEnvelope","addDelay","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","freqMult","getVolumeCompensationMult","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","isNoiseEnvelope","tempEnvelopeSpeed","tempEnvelopeLowerBound","tempEnvelopeUpperBound","envelopeObject","isTremolo2","Boolean","Instrument","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","legacyTieOver","supersawDynamism","supersawSpread","supersawShape","bitcrusherFreq","ringModulation","ringModulationHz","ringModPulseWidth","ringModHzOffset","echoDelay","algorithm6Op","feedbackType6Op","customFeedbackType","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modInstruments","modEnvelopeNumbers","invalidModulators","isNoiseInstrument","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","customFeedback","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","potentialPitchShift","centsToDetune","vibratoProperty","legacyVibratoNames","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","modboxWaveNames","sax","guitar","viola","brass","lyre","piccolo","squaretooth","flatline","sandboxWaveNames","euphonium","recorder","contrabass","zefboxWaveNames","squaretal","sawtal","pulse","miscWaveNames","test1","intense","paandorasboxWaveNames","kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","synth","sonic3snare","choir","overdriveguitar","flute","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","marimba","susdotwav","wackyboxtts","rawName","table","potentialChipWaveIndex","feedback6Op","synthboxLegacyFeedbacks","synthboxFeedbackType","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","envelopeInverse","getLargestControlPointCount","forNoteFilter","largest","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","currentIndex","tempoIndex","tempo","chorusIndex","reverbIndex","panningIndex","panDelayIndex","distortionIndex","detuneIndex","vibratoDepthIndex","vibratoSpeedIndex","vibratoDelayIndex","arpSpeedIndex","bitCrushIndex","freqCrushIndex","echoIndex","echoDelayIndex","pitchShiftIndex","ringModIndex","ringModHertzIndex","granularIndex","grainAmountIndex","grainSizeIndex","grainRangeIndex","envSpeedIndex","perEnvSpeedIndex","perEnvLowerIndex","perEnvUpperIndex","instrumentIndex","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","pitchChannelCount","noiseChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestSlarmoosBoxVersion","encodedSongTitle","encodeURIComponent","usingSubFilterBitfield","encodedChannelName","harmonicsBits","encodedLoopMode","encodedReleaseMode","spectrumBits","checkboxValues","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","modFilter","modEnvelope","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","shapeIndex","unshift","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","customSamplesStr","customSamples","join","slice","_envelopeFromLegacyIndex","legacyIndex","_clearSamples","JSON","parse","substring","variantTest","fromBeepBox","fromJummBox","fromGoldBox","fromUltraBox","fromSlarmoosBox","_latestBeepboxVersion","_oldestBeepboxVersion","_latestJummBoxVersion","_oldestJummBoxVersion","_latestGoldBoxVersion","_oldestGoldBoxVersion","_latestUltraBoxVersion","_oldestUltraBoxVersion","_oldestSlarmoosBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","willLoadLegacySamplesForOldSongs","compressed_array","replaceAll","split","shift","_restoreChipWaveListToDefault","willLoadLegacySamples","willLoadNintariboxSamples","willLoadMarioPaintboxSamples","customSampleUrls","customSamplePresets","parseOldSyntax","_parseAndConfigureCustomSample","customSamplePresetsMap","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","rhythmMap","newRhythm","legacyWaves","chipWaveReal","chipWaveCounter","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sampleLoopInfoEncodedLength","sampleLoopInfoEncoded","sampleLoopInfo","atob","entry","info","URL","pregoldToEnvelope","aa","sustainValue","legacyEffects","legacyEnvelopes","originalValue","unisonLength","unisonSpreadNegative","unisonOffsetNegative","unisonExpressionNegative","unisonSignNegative","nextValue","restoreLimiterDefaults","channelNameLength","carrierCountTemp","tempModArray","chipWaveForCompat","freqToGold3","freqToUltraBox","jummToUltraEnvelope","slarURL3toURL4Envelope","envelopeDiscrete","updatedEnvelopes","pitchEnvelopeCompact","instrumentPitchEnvelopeStart","instrumentPitchEnvelopeEnd","instrumentEnvelopeInverse","pre3To3g","jummToG","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","shouldCorrectTempoMods","jummboxTempoMin","jumfive","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","pinCount","initialSize","bendCount","pinObj","intervalIter","noteIsForTempoMod","tempoOffset","isBackwards","restLength","patternIndex","lowestPart","chn","window","location","setTimeout","reload","_isProperUrl","customSampleUrlIndex","urlSliced","isCustomPercussive","customRootKey","presetIsUsingAdvancedLoopControls","presetChipWaveLoopStart","presetChipWaveLoopEnd","presetChipWaveStartOffset","presetChipWaveLoopMode","presetChipWavePlayBackwards","parsedSampleOptions","optionsStartIndex","optionsEndIndex","rawOptions","rawOption","optionCode","charAt","optionData","parsedUrl","sliceForSampleRate","sliceForRootKey","urlWithNamedOptions","namedOptions","pathname","replace","isCustomSampled","rootKey","customSamplePresetSettings","customSamplePreset","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","_format","customScale","keyOctave","introBars","loopBars","ticksPerBeat","beatsPerMinute","songEq","jsonObject","shouldLoadLegacySamples","instrumentObjects","waveName","names","oldNames","veryOldNames","includes","oldScaleNames","enigma","scaleName","letter","toUpperCase","symbol","C","D","E","F","G","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","getPattern","getBeatsPerMinute","maxValue","PickedString","delayLine","allPassG","allPassGDelta","sustainFilterA1","sustainFilterA1Delta","sustainFilterA2","sustainFilterA2Delta","sustainFilterB0","sustainFilterB0Delta","sustainFilterB1","sustainFilterB1Delta","sustainFilterB2","sustainFilterB2Delta","delayIndex","allPassSample","allPassPrevInput","sustainFilterSample","sustainFilterPrevOutput2","sustainFilterPrevInput1","sustainFilterPrevInput2","fractionalDelaySample","prevDelayLength","delayResetOffset","update","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","sustainType","allPassCenter","samplesPerSecond","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","shelfRadians","decayCurveStart","decayCurveEnd","register","registerShelfCenter","registerLowpassCenter","decayRateStart","decayRateEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","brightnessType","shelfGainStart","shelfGainEnd","cornerHardness","lowpass1stOrderCutoffRadiansStart","lowpass1stOrderCutoffRadiansEnd","lowpass2ndOrderCutoffRadiansStart","lowpass2ndOrderCutoffRadiansEnd","lowpass2ndOrderGainStart","lowpass2ndOrderGainEnd","sustainFilterA1Start","sustainFilterA2Start","sustainFilterB0Start","sustainFilterB1Start","sustainFilterB2Start","sustainFilterPhaseDelayStart","sustainFilterA1End","sustainFilterA2End","sustainFilterB0End","sustainFilterB1End","sustainFilterB2End","sustainFilterPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsStartUnscaled","noteSecondsEnd","noteSecondsEndUnscaled","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsStartUnscaled","prevNoteSecondsEnd","prevNoteSecondsEndUnscaled","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","tickTimeEnd","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","startPinTickAbsolute","startPinTickDefaultPitch","startPinTickPitch","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeStartReal","secondsPerTick","timeScale","secondsPerTickUnscaled","atNoteStart","forceContinueAtStart","tickTimeEndReal","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","computeTicksSinceStart","getPitchValue","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","isDiscrete","globalEnvelopeSpeed","timeSinceStart","defaultPitch","isModActive","secondsPerTickScaled","computePitchEnvelope","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","unspedTime","beats","noteSize","isDrumset","notePinStart","boundAdjust","noteSizeToVolumeMult","hashMax","timeHash","pitchHash","noteHash","weightedAverage","trap","saw","tri","attack","lin","calculateBends","monophonic","arpTime","tonePitch","lastInterval","startNote","endNote","envelopeLowerBound","envelopeUpperBound","range","computeDrumsetEnvelopes","drumsetFilterEnvelope","beatsPerPart","partTimeStart","partTimeEnd","computeDrumsetEnvelope","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","stringSustainStart","stringSustainEnd","noiseSamples","phases","directions","chipWaveCompletions","chipWavePrevWaves","chipWaveCompletionsLastWave","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","vibratoTime","nextVibratoTime","envelopeTime","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","granularMix","granularMixDelta","granularDelayLine","granularDelayLineIndex","granularMaximumDelayTimeInSeconds","usesRandomGrainLocation","granularDelayLineDirty","computeGrains","ringModMix","ringModMixDelta","ringModPhase","ringModPhaseDelta","ringModPhaseDeltaScale","ringModMixFade","ringModMixFadeDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","granularGrains","granularMaximumGrains","granularGrainsLength","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","allocateEchoBuffers","granularDelayLineSizeInSeconds","granularDelayLineSizeInSamples","oldGrainsLength","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","getTicksIntoBar","getCurrentPart","envelopeSpeeds","useEnvelopeSpeed","getModValue","isInteger","usesGranular","usesRingModulation","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","granularChance","granularMixEnd","iterations","granularMinGrainSizeInMilliseconds","granularGrainSizeInSeconds","granularGrainSizeInSamples","granularDelayLineLength","grainIndex","grain","minDelayTimeInSeconds","maxDelayTimeInSeconds","useDistortionStart","useDistortionEnd","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","panEnvelopeStart","panEnvelopeEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","chorusEnvelopeStart","chorusEnvelopeEnd","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","useRingModStart","useRingModEnd","useRingModEnvelopeStart","useRingModEnvelopeEnd","useRingModHzStart","useRingModHzEnd","useRingModHzEnvelopeStart","useRingModHzEnvelopeEnd","ringModStart","ringModEnd","ringModPhaseDeltaStart","ringModPhaseDeltaEnd","maxEchoMult","averageEchoDelaySeconds","echoSustainEnvelopeStart","echoSustainEnvelopeEnd","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","echoDelayEnvelopeStart","echoDelayEnvelopeEnd","useEchoDelayStart","useEchoDelayEnd","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","reverbEnvelopeStart","reverbEnvelopeEnd","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","syncSongState","channelState","initModFilters","tmpNoteFilterEnd","warmUpSynthesizer","getSamplesPerTick","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","heldMods","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","songFilterParam","tgtSong","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playhead","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveBassInputDuration","liveInputStarted","liveBassInputStarted","liveInputPitches","liveBassInputPitches","liveInputChannel","liveBassInputChannel","liveInputInstruments","liveBassInputInstruments","oscRefreshEventTimer","oscEnabled","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","loopBarStart","loopBarEnd","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","songEqFilterVolume","songEqFilterVolumeDelta","songEqFiltersL","songEqFiltersR","songEqFilterCount","initialSongEqFilterInput1L","initialSongEqFilterInput2L","initialSongEqFilterInput1R","initialSongEqFilterInput2R","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","forceHoldMods","found","holdFor","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","computeSongState","outputBufferLength","playSong","outputDataLUnfiltered","outputDataRUnfiltered","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","filtersL","filtersR","filterCount","initialFilterInput1L","initialFilterInput2L","initialFilterInput1R","initialFilterInput2R","applyFilters","inputSampleL","sampleL","inputSampleR","sampleR","sanitizeFilters","absL","absR","limitRange","limitTarget","limitedVolume","arpEnvelopeStart","useArpeggioSpeed","maxInstrumentsPerChannel","isFinite","freeTone","newTone","releaseTone","toneIndex","bassPitches","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","chipWaveLength","firstOffset","lastOffset","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","vibratoLfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetEnvelopeComputer","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","isMono","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","decimalOffsetModStart","decimalOffsetStart","useSustainStart","useSustainEnd","startFreq","unisonEnvelopeStart","unisonEnvelopeEnd","unisonStartA","unisonEndA","divisor","unisonStart","unisonEnd","unisonBStart","unisonBEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","useDynamismStart","useDynamismEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","useSpreadStart","useSpreadEnd","averageSpreadSlider","curvedSpread","baseShape","useShapeStart","useShapeEnd","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","wrappedFmSynth","Function","loopableChipSynth","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","fm6SynthFunctionCache","wrappedFm6Synth","wrap","voiceCount","chipFunction","loopableChipFunctionCache","chipSource","chipFunctionCache","sampleListA","voice","sampleListB","harmonicsFunction","harmonicsFunctionCache","harmonicsSource","sampleList","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","pulseFunction","pulseFunctionCache","pulseSource","data","dynamismDelta","unisonDetunes","shapeDelta","filters","initialFilterInput1","initialFilterInput2","sampleIndex","phase","supersawSample","t","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","inputSample","output","noiseFunction","noiseFunctionCache","noiseSource","spectrumFunction","spectrumFunctionCache","spectrumSource","drumFunction","drumFunctionCache","drumSource","stereoBufferIndex","envelopeTarget","tgtInstrumentState","dotTarget","lerpEndRatio","bound","findRandomZeroCrossing","phaseMask","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","ofBar","_b"],"sources":["../build/synth/SynthConfig.js","../build/editor/EditorConfig.js","../build/synth/FFT.js","../build/synth/Deque.js","../build/global/Events.js","../build/synth/filtering.js","../node_modules/js-xxhash/dist/esm/xxHash32.js","../build/synth/synth.js"],"sourcesContent":["/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nexport const TypePresets = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\nexport function getSampleLoadingStatusName(status) {\n    switch (status) {\n        case 0: return \"loading\";\n        case 1: return \"loaded\";\n        case 2: return \"error\";\n    }\n}\nexport class SampleLoadingState {\n    constructor() {\n        this.statusTable = {};\n        this.urlTable = {};\n        this.totalSamples = 0;\n        this.samplesLoaded = 0;\n    }\n}\nexport const sampleLoadingState = new SampleLoadingState();\nexport class SampleLoadedEvent extends Event {\n    constructor(totalSamples, samplesLoaded) {\n        super(\"sampleloaded\");\n        this.totalSamples = totalSamples;\n        this.samplesLoaded = samplesLoaded;\n    }\n}\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n        super();\n    }\n}\nexport const sampleLoadEvents = new SampleLoadEvents();\nexport function startLoadingSample(url, chipWaveIndex, presetSettings, rawLoopOptions, customSampleRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n        let closedSampleLoaderAudioContext = false;\n        const chipWave = Config.chipWaves[chipWaveIndex];\n        const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n        const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n        if (OFFLINE) {\n            if (url.slice(0, 5) === \"file:\") {\n                const dirname = yield getDirname();\n                const joined = yield pathJoin(dirname, url.slice(5));\n                url = joined;\n            }\n        }\n        fetch(url).then((response) => {\n            if (!response.ok) {\n                sampleLoadingState.statusTable[chipWaveIndex] = 2;\n                return Promise.reject(new Error(\"Couldn't load sample\"));\n            }\n            return response.arrayBuffer();\n        }).then((arrayBuffer) => {\n            return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n        }).then((audioBuffer) => {\n            const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n            const integratedSamples = performIntegral(samples);\n            chipWave.samples = integratedSamples;\n            rawChipWave.samples = samples;\n            rawRawChipWave.samples = samples;\n            if (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n                presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n                presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n                presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n                presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n                presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n            }\n            sampleLoadingState.samplesLoaded++;\n            sampleLoadingState.statusTable[chipWaveIndex] = 1;\n            sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n            if (!closedSampleLoaderAudioContext) {\n                closedSampleLoaderAudioContext = true;\n                sampleLoaderAudioContext.close();\n            }\n        }).catch((error) => {\n            sampleLoadingState.statusTable[chipWaveIndex] = 2;\n            alert(\"Failed to load \" + url + \":\\n\" + error);\n            if (!closedSampleLoaderAudioContext) {\n                closedSampleLoaderAudioContext = true;\n                sampleLoaderAudioContext.close();\n            }\n        });\n    });\n}\nexport function getLocalStorageItem(key, defaultValue) {\n    let value = localStorage.getItem(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\nfunction loadScript(url) {\n    const result = new Promise((resolve, reject) => {\n        if (!Config.willReloadForCustomSamples) {\n            const script = document.createElement(\"script\");\n            script.src = url;\n            document.head.appendChild(script);\n            script.addEventListener(\"load\", (event) => {\n                resolve();\n            });\n        }\n        else {\n        }\n    });\n    return result;\n}\nexport function loadBuiltInSamples(set) {\n    const defaultIndex = 0;\n    const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;\n    if (set == 0) {\n        const chipWaves = [\n            { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n            { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n            { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n            { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n            { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n            { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n            { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n            { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n            { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n            { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n            { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n            { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n            { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n            { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n            { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n            { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n            { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n            { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n            { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n            { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n            { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n            { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n            { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n            { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n            { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n            { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n            { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n            { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n            { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n            { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n            { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n            { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n            { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n            { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n            { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n            { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n            { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n            { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n            { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n            { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n            { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n            { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n            { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n            { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n            { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n            { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n            { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n            { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n            { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n        }\n        loadScript(\"samples.js\")\n            .then(() => loadScript(\"samples2.js\"))\n            .then(() => loadScript(\"samples3.js\"))\n            .then(() => loadScript(\"drumsamples.js\"))\n            .then(() => loadScript(\"wario_samples.js\"))\n            .then(() => loadScript(\"kirby_samples.js\"))\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(kicksample),\n                centerWave(snaresample),\n                centerWave(pianosample),\n                centerWave(WOWsample),\n                centerWave(overdrivesample),\n                centerWave(trumpetsample),\n                centerWave(saxophonesample),\n                centerWave(orchhitsample),\n                centerWave(detatchedviolinsample),\n                centerWave(synthsample),\n                centerWave(sonic3snaresample),\n                centerWave(comeonsample),\n                centerWave(choirsample),\n                centerWave(overdrivensample),\n                centerWave(flutesample),\n                centerWave(legatoviolinsample),\n                centerWave(tremoloviolinsample),\n                centerWave(amenbreaksample),\n                centerWave(pizzicatoviolinsample),\n                centerWave(timallengruntsample),\n                centerWave(tubasample),\n                centerWave(loopingcymbalsample),\n                centerWave(kickdrumsample),\n                centerWave(snaredrumsample),\n                centerWave(closedhihatsample),\n                centerWave(foothihatsample),\n                centerWave(openhihatsample),\n                centerWave(crashsample),\n                centerWave(pianoC4sample),\n                centerWave(liverpadsample),\n                centerWave(marimbasample),\n                centerWave(susdotwavsample),\n                centerWave(wackyboxttssample),\n                centerWave(peppersteak1),\n                centerWave(peppersteak2),\n                centerWave(vinyl),\n                centerWave(slapbass),\n                centerWave(hdeboverdrive),\n                centerWave(sunsoftbass),\n                centerWave(masculinechoir),\n                centerWave(femininechoir),\n                centerWave(southtololoche),\n                centerWave(harp),\n                centerWave(panflute),\n                centerWave(krumhorn),\n                centerWave(timpani),\n                centerWave(crowdhey),\n                centerWave(warioland4brass),\n                centerWave(warioland4organ),\n                centerWave(warioland4daow),\n                centerWave(warioland4hourchime),\n                centerWave(warioland4tick),\n                centerWave(kirbykick),\n                centerWave(kirbysnare),\n                centerWave(kirbybongo),\n                centerWave(kirbyclick),\n                centerWave(funkkick),\n                centerWave(funksnare),\n                centerWave(funksnareleft),\n                centerWave(funksnareright),\n                centerWave(funktomhigh),\n                centerWave(funktomlow),\n                centerWave(funkhihatclosed),\n                centerWave(funkhihathalfopen),\n                centerWave(funkhihatopen),\n                centerWave(funkhihatopentip),\n                centerWave(funkhihatfoot),\n                centerWave(funkcrash),\n                centerWave(funkcrashtip),\n                centerWave(funkride)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else if (set == 1) {\n        const chipWaves = [\n            { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n        }\n        loadScript(\"nintaribox_samples.js\")\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(chronoperc1finalsample),\n                centerWave(synthkickfmsample),\n                centerWave(woodclicksample),\n                centerWave(acousticsnaresample)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else if (set == 2) {\n        const chipWaves = [\n            { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n            { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n            { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n            { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n            { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n        }\n        loadScript(\"mario_paintbox_samples.js\")\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(catpaintboxsample),\n                centerWave(gameboypaintboxsample),\n                centerWave(mariopaintboxsample),\n                centerWave(drumpaintboxsample),\n                centerWave(yoshipaintboxsample),\n                centerWave(starpaintboxsample),\n                centerWave(fireflowerpaintboxsample),\n                centerWave(dogpaintbox),\n                centerWave(oinkpaintbox),\n                centerWave(swanpaintboxsample),\n                centerWave(facepaintboxsample)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\nexport class Config {\n    static generateSineWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength);\n        }\n        return wave;\n    }\n    static generateTriWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength)) / (Math.PI / 2);\n        }\n        return wave;\n    }\n    static generateTrapezoidWave(drive = 2) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength)) * drive));\n        }\n        return wave;\n    }\n    static generateSquareWave(phaseWidth = 0) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        const centerPoint = _a.sineWaveLength / 4;\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * _a.sineWaveLength / 2)\n                || ((Math.abs(i - _a.sineWaveLength - centerPoint) < phaseWidth * _a.sineWaveLength / 2))) * 2 - 1;\n        }\n        return wave;\n    }\n    static generateSawWave(inverse = false) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = ((i + (_a.sineWaveLength / 4.0)) * 2.0 / _a.sineWaveLength) % 2 - 1;\n            wave[i] = inverse ? -wave[i] : wave[i];\n        }\n        return wave;\n    }\n    static generateQuasiSineWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength));\n        }\n        return wave;\n    }\n}\n_a = Config;\nConfig.thresholdVal = -10;\nConfig.kneeVal = 40;\nConfig.ratioVal = 12;\nConfig.attackVal = 0;\nConfig.releaseVal = 0.25;\nConfig.willReloadForCustomSamples = false;\nConfig.jsonFormat = \"slarmoosbox\";\nConfig.scales = toNameMap([\n    { name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] },\n    { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] },\n    { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] },\n    { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] },\n    { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] },\n    { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] },\n    { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] },\n    { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] },\n    { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] },\n    { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] },\n    { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] },\n    { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] },\n    { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] },\n    { name: \"Blues Major\", realName: \"blues major\", flags: [true, false, true, true, true, false, false, true, false, true, false, false] },\n    { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] },\n    { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] },\n    { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] },\n    { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] },\n    { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] },\n    { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] },\n    { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] },\n    { name: \"No Dabbing (MB)\", realName: \"no dabbing\", flags: [true, true, false, true, true, true, true, true, true, false, true, false] },\n    { name: \"Jacked Toad (TB)\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n    { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n    { name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] },\n]);\nConfig.keys = toNameMap([\n    { name: \"C\", isWhiteKey: true, basePitch: 12 },\n    { name: \"C♯\", isWhiteKey: false, basePitch: 13 },\n    { name: \"D\", isWhiteKey: true, basePitch: 14 },\n    { name: \"D♯\", isWhiteKey: false, basePitch: 15 },\n    { name: \"E\", isWhiteKey: true, basePitch: 16 },\n    { name: \"F\", isWhiteKey: true, basePitch: 17 },\n    { name: \"F♯\", isWhiteKey: false, basePitch: 18 },\n    { name: \"G\", isWhiteKey: true, basePitch: 19 },\n    { name: \"G♯\", isWhiteKey: false, basePitch: 20 },\n    { name: \"A\", isWhiteKey: true, basePitch: 21 },\n    { name: \"A♯\", isWhiteKey: false, basePitch: 22 },\n    { name: \"B\", isWhiteKey: true, basePitch: 23 },\n]);\nConfig.blackKeyNameParents = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\nConfig.tempoMin = 1;\nConfig.tempoMax = 500;\nConfig.octaveMin = -2;\nConfig.octaveMax = 2;\nConfig.echoDelayRange = 24;\nConfig.echoDelayStepTicks = 4;\nConfig.echoSustainRange = 8;\nConfig.echoShelfHz = 4000.0;\nConfig.echoShelfGain = Math.pow(2.0, -0.5);\nConfig.reverbShelfHz = 8000.0;\nConfig.reverbShelfGain = Math.pow(2.0, -1.5);\nConfig.reverbRange = 32;\nConfig.reverbDelayBufferSize = 16384;\nConfig.reverbDelayBufferMask = _a.reverbDelayBufferSize - 1;\nConfig.beatsPerBarMin = 1;\nConfig.beatsPerBarMax = 64;\nConfig.barCountMin = 1;\nConfig.barCountMax = 1024;\nConfig.instrumentCountMin = 1;\nConfig.layeredInstrumentCountMax = 10;\nConfig.patternInstrumentCountMax = 10;\nConfig.partsPerBeat = 24;\nConfig.ticksPerPart = 2;\nConfig.ticksPerArpeggio = 3;\nConfig.arpeggioPatterns = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\nConfig.rhythms = toNameMap([\n    { name: \"÷3 (triplets)\", stepsPerBeat: 3, roundUpThresholds: [5, 12, 18] },\n    { name: \"÷4 (standard)\", stepsPerBeat: 4, roundUpThresholds: [3, 9, 17, 21] },\n    { name: \"÷6\", stepsPerBeat: 6, roundUpThresholds: null },\n    { name: \"÷8\", stepsPerBeat: 8, roundUpThresholds: null },\n    { name: \"÷12\", stepsPerBeat: 12, roundUpThresholds: null },\n    { name: \"freehand\", stepsPerBeat: 24, roundUpThresholds: null },\n]);\nConfig.instrumentTypeNames = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\nConfig.instrumentTypeHasSpecialInterval = [true, true, false, false, false, true, false, false, false, false, false];\nConfig.chipBaseExpression = 0.03375;\nConfig.fmBaseExpression = 0.03;\nConfig.noiseBaseExpression = 0.19;\nConfig.spectrumBaseExpression = 0.3;\nConfig.drumsetBaseExpression = 0.45;\nConfig.harmonicsBaseExpression = 0.025;\nConfig.pwmBaseExpression = 0.04725;\nConfig.supersawBaseExpression = 0.061425;\nConfig.pickedStringBaseExpression = 0.025;\nConfig.distortionBaseVolume = 0.011;\nConfig.bitcrusherBaseVolume = 0.010;\nConfig.granularOutputLoudnessCompensation = 0.5;\nConfig.rawChipWaves = toNameMap([\n    { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n    { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n    { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n    { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n    { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n    { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n    { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n    { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n    { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n    { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n    { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n    { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n    { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n    { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n    { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n    { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n    { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n    { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n    { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n    { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },\n    { name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n    { name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n    { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n    { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n    { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n    { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n    { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n    { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\n    { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n    { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n    { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n    { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n    { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n    { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n    { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n    { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n    { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n    { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n    { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n    { name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n    { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n    { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n    { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n    { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n    { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n    { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 - 2, 0, 4, 1, 4, 6, 7, 3]) },\n    { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n    { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n    { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1, 0.13 / -0.3, 0.13 / -0.5, 0.13 / -0.7, 0.13 / -0.9, 0.13 / -0.11, 0.13 / -0.31, 0.13 / -0.51, 0.13 / -0.71, 0.13 / -0.91, 0.13 / -0.12, 0.13 / -0.32, 0.13 / -0.52, 0.13 / -0.72, 0.13 / -0.92, 0.13 / -0.13, 0.13 / 0.13, 0.13 / 0.92, 0.13 / 0.72, 0.13 / 0.52, 0.13 / 0.32, 0.13 / 0.12, 0.13 / 0.91, 0.13 / 0.71, 0.13 / 0.51, 0.13 / 0.31, 0.13 / 0.11, 0.13 / 0.9, 0.13 / 0.7, 0.13 / 0.5, 0.13 / 0.3, 0.13]) },\n    { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n    { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n    { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n    { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n    { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n    { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n    { name: \"brucebox pokey 5step bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n    { name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n    { name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n    { name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0, 5.0 / 55.0, -9.0, 6.5 / 6.5, -55.0, 18.5 / -26.0]) },\n    { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n    { name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n    { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n    { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6, -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n    { name: \"zefbox saw narrow\", expression: 0.65, samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2, 1]) },\n    { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n    { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n    { name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n    { name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n    { name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n    { name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n    { name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n    { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n    { name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n    { name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n    { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n    { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n    { name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n    { name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n    { name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n    { name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000, -0.01208, -0.02997, -0.04382, -0.06042, -0.07529, -0.09116, -0.10654, -0.12189, -0.13751, -0.15289, -0.16849, -0.18387, -0.19974, -0.21484, -0.23071, -0.24557, -0.26144, -0.27731, -0.29141, -0.30350, -0.32416, -0.34406, -0.32947, -0.31158, -0.33725, -0.37579, -0.39746, -0.40201, -0.40906, -0.44180, -0.47229, -0.47379, -0.47733, -0.45239, -0.33954, -0.22894, -0.22443, -0.32138, -0.46371, -0.57178, -0.61081, -0.59998, -0.61459, -0.62189, -0.43979, -0.19217, -0.12643, -0.17252, -0.20956, -0.20981, -0.19217, -0.22845, -0.34332, -0.50629, -0.64307, -0.72922, -0.81384, -0.87857, -0.90149, -0.88687, -0.86169, -0.87781, -0.80478, -0.52493, -0.31308, -0.33249, -0.39395, -0.39017, -0.30301, -0.19949, -0.13071, -0.02493, 0.14307, 0.34961, 0.52542, 0.63223, 0.68613, 0.74710, 0.87305, 0.98184, 0.98889, 0.97052, 0.99066, 0.99747, 0.99344, 0.99469, 0.99393, 0.99570, 0.99393, 0.99521, 0.99469, 0.99420, 0.99521, 0.99420, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99469, 0.99493, 0.99420, 0.99521, 0.99393, 0.99493, 0.99469, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99445, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99545, 0.99368, 0.99393, 0.99445, 0.99268, 0.97983, 0.97229, 0.95944, 0.88486, 0.76773, 0.64481, 0.53098, 0.39847, 0.19318, -0.03827, -0.20325, -0.39319, -0.68765, -0.88461, -0.93448, -0.96069, -0.97681, -0.98715, -0.99042, -0.99142, -0.99091, -0.99142, -0.99219, -0.99091, -0.99219, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99142, -0.99142, -0.99191, -0.99091, -0.99219, -0.99118, -0.99142, -0.99167, -0.99091, -0.99219, -0.99091, -0.99167, -0.99142, -0.99091, -0.99191, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99118, -0.99142, -0.99191, -0.99066, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99243, -0.98865, -0.98764, -0.99219, -0.98083, -0.92517, -0.92770, -0.91486, -0.59042, -0.15189, 0.02945, 0.05667, 0.06195, 0.00629, -0.18008, -0.56497, -0.88010, -0.92770, -0.92871, -0.97705, -0.99167, -0.98663, -0.99118, -0.99042, -0.99219, -0.99142, -0.99118, -0.98941, -0.99219, -1.00000, -0.97580, -0.95993, -0.99948, -0.98236, -0.84659, -0.74860, -0.70679, -0.59747, -0.48035, -0.41687, -0.36826, -0.29745, -0.18185, -0.06219, 0.02164, 0.07907, 0.13123, 0.18033, 0.19620, 0.15692, 0.14053, 0.20251, 0.27530, 0.30905, 0.29092, 0.27252, 0.30402, 0.32416, 0.32214, 0.35239, 0.39670, 0.43198, 0.49420, 0.58487, 0.64154, 0.65967, 0.67050, 0.67026, 0.66522, 0.65540, 0.66119, 0.70627, 0.75842, 0.78738, 0.78940, 0.78763, 0.80402, 0.85944, 0.94559, 0.98990, 0.98160, 0.98007, 0.99368, 0.99393, 0.98538, 0.97580, 0.97101, 0.93802, 0.81812, 0.64633, 0.46649, 0.28613, 0.14685, 0.08966, 0.12543, 0.20325, 0.24557, 0.18866, 0.02795, -0.20175, -0.44205, -0.58713, -0.57629, -0.41385, -0.14255, 0.18033, 0.47882, 0.68311, 0.72314, 0.62064, 0.48309, 0.43073, 0.53577, 0.72794, 0.90250, 0.97354, 0.97000, 0.98083, 0.99191, 0.99319, 0.99493, 0.99393, 0.99521, 0.99393, 0.99545, 0.99420, 0.99493, 0.99493, 0.99445, 0.99545, 0.99420, 0.99545, 0.99243, 0.98917, 0.98386, 0.97781, 0.95844, 0.89066, 0.81561, 0.78134, 0.77277, 0.75995, 0.73022, 0.67126, 0.57178, 0.47000, 0.38361, 0.29419, 0.20703, 0.14734, 0.15866, 0.25162, 0.35818, 0.45062, 0.56750, 0.69748, 0.81232, 0.89697, 0.95062, 0.97656, 0.98615, 0.99191, 0.99219, 0.99243, 0.99368, 0.99368, 0.97028, 0.95566, 0.94559, 0.82617, 0.59973, 0.38361, 0.23901, 0.15338, 0.12921, 0.11206, 0.04382, -0.12946, -0.43552, -0.72644, -0.89847, -0.95465, -0.95541, -0.97229, -0.99268, -0.99319, -0.98840, -0.99142, -0.99167, -0.99091, -0.98840, -0.98965, -0.99368, -0.97455, -0.95010, -0.94684, -0.96219, -0.98514, -0.99243, -0.98889, -0.98917, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99191, -0.99066, -0.99167, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99167, -0.99091, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99091, -0.99118, -0.99243, -0.98941, -0.98462, -0.96976, -0.96320, -0.96194, -0.87305, -0.66196, -0.44809, -0.29495, -0.18085, -0.11813, -0.11334, -0.18564, -0.34885, -0.58237, -0.80450, -0.93726, -0.97806, -0.97354, -0.97531, -0.98990, -0.99368, -0.98941, -0.99219, -0.99091, -0.99142, -0.99167, -0.99091, -0.99191, -0.99118, -0.99219, -0.98236, -0.97781, -0.97656, -0.95135, -0.87204, -0.71335, -0.52139, -0.34232, -0.17783, -0.00906, 0.14886, 0.30450, 0.48889, 0.67404, 0.84030, 0.94128, 0.97681, 0.98462, 0.98337, 0.99142, 0.99521, 0.99493, 0.99420, 0.99445, 0.99521, 0.99393, 0.99545, 0.99445, 0.99521, 0.99521, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99521, 0.99445, 0.99445, 0.99521, 0.99445, 0.99545, 0.99445, 0.99469, 0.99493, 0.99393, 0.99493, 0.99445, 0.99393, 0.98285, 0.97781, 0.97479, 0.92844, 0.82114, 0.66095, 0.52417, 0.46826, 0.46722, 0.47934, 0.47379, 0.47076, 0.48209, 0.42014, 0.25439, 0.10074, -0.00302, -0.08966, -0.16068, -0.21436, -0.22040, -0.15137, -0.00476, 0.18536, 0.37631, 0.52292, 0.62164, 0.70425, 0.74835, 0.72366, 0.63928, 0.52567, 0.40805, 0.35666, 0.42896, 0.60175, 0.80200, 0.92743, 0.96548, 0.97632, 0.98337, 0.99066, 0.99521, 0.99420, 0.99368, 0.99292, 0.98840, 0.98083, 0.96774, 0.93323, 0.85440, 0.69470, 0.47202, 0.20425, -0.08890, -0.36423, -0.60025, -0.77481, -0.90173, -0.96017, -0.97028, -0.98108, -0.98840, -0.99219, -0.98990, -0.99219, -0.99142, -0.99142, -0.99219, -0.99091, -0.99243, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99118, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.98917, -0.99042, -0.99445, -0.97330, -0.95590, -0.96219, -0.89670, -0.72241, -0.55112, -0.44809, -0.39319, -0.37833, -0.35641, -0.26270, -0.14230, -0.11282, -0.13525, -0.11536, -0.09671, -0.11511, -0.18060, -0.26874, -0.33374, -0.42215, -0.51358, -0.44785, -0.30450, -0.28613, -0.30527, -0.25037, -0.15390, -0.08286, -0.11157, -0.12592, -0.00327, 0.13803, 0.19141, 0.12820, 0.01788, -0.03952, -0.12592, -0.26773, -0.34634, -0.31384, -0.18060, -0.01080, 0.13574, 0.26120, 0.36975, 0.46573, 0.55087, 0.63626, 0.73022, 0.83072, 0.92014, 0.97177, 0.98587, 0.98413, 0.99167, 0.99445, 0.99292, 0.99219, 0.98740, 0.98007, 0.96472, 0.92239, 0.82166, 0.69067, 0.57959, 0.54962, 0.59695, 0.64255, 0.64633, 0.60629, 0.55942, 0.54910, 0.58966, 0.61887, 0.56952, 0.54181, 0.59518, 0.63248, 0.63876, 0.65463, 0.73398, 0.88312, 0.96927, 0.97101, 0.97958, 0.99344, 0.99420, 0.99268, 0.99493, 0.99469, 0.99445, 0.99521, 0.99445, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99420, 0.99393, 0.99420, 0.98840, 0.98309, 0.98309, 0.96069, 0.88461, 0.79370, 0.72064, 0.65765, 0.59998, 0.53247, 0.49268, 0.48615, 0.44205, 0.38034, 0.36447, 0.38715, 0.39294, 0.32645, 0.19595, 0.07782, -0.05893, -0.27832, -0.48309, -0.62619, -0.72995, -0.79999, -0.84583, -0.82166, -0.73575, -0.67227, -0.65491, -0.64960, -0.66397, -0.70175, -0.72894, -0.74658, -0.76724, -0.79520, -0.82846, -0.86523, -0.90527, -0.94382, -0.89948, -0.69849, -0.47479, -0.31662, -0.15414, -0.00729, 0.07077, 0.08237, 0.04431, -0.02292, -0.11761, -0.24307, -0.36926, -0.45087, -0.46170, -0.40250, -0.30679, -0.17529, 0.00000, 0.14331, 0.24179, 0.36774, 0.49545, 0.56522, 0.57907, 0.56775, 0.53851, 0.51132, 0.48688, 0.41913, 0.26044, 0.00955, -0.26297, -0.46396, -0.62341, -0.82214, -0.94684, -0.96774, -0.97531, -0.98413, -0.99017, -0.98990, -0.99219, -0.99066, -0.99142, -0.99167, -0.99118, -0.99219, -0.98990, -0.99118, -0.99368, -0.99142, -0.97757, -0.97403, -0.98007, -0.96170, -0.86826, -0.67783, -0.52719, -0.48788, -0.45490, -0.43146, -0.47681, -0.54105, -0.57983, -0.60904, -0.62317, -0.59949, -0.55566, -0.52063, -0.52115, -0.55112, -0.56244, -0.58337, -0.65540, -0.73373, -0.77228, -0.74759, -0.68890, -0.64609, -0.61887, -0.58060, -0.50351, -0.40729, -0.33929, -0.35110, -0.42944, -0.47028, -0.42267, -0.32718, -0.20224, -0.05640, 0.04556, 0.10529, 0.17630, 0.26169, 0.33197, 0.32138, 0.23776, 0.20956, 0.23148, 0.20352, 0.23325, 0.39267, 0.52719, 0.58438, 0.62289, 0.66345, 0.70023, 0.66296, 0.54330, 0.42618, 0.33475, 0.24533, 0.14105, 0.03851, 0.01358, 0.09143, 0.22845, 0.34961, 0.41711, 0.48740, 0.58914, 0.69519, 0.78186, 0.84357, 0.89822, 0.95389, 0.98135, 0.98615, 0.99167, 0.99243, 0.99445, 0.99420, 0.99469, 0.99493, 0.99393, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99469, 0.98965, 0.98715, 0.98563, 0.96295, 0.91736, 0.86624, 0.82367, 0.77554, 0.68411, 0.53549, 0.38916, 0.26120, 0.11435, -0.04053, -0.18161, -0.23172, -0.19394, -0.15237, -0.10730, -0.02997, 0.08588, 0.22620, 0.34305, 0.44104, 0.55740, 0.65765, 0.71259, 0.69217, 0.65363, 0.69748, 0.79572, 0.89368, 0.95514, 0.97733, 0.98413, 0.98816, 0.99243, 0.99445, 0.99243, 0.97302, 0.96674, 0.97983, 0.90378, 0.71005, 0.51056, 0.40451, 0.40982, 0.41559, 0.32996, 0.24356, 0.18866, 0.11411, 0.05365, 0.01157, -0.03247, -0.09216, -0.16095, -0.23248, -0.31662, -0.39771, -0.48663, -0.59647, -0.71536, -0.82013, -0.85287, -0.82947, -0.84937, -0.92215, -0.97177, -0.98663, -0.98816, -0.98438, -0.99091, -0.99219, -0.99091, -0.99191, -0.99042, -0.99191, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99142]) },\n    { name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785, -0.67621, -0.40268, -0.43817, -0.45468, -0.22531, -0.18329, 0.24750, 0.71246, 0.52155, 0.56082, 0.48395, 0.33990, 0.46957, 0.27744, 0.42313, 0.47104, 0.18796, 0.12930, -0.13901, -0.07431, -0.16348, -0.74857, -0.73206, -0.35181, -0.26227, -0.41882, -0.27786, -0.19806, -0.19867, 0.18643, 0.24808, 0.08847, -0.06964, 0.06912, 0.20474, -0.05304, 0.29416, 0.31967, 0.14243, 0.27521, -0.23932, -0.14752, 0.12360, -0.26123, -0.26111, 0.06616, 0.26520, 0.08090, 0.15240, 0.16254, -0.12061, 0.04562, 0.00131, 0.04050, 0.08182, -0.21729, -0.17041, -0.16312, -0.08563, 0.06390, 0.05099, 0.05627, 0.02728, 0.00726, -0.13028, -0.05673, -0.14969, -0.17645, 0.35492, 0.16766, -0.00897, 0.24326, -0.00461, -0.04456, 0.01776, -0.04950, -0.01221, 0.02039, 0.07684, 0.13397, 0.39850, 0.35962, 0.13754, 0.42310, 0.27161, -0.17609, 0.03659, 0.10635, -0.21909, -0.22046, -0.20258, -0.40973, -0.40280, -0.40521, -0.66284]) },\n]);\nConfig.chipWaves = rawChipToIntegrated(_a.rawChipWaves);\nConfig.rawRawChipWaves = _a.rawChipWaves;\nConfig.firstIndexForSamplesInChipWaveList = _a.chipWaves.length;\nConfig.chipNoises = toNameMap([\n    { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n    { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n    { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    { name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n]);\nConfig.filterFreqStep = 1.0 / 4.0;\nConfig.filterFreqRange = 34;\nConfig.filterFreqReferenceSetting = 28;\nConfig.filterFreqReferenceHz = 8000.0;\nConfig.filterFreqMaxHz = _a.filterFreqReferenceHz * Math.pow(2.0, _a.filterFreqStep * (_a.filterFreqRange - 1 - _a.filterFreqReferenceSetting));\nConfig.filterFreqMinHz = 8.0;\nConfig.filterGainRange = 15;\nConfig.filterGainCenter = 7;\nConfig.filterGainStep = 1.0 / 2.0;\nConfig.filterMaxPoints = 12;\nConfig.filterTypeNames = [\"low-pass\", \"high-pass\", \"peak\"];\nConfig.filterMorphCount = 10;\nConfig.filterSimpleCutRange = 11;\nConfig.filterSimplePeakRange = 8;\nConfig.fadeInRange = 10;\nConfig.fadeOutTicks = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\nConfig.fadeOutNeutral = 4;\nConfig.drumsetFadeOutTicks = 48;\nConfig.transitions = toNameMap([\n    { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n    { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n]);\nConfig.vibratos = toNameMap([\n    { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n    { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n    { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 },\n    { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n    { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n]);\nConfig.vibratoTypes = toNameMap([\n    { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n    { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 },\n]);\nConfig.arpSpeedScale = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\nConfig.unisons = toNameMap([\n    { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n    { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n    { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n    { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n    { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n    { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n    { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n    { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n    { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n    { name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n    { name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n    { name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n    { name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n    { name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n    { name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n    { name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n    { name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n    { name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n    { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n    { name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n    { name: \"augmented\", voices: 4, spread: 6, offset: 6, expression: 0.5, sign: 1.0 },\n    { name: \"diminished\", voices: 5, spread: 6, offset: 6, expression: 0.4, sign: 1.0 },\n    { name: \"chorus\", voices: 9, spread: 0.22, offset: 0, expression: 0.15, sign: 1.0 },\n    { name: \"block\", voices: 9, spread: 6, offset: 6, expression: 0.15, sign: 0.8 },\n    { name: \"extraterrestrial\", voices: 6, spread: 15.2, offset: -6, expression: 0.35, sign: 0.7 },\n    { name: \"bow\", voices: 9, spread: 0.006, offset: 0, expression: 0.15, sign: 0.5 }\n]);\nConfig.effectNames = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\", \"\", \"ring mod\", \"granular\"];\nConfig.effectOrder = [2, 10, 11, 7, 8, 9, 5, 14, 3, 4, 1, 6, 0, 13];\nConfig.noteSizeMax = 6;\nConfig.volumeRange = 50;\nConfig.volumeLogScale = 0.1428;\nConfig.panCenter = 50;\nConfig.panMax = _a.panCenter * 2;\nConfig.panDelaySecondsMax = 0.001;\nConfig.ringModRange = 8;\nConfig.ringModHzRange = 64;\nConfig.ringModMinHz = 20;\nConfig.ringModMaxHz = 4400;\nConfig.rmHzOffsetCenter = 200;\nConfig.rmHzOffsetMax = 400;\nConfig.rmHzOffsetMin = 0;\nConfig.granularRange = 10;\nConfig.grainSizeMin = 40;\nConfig.grainSizeMax = 2000;\nConfig.grainSizeStep = 40;\nConfig.grainRangeMax = 1600;\nConfig.grainAmountsMax = 10;\nConfig.granularEnvelopeType = 0;\nConfig.chorusRange = 8;\nConfig.chorusPeriodSeconds = 2.0;\nConfig.chorusDelayRange = 0.0034;\nConfig.chorusDelayOffsets = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\nConfig.chorusPhaseOffsets = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\nConfig.chorusMaxDelay = _a.chorusDelayRange * (1.0 + _a.chorusDelayOffsets[0].concat(_a.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\nConfig.chords = toNameMap([\n    { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n    { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n    { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n    { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n    { name: \"monophonic\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: true }\n]);\nConfig.maxChordSize = 9;\nConfig.operatorCount = 4;\nConfig.maxPitchOrOperatorCount = Math.max(_a.maxChordSize, _a.operatorCount + 2);\nConfig.algorithms = toNameMap([\n    { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n    { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n    { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n    { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n    { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n    { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n    { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n    { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n    { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n    { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n    { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n    { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n    { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n    { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n    { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n]);\nConfig.algorithms6Op = toNameMap([\n    { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n    { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n    { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n    { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n    { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n    { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n    { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n    { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n    { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n    { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n    { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n    { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n    { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n    { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n    { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n    { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n    { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n    { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n    { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n    { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n    { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n    { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n    { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n    { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n    { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n    { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n    { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n    { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n    { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n    { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n    { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n    { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n]);\nConfig.operatorCarrierInterval = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\nConfig.operatorAmplitudeMax = 15;\nConfig.operatorFrequencies = toNameMap([\n    { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n    { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n    { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n    { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n    { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n    { name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"128×\", mult: 128.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"256×\", mult: 250.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n]);\nConfig.envelopes = toNameMap([\n    { name: \"none\", type: 0, speed: 1.0 },\n    { name: \"note size\", type: 1, speed: 1.0 },\n    { name: \"pitch\", type: 2, speed: 1.0 },\n    { name: \"punch\", type: 4, speed: 1.0 },\n    { name: \"flare -1\", type: 5, speed: 128.0 },\n    { name: \"flare 1\", type: 5, speed: 32.0 },\n    { name: \"flare 2\", type: 5, speed: 8.0 },\n    { name: \"flare 3\", type: 5, speed: 2.0 },\n    { name: \"twang -1\", type: 6, speed: 128.0 },\n    { name: \"twang 1\", type: 6, speed: 32.0 },\n    { name: \"twang 2\", type: 6, speed: 8.0 },\n    { name: \"twang 3\", type: 6, speed: 2.0 },\n    { name: \"swell -1\", type: 7, speed: 128.0 },\n    { name: \"swell 1\", type: 7, speed: 32.0 },\n    { name: \"swell 2\", type: 7, speed: 8.0 },\n    { name: \"swell 3\", type: 7, speed: 2.0 },\n    { name: \"tremolo0\", type: 8, speed: 8.0 },\n    { name: \"tremolo1\", type: 8, speed: 4.0 },\n    { name: \"tremolo2\", type: 8, speed: 2.0 },\n    { name: \"tremolo3\", type: 8, speed: 1.0 },\n    { name: \"tremolo4\", type: 9, speed: 4.0 },\n    { name: \"tremolo5\", type: 9, speed: 2.0 },\n    { name: \"tremolo6\", type: 9, speed: 1.0 },\n    { name: \"decay -1\", type: 10, speed: 40.0 },\n    { name: \"decay 1\", type: 10, speed: 10.0 },\n    { name: \"decay 2\", type: 10, speed: 7.0 },\n    { name: \"decay 3\", type: 10, speed: 4.0 },\n    { name: \"wibble-1\", type: 11, speed: 128.0 },\n    { name: \"wibble 1\", type: 11, speed: 24.0 },\n    { name: \"wibble 2\", type: 11, speed: 12.0 },\n    { name: \"wibble 3\", type: 11, speed: 4.0 },\n    { name: \"linear-2\", type: 12, speed: 256.0 },\n    { name: \"linear-1\", type: 12, speed: 128.0 },\n    { name: \"linear 1\", type: 12, speed: 32.0 },\n    { name: \"linear 2\", type: 12, speed: 8.0 },\n    { name: \"linear 3\", type: 12, speed: 2.0 },\n    { name: \"rise -2\", type: 13, speed: 256.0 },\n    { name: \"rise -1\", type: 13, speed: 128.0 },\n    { name: \"rise 1\", type: 13, speed: 32.0 },\n    { name: \"rise 2\", type: 13, speed: 8.0 },\n    { name: \"rise 3\", type: 13, speed: 2.0 },\n    { name: \"flute 1\", type: 11, speed: 16.0 },\n    { name: \"flute 2\", type: 11, speed: 8.0 },\n    { name: \"flute 3\", type: 11, speed: 4.0 },\n    { name: \"tripolo1\", type: 8, speed: 9.0 },\n    { name: \"tripolo2\", type: 8, speed: 6.0 },\n    { name: \"tripolo3\", type: 8, speed: 3.0 },\n    { name: \"tripolo4\", type: 9, speed: 9.0 },\n    { name: \"tripolo5\", type: 9, speed: 6.0 },\n    { name: \"tripolo6\", type: 9, speed: 3.0 },\n    { name: \"pentolo1\", type: 8, speed: 10.0 },\n    { name: \"pentolo2\", type: 8, speed: 5.0 },\n    { name: \"pentolo3\", type: 8, speed: 2.5 },\n    { name: \"pentolo4\", type: 9, speed: 10.0 },\n    { name: \"pentolo5\", type: 9, speed: 5.0 },\n    { name: \"pentolo6\", type: 9, speed: 2.5 },\n    { name: \"flutter 1\", type: 8, speed: 14.0 },\n    { name: \"flutter 2\", type: 9, speed: 11.0 },\n    { name: \"water-y flutter\", type: 8, speed: 9.0 },\n    { name: \"blip 1\", type: 14, speed: 6.0 },\n    { name: \"blip 2\", type: 14, speed: 16.0 },\n    { name: \"blip 3\", type: 14, speed: 32.0 },\n    { name: \"fall 1\", type: 15, speed: 8.0 },\n    { name: \"fall 2\", type: 15, speed: 4.0 },\n    { name: \"fall 3\", type: 15, speed: 2.0 },\n]);\nConfig.newEnvelopes = toNameMap([\n    { name: \"none\", type: 0, speed: 1.0 },\n    { name: \"note size\", type: 1, speed: 1.0 },\n    { name: \"pitch\", type: 2, speed: 1.0 },\n    { name: \"random\", type: 3, speed: 4.0 },\n    { name: \"punch\", type: 4, speed: 1.0 },\n    { name: \"flare\", type: 5, speed: 32.0 },\n    { name: \"twang\", type: 6, speed: 32.0 },\n    { name: \"swell\", type: 7, speed: 32.0 },\n    { name: \"lfo\", type: 8, speed: 4.0 },\n    { name: \"decay\", type: 10, speed: 10.0 },\n    { name: \"wibble\", type: 11, speed: 24.0 },\n    { name: \"linear\", type: 12, speed: 32.0 },\n    { name: \"rise\", type: 13, speed: 32.0 },\n    { name: \"blip\", type: 14, speed: 6.0 },\n    { name: \"fall\", type: 15, speed: 2.0 },\n]);\nConfig.feedbacks = toNameMap([\n    { name: \"1⟲\", indices: [[1], [], [], []] },\n    { name: \"2⟲\", indices: [[], [2], [], []] },\n    { name: \"3⟲\", indices: [[], [], [3], []] },\n    { name: \"4⟲\", indices: [[], [], [], [4]] },\n    { name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\n    { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\n    { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\n    { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\n    { name: \"1→2\", indices: [[], [1], [], []] },\n    { name: \"1→3\", indices: [[], [], [1], []] },\n    { name: \"1→4\", indices: [[], [], [], [1]] },\n    { name: \"2→3\", indices: [[], [], [2], []] },\n    { name: \"2→4\", indices: [[], [], [], [2]] },\n    { name: \"3→4\", indices: [[], [], [], [3]] },\n    { name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\n    { name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\n    { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\n    { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\n    { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\n    { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\n    { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\n    { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\n    { name: \"ALL\", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },\n]);\nConfig.feedbacks6Op = toNameMap([\n    { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\n    { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\n    { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\n    { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\n    { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\n    { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\n    { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\n    { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\n    { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\n    { name: \"1→2\", indices: [[], [1], [], [], [], []] },\n    { name: \"1→3\", indices: [[], [], [1], [], [], []] },\n    { name: \"1→4\", indices: [[], [], [], [1], [], []] },\n    { name: \"1→5\", indices: [[], [], [], [], [1], []] },\n    { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\n    { name: \"2→3\", indices: [[], [], [2], [], [], []] },\n    { name: \"2→4\", indices: [[], [], [], [2], [], []] },\n    { name: \"3→4\", indices: [[], [], [], [3], [], []] },\n    { name: \"4→5\", indices: [[], [], [], [], [4], []] },\n    { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\n    { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\n    { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n    { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\n    { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\n    { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\n    { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\n    { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n    { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n]);\nConfig.chipNoiseLength = 1 << 15;\nConfig.spectrumNoiseLength = 1 << 15;\nConfig.spectrumBasePitch = 24;\nConfig.spectrumControlPoints = 30;\nConfig.spectrumControlPointsPerOctave = 7;\nConfig.spectrumControlPointBits = 3;\nConfig.spectrumMax = (1 << _a.spectrumControlPointBits) - 1;\nConfig.harmonicsControlPoints = 28;\nConfig.harmonicsRendered = 64;\nConfig.harmonicsRenderedForPickedString = 1 << 8;\nConfig.harmonicsControlPointBits = 3;\nConfig.harmonicsMax = (1 << _a.harmonicsControlPointBits) - 1;\nConfig.harmonicsWavelength = 1 << 11;\nConfig.pulseWidthRange = 50;\nConfig.pulseWidthStepPower = 0.5;\nConfig.supersawVoiceCount = 7;\nConfig.supersawDynamismMax = 6;\nConfig.supersawSpreadMax = 12;\nConfig.supersawShapeMax = 6;\nConfig.pitchChannelCountMin = 1;\nConfig.pitchChannelCountMax = 60;\nConfig.noiseChannelCountMin = 0;\nConfig.noiseChannelCountMax = 60;\nConfig.modChannelCountMin = 0;\nConfig.modChannelCountMax = 60;\nConfig.noiseInterval = 6;\nConfig.pitchesPerOctave = 12;\nConfig.drumCount = 12;\nConfig.pitchOctaves = 8;\nConfig.modCount = 6;\nConfig.maxPitch = _a.pitchOctaves * _a.pitchesPerOctave;\nConfig.maximumTonesPerChannel = _a.maxChordSize * 2;\nConfig.justIntonationSemitones = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * _a.pitchesPerOctave);\nConfig.pitchShiftRange = _a.justIntonationSemitones.length;\nConfig.pitchShiftCenter = _a.pitchShiftRange >> 1;\nConfig.detuneCenter = 200;\nConfig.detuneMax = 400;\nConfig.detuneMin = 0;\nConfig.songDetuneMin = 0;\nConfig.songDetuneMax = 500;\nConfig.unisonVoicesMin = 1;\nConfig.unisonVoicesMax = 9;\nConfig.unisonSpreadMin = -96;\nConfig.unisonSpreadMax = 96;\nConfig.unisonOffsetMin = -96;\nConfig.unisonOffsetMax = 96;\nConfig.unisonExpressionMin = -2;\nConfig.unisonExpressionMax = 2;\nConfig.unisonSignMin = -2;\nConfig.unisonSignMax = 2;\nConfig.sineWaveLength = 1 << 8;\nConfig.sineWaveMask = _a.sineWaveLength - 1;\nConfig.sineWave = _a.generateSineWave();\nConfig.perEnvelopeSpeedIndices = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.3333, 0.4, 0.5, 0.6, 0.6667, 0.7, 0.75, 0.8, 0.9, 1, 1.25, 1.3333, 1.5, 1.6667, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 32, 40, 64, 128, 256];\nConfig.perEnvelopeSpeedToIndices = {\n    0: 0,\n    0.01: 1,\n    0.02: 2,\n    0.03: 3,\n    0.04: 4,\n    0.05: 5,\n    0.06: 6,\n    0.07: 7,\n    0.08: 8,\n    0.09: 9,\n    0.1: 10,\n    0.2: 11,\n    0.25: 12,\n    0.3: 13,\n    0.3333: 14,\n    0.4: 15,\n    0.5: 16,\n    0.6: 17,\n    0.6667: 18,\n    0.7: 19,\n    0.75: 20,\n    0.8: 21,\n    0.9: 22,\n    1: 23,\n    1.25: 24,\n    1.3333: 25,\n    1.5: 26,\n    1.6667: 27,\n    1.75: 28,\n    2: 29,\n    2.25: 30,\n    2.5: 31,\n    2.75: 32,\n    3: 33,\n    3.5: 34,\n    4: 35,\n    4.5: 36,\n    5: 37,\n    5.5: 38,\n    6: 39,\n    6.5: 40,\n    7: 41,\n    7.5: 42,\n    8: 43,\n    8.5: 44,\n    9: 45,\n    9.5: 46,\n    10: 47,\n    11: 48,\n    12: 49,\n    13: 50,\n    14: 51,\n    15: 52,\n    16: 53,\n    17: 54,\n    18: 55,\n    19: 56,\n    20: 57,\n    24: 58,\n    32: 59,\n    40: 60,\n    64: 61,\n    128: 62,\n    256: 63,\n};\nConfig.perEnvelopeBoundMin = 0;\nConfig.perEnvelopeBoundMax = 2;\nConfig.randomEnvelopeSeedMax = 63;\nConfig.randomEnvelopeStepsMax = 32;\nConfig.pickedStringDispersionCenterFreq = 6000.0;\nConfig.pickedStringDispersionFreqScale = 0.3;\nConfig.pickedStringDispersionFreqMult = 4.0;\nConfig.pickedStringShelfHz = 4000.0;\nConfig.distortionRange = 8;\nConfig.stringSustainRange = 15;\nConfig.stringDecayRate = 0.12;\nConfig.enableAcousticSustain = false;\nConfig.sustainTypeNames = [\"bright\", \"acoustic\"];\nConfig.bitcrusherFreqRange = 14;\nConfig.bitcrusherOctaveStep = 0.5;\nConfig.bitcrusherQuantizationRange = 8;\nConfig.maxEnvelopeCount = 16;\nConfig.defaultAutomationRange = 13;\nConfig.instrumentAutomationTargets = toNameMap([\n    { name: \"none\", computeIndex: null, displayName: \"none\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },\n    { name: \"noteVolume\", computeIndex: 0, displayName: \"note volume\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },\n    { name: \"pulseWidth\", computeIndex: 2, displayName: \"pulse width\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6, 8] },\n    { name: \"stringSustain\", computeIndex: 3, displayName: \"sustain\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [7] },\n    { name: \"unison\", computeIndex: 4, displayName: \"unison\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [0, 5, 7, 9, 6, 2, 3, 4] },\n    { name: \"operatorFrequency\", computeIndex: 5, displayName: \"fm# freq\", interleave: true, isFilter: false, maxCount: _a.operatorCount + 2, effect: null, compatibleInstruments: [1, 11] },\n    { name: \"operatorAmplitude\", computeIndex: 11, displayName: \"fm# volume\", interleave: false, isFilter: false, maxCount: _a.operatorCount + 2, effect: null, compatibleInstruments: [1, 11] },\n    { name: \"feedbackAmplitude\", computeIndex: 17, displayName: \"fm feedback\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [1, 11] },\n    { name: \"pitchShift\", computeIndex: 18, displayName: \"pitch shift\", interleave: false, isFilter: false, maxCount: 1, effect: 7, compatibleInstruments: null },\n    { name: \"detune\", computeIndex: 19, displayName: \"detune\", interleave: false, isFilter: false, maxCount: 1, effect: 8, compatibleInstruments: null },\n    { name: \"vibratoDepth\", computeIndex: 20, displayName: \"vibrato depth\", interleave: false, isFilter: false, maxCount: 1, effect: 9, compatibleInstruments: null },\n    { name: \"noteFilterAllFreqs\", computeIndex: 1, displayName: \"n. filter freqs\", interleave: false, isFilter: true, maxCount: 1, effect: 5, compatibleInstruments: null },\n    { name: \"noteFilterFreq\", computeIndex: 21, displayName: \"n. filter # freq\", interleave: false, isFilter: true, maxCount: _a.filterMaxPoints, effect: 5, compatibleInstruments: null },\n    { name: \"decimalOffset\", computeIndex: 37, displayName: \"decimal offset\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6, 8] },\n    { name: \"supersawDynamism\", computeIndex: 38, displayName: \"dynamism\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },\n    { name: \"supersawSpread\", computeIndex: 39, displayName: \"spread\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },\n    { name: \"supersawShape\", computeIndex: 40, displayName: \"saw↔pulse\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },\n    { name: \"panning\", computeIndex: 41, displayName: \"panning\", interleave: false, isFilter: false, maxCount: 1, effect: 2, compatibleInstruments: null },\n    { name: \"distortion\", computeIndex: 42, displayName: \"distortion\", interleave: false, isFilter: false, maxCount: 1, effect: 3, compatibleInstruments: null },\n    { name: \"bitcrusherQuantization\", computeIndex: 43, displayName: \"bitcrush\", interleave: false, isFilter: false, maxCount: 1, effect: 4, compatibleInstruments: null },\n    { name: \"bitcrusherFrequency\", computeIndex: 44, displayName: \"freq crush\", interleave: false, isFilter: false, maxCount: 1, effect: 4, compatibleInstruments: null },\n    { name: \"chorus\", computeIndex: 45, displayName: \"chorus\", interleave: false, isFilter: false, maxCount: 1, effect: 1, compatibleInstruments: null },\n    { name: \"echoSustain\", computeIndex: 46, displayName: \"echo\", interleave: false, isFilter: false, maxCount: 1, effect: 6, compatibleInstruments: null },\n    { name: \"reverb\", computeIndex: 47, displayName: \"reverb\", interleave: false, isFilter: false, maxCount: 1, effect: 0, compatibleInstruments: null },\n    { name: \"arpeggioSpeed\", computeIndex: 48, displayName: \"arpeggio speed\", interleave: false, isFilter: false, maxCount: 1, effect: 11, compatibleInstruments: null },\n    { name: \"ringModulation\", computeIndex: 49, displayName: \"ring mod\", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },\n    { name: \"ringModulationHz\", computeIndex: 50, displayName: \"ring mod hz\", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },\n    { name: \"granular\", computeIndex: 51, displayName: \"granular\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"grainFreq\", computeIndex: 52, displayName: \"grain freq\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"grainSize\", computeIndex: 53, displayName: \"grain size\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"grainRange\", computeIndex: 54, displayName: \"grain range\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"echoDelay\", computeIndex: 55, displayName: \"echo delay\", interleave: false, isFilter: false, maxCount: 1, effect: 6, compatibleInstruments: null },\n]);\nConfig.operatorWaves = toNameMap([\n    { name: \"sine\", samples: _a.sineWave },\n    { name: \"triangle\", samples: _a.generateTriWave() },\n    { name: \"pulse width\", samples: _a.generateSquareWave(0.5) },\n    { name: \"sawtooth\", samples: _a.generateSawWave() },\n    { name: \"ramp\", samples: _a.generateSawWave(true) },\n    { name: \"trapezoid\", samples: _a.generateTrapezoidWave(2) },\n    { name: \"quasi-sine\", samples: _a.generateQuasiSineWave() },\n]);\nConfig.pwmOperatorWaves = toNameMap([\n    { name: \"1%\", samples: _a.generateSquareWave(0.01) },\n    { name: \"5%\", samples: _a.generateSquareWave(0.05) },\n    { name: \"12.5%\", samples: _a.generateSquareWave(0.125) },\n    { name: \"25%\", samples: _a.generateSquareWave(0.25) },\n    { name: \"33%\", samples: _a.generateSquareWave(1 / 3) },\n    { name: \"50%\", samples: _a.generateSquareWave(0.5) },\n    { name: \"66%\", samples: _a.generateSquareWave(2 / 3) },\n    { name: \"75%\", samples: _a.generateSquareWave(0.75) },\n    { name: \"87.5%\", samples: _a.generateSquareWave(0.875) },\n    { name: \"95%\", samples: _a.generateSquareWave(0.95) },\n    { name: \"99%\", samples: _a.generateSquareWave(0.99) },\n]);\nConfig.barEditorHeight = 10;\nConfig.modulators = toNameMap([\n    { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"No Mod Setting\", promptDesc: [\"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\"] },\n    { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Volume\", promptDesc: [\"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: _a.tempoMax - _a.tempoMin, newNoteVol: Math.ceil((_a.tempoMax - _a.tempoMin) / 2), forSong: true, convertRealFactor: _a.tempoMin, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Tempo\", promptDesc: [\"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\"] },\n    { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: _a.reverbRange * 2, newNoteVol: _a.reverbRange, forSong: true, convertRealFactor: -_a.reverbRange, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Reverb\", promptDesc: [\"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Go To Next Bar\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\"] },\n    { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: _a.volumeRange, newNoteVol: Math.ceil(_a.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-_a.volumeRange / 2.0), associatedEffect: 15, maxIndex: 0,\n        promptName: \"Note Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"pan\", pianoName: \"Pan\", maxRawVol: _a.panMax, newNoteVol: Math.ceil(_a.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: 2, maxIndex: 0,\n        promptName: \"Instrument Panning\", promptDesc: [\"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"] },\n    { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: _a.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 0, maxIndex: 0,\n        promptName: \"Instrument Reverb\", promptDesc: [\"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: _a.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 3, maxIndex: 0,\n        promptName: \"Instrument Distortion\", promptDesc: [\"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 1\", promptDesc: [\"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm feedback\", pianoName: \"FM Feedbck\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: _a.pulseWidthRange, newNoteVol: _a.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\n    { name: \"detune\", pianoName: \"Detune\", maxRawVol: _a.detuneMax - _a.detuneMin, newNoteVol: _a.detuneCenter, forSong: false, convertRealFactor: -_a.detuneCenter, associatedEffect: 8, maxIndex: 0,\n        promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\n    { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9, maxIndex: 0,\n        promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\n    { name: \"song detune\", pianoName: \"Detune\", maxRawVol: _a.songDetuneMax - _a.songDetuneMin, newNoteVol: Math.ceil((_a.songDetuneMax - _a.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\n    { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9, maxIndex: 0,\n        promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9, maxIndex: 0,\n        promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\n    { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 11, maxIndex: 0,\n        promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n            \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 2, maxIndex: 0,\n        promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 11, maxIndex: 0,\n        promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\n    { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5, maxIndex: 0,\n        promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: _a.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(_a.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4, maxIndex: 0,\n        promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: _a.bitcrusherFreqRange - 1, newNoteVol: Math.round(_a.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4, maxIndex: 0,\n        promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"echo\", pianoName: \"Echo\", maxRawVol: _a.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: _a.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\"]\n    },\n    { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: _a.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 1, maxIndex: 0,\n        promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: _a.filterSimpleCutRange - 1, newNoteVol: _a.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: _a.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: _a.filterSimpleCutRange - 1, newNoteVol: _a.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 5, maxIndex: 0,\n        promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: _a.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5, maxIndex: 0,\n        promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: _a.pitchShiftRange - 1, newNoteVol: _a.pitchShiftCenter, forSong: false, convertRealFactor: -_a.pitchShiftCenter, associatedEffect: 7, maxIndex: 0,\n        promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\n    { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: _a.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: _a.volumeRange, newNoteVol: Math.ceil(_a.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-_a.volumeRange / 2.0), associatedEffect: 15, maxIndex: 0,\n        promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"] },\n    { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n            \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: _a.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"spread\", pianoName: \"Spread\", maxRawVol: _a.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: _a.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\n    { name: \"individual envelope speed\", pianoName: \"IndvEnvSpd\", maxRawVol: 63, newNoteVol: 23, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Speed\", promptDesc: [\"This setting controls how fast the specified envelope of the instrument will play.\", \"At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:\",\n            \"[0-4]: x0, x0.01, x0.02, x0.03, x0.04,\", \"[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,\", \"[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,\", \"[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,\", \"[20-24]: x0.75, x0.8, x0.9, x1, x1.25,\", \"[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,\", \"[30-34]: x2.25, x2.5, x2.75, x3, x3.5,\", \"[35-39]: x4, x4.5, x5, x5.5, x6,\", \"[40-44]: x6.5, x7, x7.5, x8, x8.5,\", \"[45-49]: x9, x9.5, x10, x11, x12\", \"[50-54]: x13, x14, x15, x16, x17\", \"[55-59]: x18, x19, x20, x24, x32\", \"[60-63]: x40, x64, x128, x256\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"song eq\", pianoName: \"Song EQ\", maxRawVol: 10, newNoteVol: 0, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song EQ Filter\", promptDesc: [\"This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"reset envelope\", pianoName: \"ResetEnv\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Reset Envelope\", promptDesc: [\"This setting functions a lot like the reset arp modulator. Wherever a note is placed, the envelope of this instrument at the specified index will reset at the very start of that note. \", \"[$LO - $HI]\",] },\n    { name: \"ring modulation\", pianoName: \"Ring Mod\", maxRawVol: _a.ringModRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13, maxIndex: 0,\n        promptName: \"Ring Modulation\", promptDesc: [\"This setting controls the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"ring mod hertz\", pianoName: \"Ring Mod(Hz)\", maxRawVol: _a.ringModHzRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13, maxIndex: 0,\n        promptName: \"Ring Modulation (Hertz)\", promptDesc: [\"This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"granular\", pianoName: \"Granular\", maxRawVol: _a.granularRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Granular\", promptDesc: [\"This setting controls the granular effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain freq\", pianoName: \"Grain #\", maxRawVol: _a.grainAmountsMax, newNoteVol: 8, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Grain Count\", promptDesc: [\"This setting controls the density of grains for the granular effect on your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain size\", pianoName: \"Grain Size\", maxRawVol: _a.grainSizeMax / _a.grainSizeStep, newNoteVol: _a.grainSizeMin / _a.grainSizeStep, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Grain Size\", promptDesc: [\"This setting controls the grain size of the granular effect in your instrument.\", \"The number shown in the mod channel is multiplied by \" + _a.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain range\", pianoName: \"Grain Range\", maxRawVol: _a.grainRangeMax / _a.grainSizeStep, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Grain Range\", promptDesc: [\"This setting controls the range of values for your grain size of the granular effect in your instrument, from no variation to a lot\", \"The number shown in the mod channel is multiplied by \" + _a.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"individual envelope lower bound\", pianoName: \"IndvEnvLow\", maxRawVol: _a.perEnvelopeBoundMax * 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Lower Bound\", promptDesc: [\"This setting controls the envelope lower bound\", \"At $LO, your the envelope will output an upper envelope bound to 0, and at $HI your envelope will output an upper envelope bound to 2.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",] },\n    { name: \"individual envelope upper bound\", pianoName: \"IndvEnvUp\", maxRawVol: _a.perEnvelopeBoundMax * 10, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Upper Bound\", promptDesc: [\"This setting controls the envelope upper bound\", \"At $LO, your the envelope will output a 0 to lower envelope bound, and at $HI your envelope will output a 2 to lower envelope bound.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",] },\n]);\nfunction centerWave(wave) {\n    let sum = 0.0;\n    for (let i = 0; i < wave.length; i++)\n        sum += wave[i];\n    const average = sum / wave.length;\n    for (let i = 0; i < wave.length; i++)\n        wave[i] -= average;\n    performIntegral(wave);\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave) {\n    let magn = 0.0;\n    centerWave(wave);\n    for (let i = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg = magn / (wave.length - 1);\n    for (let i = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n    return new Float32Array(wave);\n}\nexport function performIntegral(wave) {\n    let cumulative = 0.0;\n    let newWave = new Float32Array(wave.length);\n    for (let i = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n    return newWave;\n}\nexport function performIntegralOld(wave) {\n    let cumulative = 0.0;\n    for (let i = 0; i < wave.length; i++) {\n        const temp = wave[i];\n        wave[i] = cumulative;\n        cumulative += temp;\n    }\n}\nexport function getPulseWidthRatio(pulseWidth) {\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\nexport function getDrumWave(index, inverseRealFourierTransform, scaleElementsByFactor) {\n    let wave = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n        if (index == 0) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 1 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 1) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.random() * 2.0 - 1.0;\n            }\n        }\n        else if (index == 2) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 2 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 3) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 4) {\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n            inverseRealFourierTransform(wave, Config.chipNoiseLength);\n            scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        }\n        else if (index == 5) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 6) {\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n            inverseRealFourierTransform(wave, Config.chipNoiseLength);\n            scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        }\n        else if (index == 7) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 15 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 8) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 9) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 10) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round(Math.random());\n            }\n        }\n        else if (index == 11) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round((drumBuffer & 1));\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 12) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var ultraboxnewchipnoiserand = Math.random();\n                wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n            }\n        }\n        else if (index == 13) {\n            var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                b0 = 0.99886 * b0 + white * 0.0555179;\n                b1 = 0.99332 * b1 + white * 0.0750759;\n                b2 = 0.96900 * b2 + white * 0.1538520;\n                b3 = 0.86650 * b3 + white * 0.3104856;\n                b4 = 0.55000 * b4 + white * 0.5329522;\n                b5 = -0.7616 * b5 - white * 0.0168980;\n                wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n                wave[i] *= 0.44;\n                b6 = white * 0.115926;\n            }\n        }\n        else if (index == 14) {\n            var lastOut = 0.0;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                wave[i] = (lastOut + (0.02 * white)) / 1.02;\n                lastOut = wave[i];\n                wave[i] *= 14;\n            }\n        }\n        else {\n            throw new Error(\"Unrecognized drum index: \" + index);\n        }\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n    return wave;\n}\nexport function drawNoiseSpectrum(wave, waveLength, lowOctave, highOctave, lowPower, highPower, overallSlope) {\n    const referenceOctave = 11;\n    const referenceIndex = 1 << referenceOctave;\n    const lowIndex = Math.pow(2, lowOctave) | 0;\n    const highIndex = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave = getDrumWave(0, null, null);\n    let combinedAmplitude = 0.0;\n    for (let i = lowIndex; i < highIndex; i++) {\n        let lerped = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n        combinedAmplitude += amplitude;\n        amplitude *= retroWave[i];\n        const radians = 0.61803398875 * i * i * Math.PI * 2.0;\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n    return combinedAmplitude;\n}\nexport function getArpeggioPitchIndex(pitchCount, useFastTwoNoteArp, arpeggio) {\n    let arpeggioPattern = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    }\n    else {\n        return arpeggio % pitchCount;\n    }\n}\nexport function toNameMap(array) {\n    const dictionary = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        value.index = i;\n        dictionary[value.name] = value;\n    }\n    const result = array;\n    result.dictionary = dictionary;\n    return result;\n}\nexport function effectsIncludeTransition(effects) {\n    return (effects & (1 << 10)) != 0;\n}\nexport function effectsIncludeChord(effects) {\n    return (effects & (1 << 11)) != 0;\n}\nexport function effectsIncludePitchShift(effects) {\n    return (effects & (1 << 7)) != 0;\n}\nexport function effectsIncludeDetune(effects) {\n    return (effects & (1 << 8)) != 0;\n}\nexport function effectsIncludeVibrato(effects) {\n    return (effects & (1 << 9)) != 0;\n}\nexport function effectsIncludeNoteFilter(effects) {\n    return (effects & (1 << 5)) != 0;\n}\nexport function effectsIncludeDistortion(effects) {\n    return (effects & (1 << 3)) != 0;\n}\nexport function effectsIncludeBitcrusher(effects) {\n    return (effects & (1 << 4)) != 0;\n}\nexport function effectsIncludePanning(effects) {\n    return (effects & (1 << 2)) != 0;\n}\nexport function effectsIncludeChorus(effects) {\n    return (effects & (1 << 1)) != 0;\n}\nexport function effectsIncludeEcho(effects) {\n    return (effects & (1 << 6)) != 0;\n}\nexport function effectsIncludeReverb(effects) {\n    return (effects & (1 << 0)) != 0;\n}\nexport function effectsIncludeRingModulation(effects) {\n    return (effects & (1 << 13)) != 0;\n}\nexport function effectsIncludeGranular(effects) {\n    return (effects & (1 << 14)) != 0;\n}\nexport function effectsIncludeNoteRange(effects) {\n    return (effects & (1 << 12)) != 0;\n}\nexport function calculateRingModHertz(sliderHz, sliderHzOffset = 0) {\n    if (sliderHz == 0)\n        return 0;\n    if (sliderHz > 0)\n        sliderHz -= 1 / Config.ringModHzRange;\n    if (sliderHz > 1 / Config.ringModHzRange)\n        sliderHz += 1 / Config.ringModHzRange;\n    return Math.floor(Config.ringModMinHz * Math.pow(Config.ringModMaxHz / Config.ringModMinHz, sliderHz));\n}\nexport function rawChipToIntegrated(raw) {\n    const newArray = new Array(raw.length);\n    const dictionary = {};\n    for (let i = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value = newArray[i];\n        value.index = i;\n        dictionary[value.name] = value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result = newArray;\n    result.dictionary = dictionary;\n    return result;\n}\n//# sourceMappingURL=SynthConfig.js.map","import { toNameMap, TypePresets } from \"../synth/SynthConfig\";\nexport const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\nexport function prettyNumber(value) {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\nexport class EditorConfig {\n    static valueToPreset(presetValue) {\n        var _a;\n        const categoryIndex = presetValue >> 6;\n        const presetIndex = presetValue & 0x3F;\n        return (_a = EditorConfig.presetCategories[categoryIndex]) === null || _a === void 0 ? void 0 : _a.presets[presetIndex];\n    }\n    static midiProgramToPresetValue(program) {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program)\n                    return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n    static nameToPresetValue(presetName) {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.name == presetName)\n                    return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n    static instrumentToPreset(instrument) {\n        var _a;\n        return (_a = EditorConfig.presetCategories[0].presets.dictionary) === null || _a === void 0 ? void 0 : _a[TypePresets === null || TypePresets === void 0 ? void 0 : TypePresets[instrument]];\n    }\n}\nEditorConfig.version = \"1.4.7\";\nEditorConfig.versionDisplayName = \"Slarmoo's Box \" + EditorConfig.version;\nEditorConfig.releaseNotesURL = \"./patch_notes.html\";\nEditorConfig.isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\nEditorConfig.ctrlSymbol = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\nEditorConfig.ctrlName = EditorConfig.isOnMac ? \"command\" : \"control\";\nEditorConfig.presetCategories = toNameMap([\n    {\n        name: \"Custom Instruments\", presets: toNameMap([\n            { name: TypePresets[0], customType: 0 },\n            { name: TypePresets[1], customType: 1 },\n            { name: TypePresets[2], customType: 2 },\n            { name: TypePresets[3], customType: 3 },\n            { name: TypePresets[4], customType: 4 },\n            { name: TypePresets[5], customType: 5 },\n            { name: TypePresets[6], customType: 6 },\n            { name: TypePresets[7], customType: 7 },\n            { name: TypePresets[8], customType: 8 },\n            { name: TypePresets[9], customType: 9 },\n            { name: TypePresets[11], customType: 11 },\n        ])\n    },\n    {\n        name: \"Retro Presets\", presets: toNameMap([\n            { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n            { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n            { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n            { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n            { name: \"supersaw lead\", midiProgram: 81, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n            { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n            { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\n            { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }], \"envelopes\": [] } },\n            { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n            { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n            { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n            { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n            { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n            { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n        ])\n    },\n    {\n        name: \"Keyboard Presets\", presets: toNameMap([\n            { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n            { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n            { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n            { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n            { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n            { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            { name: \"grand piano 3\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"stringSustainType\": \"acoustic\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }] } },\n        ])\n    },\n    {\n        name: \"Idiophone Presets\", presets: toNameMap([\n            { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n            { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 193, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n            { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n            { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n            { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 197, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 198, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n            { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n            { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n            { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n            { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 205, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Guitar Presets\", presets: toNameMap([\n            { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n            { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n            { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n        ])\n    },\n    {\n        name: \"Picked Bass Presets\", presets: toNameMap([\n            { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n            { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n            { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n            { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n            { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n            { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n            { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n        ])\n    },\n    {\n        name: \"Picked String Presets\", presets: toNameMap([\n            { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n            { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n            { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n            { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n            { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n        ])\n    },\n    {\n        name: \"Distortion Presets\", presets: toNameMap([\n            { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n            { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n            { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n            { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n            { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n        ])\n    },\n    {\n        name: \"Bellows Presets\", presets: toNameMap([\n            { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n            { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 515, \"effects\": [\"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n            { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n            { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n            { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n            { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n            { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n        ])\n    },\n    {\n        name: \"String Presets\", presets: toNameMap([\n            { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n            { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n            { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n            { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n            { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n            { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n            { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n            { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n            { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n            { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n            { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 588, \"effects\": [\"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"supersaw string\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.1768 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 6, \"pulseWidth\": 35.35534, \"dynamism\": 83, \"spread\": 8, \"shape\": 50, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"supersaw string 2\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"chorus\": 57, \"reverb\": 42, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 67, \"spread\": 58, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"pulseWidth\", \"envelope\": \"flare 2\" }] } },\n        ])\n    },\n    {\n        name: \"Vocal Presets\", presets: toNameMap([\n            { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n            { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 6, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 4 }], \"reverb\": 0, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n            { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n            { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n            { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n        ])\n    },\n    {\n        name: \"Brass Presets\", presets: toNameMap([\n            { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n            { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n            { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n            { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n            { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n            { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n        ])\n    },\n    {\n        name: \"Reed Presets\", presets: toNameMap([\n            { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n            { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n            { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n            { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n            { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n            { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 778, \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Flute Presets\", presets: toNameMap([\n            { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 832, \"eqSubFilters1\": [], \"effects\": [\"reverb\"], \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n            { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n            { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n            { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n            { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n            { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n            { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n            { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n        ])\n    },\n    {\n        name: \"Pad Presets\", presets: toNameMap([\n            { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n            { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n            { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n            { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n            { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n            { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n            { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n            { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            { name: \"supersaw pad\", midiProgram: 93, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }], \"effects\": [\"reverb\"], \"reverb\": 100, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n        ])\n    },\n    {\n        name: \"Drum Presets\", presets: toNameMap([\n            { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n            { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n            { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n            { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n            { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n            { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n            { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n            { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n            { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n            { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n            { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n        ])\n    },\n    {\n        name: \"Novelty Presets\", presets: toNameMap([\n            { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n            { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n            { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n            { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n            { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n            { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n            { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n            { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n            { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n            { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n            { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\n            { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n            { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n            { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n            { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n        ])\n    },\n    {\n        name: \"UltraBox Presets\", presets: toNameMap([\n            { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } },\n            { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } },\n            { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"dubstep bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }] } },\n            { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"effects\": [\"transition type\", \"note filter\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n            { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }] } },\n            { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chord type\"], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" }] } },\n            { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"echo\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }] } },\n            { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n            { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n            { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"wind\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 250.03, \"linearGain\": 11.3137 }], \"eqFilterType\": true, \"eqSimpleCut\": 0, \"eqSimplePeak\": 7, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [\"chord type\", \"reverb\"], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n            { name: \"vocal why\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0], \"unison\": \"octave\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Presets\", presets: toNameMap([\n            { name: \"radio fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"effects\": [\"detune\", \"vibrato\", \"bitcrusher\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 43, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12×\", \"amplitude\": 7, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"anguished underworld\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\", \"bitcrusher\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"reverb\": 0, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 6, \"algorithm\": \"1 2←4 3←(5 6)\", \"feedbackType\": \"1→5 2→6 3→4\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"0.25×\", \"amplitude\": 14, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.75×\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"decay -1\", \"index\": 5 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"wibble 3\" }], \"isDrum\": false } },\n            { name: \"faint sorrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"detune\", \"vibrato\", \"echo\", \"reverb\"], \"detuneCents\": 22, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"echoSustain\": 100, \"echoDelayBeats\": 0.667, \"reverb\": 87, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 48, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"bright sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"chord type\", \"note filter\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 1.333, \"reverb\": 61, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"wet sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"decay 3\", \"index\": 2 }], \"isDrum\": false } },\n            { name: \"scream fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"effects\": [\"detune\", \"note filter\", \"distortion\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"distortion\": 0, \"aliases\": false, \"reverb\": 87, \"fadeInSeconds\": 0.135, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 11, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"swell 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo4\" }], \"isDrum\": false } },\n            { name: \"anguished radio fm pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqSubFilters4\": [], \"effects\": [\"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"detuneCents\": -16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters4\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 43, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 58, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1→3\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"juicy kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n            { name: \"good vibes supersaw\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 37, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": true, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"detune\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"chorus\": 14, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"pulseWidth\": 26, \"decimalOffset\": 0, \"dynamism\": 33, \"spread\": 33, \"shape\": 17, \"envelopes\": [{ \"target\": \"supersawShape\", \"envelope\": \"pitch\" }, { \"target\": \"detune\", \"envelope\": \"tremolo2\" }], \"isDrum\": false } },\n            { name: \"ethereal\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 4, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 36, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 36, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"chorus\": 71, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [43, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"detune\", \"envelope\": \"tremolo3\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"walrus wuh\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 71, \"chorus\": 86, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"decay 3\" }], \"isDrum\": false } },\n            { name: \"saturnic\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"chorus\": 100, \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"reverb\": 45, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"glassy harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"detune\", \"note filter\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"chorus\": 14, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [100, 0, 43, 29, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 29, 14, 0, 14, 0, 0, 0, 0, 100, 0, 0, 14, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"plucked\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"echoSustain\": 100, \"echoDelayBeats\": 1.333, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [100, 86, 57, 0, 0, 57, 57, 57, 86, 57, 57, 43, 43, 43, 29, 29, 14, 14, 29, 14, 14, 14, 29, 100, 57, 43, 14, 14], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"spectrum wind\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"reverb\": 87, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"spectrum\": [29, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 14, 57, 14, 0, 57, 57, 0, 0, 57, 0, 71, 14, 29, 100, 71, 0, 100, 14, 86], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"hi-hat\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters3\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"white\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"jungle bass\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"effects\": [\"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"chorus\": 14, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1↔2 3↔4\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 12, \"pitchEnvelopeEnd2\": 28, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"swell 3\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"pitch\", \"index\": 0 }], \"isDrum\": false } },\n            { name: \"beach tide\", generalMidi: false, isNoise: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"chorus\": 14, \"reverb\": 32, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 72, \"harmonics\": [86, 86, 71, 57, 57, 43, 43, 43, 29, 29, 14, 14, 14, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n            { name: \"starlight\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"vibrato\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 29, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"distant monument\", generalMidi: false, isNoise: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"effects\": [\"transition type\", \"chord type\", \"detune\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 14, \"chorus\": 86, \"echoSustain\": 71, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"wave\": \"modbox pnryshk a (u5)\", \"unison\": \"detune\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"mercurial\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [], \"effects\": [\"distortion\", \"chorus\"], \"distortion\": 43, \"aliases\": false, \"chorus\": 43, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"Custom\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 8, \"customAlgorithm\": { \"mods\": [[3], [5], [4], [], [6], []], \"carrierCount\": 2 }, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"linear\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"distortion\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"air hiss\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"distortion\": 71, \"aliases\": false, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"spectrum\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 57, 71, 86, 100, 100, 100, 100, 86, 71, 71, 43], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"spectral phaser\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 10, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 14, \"chorus\": 100, \"echoSustain\": 86, \"echoDelayBeats\": 1, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [86, 0, 0, 0, 57, 0, 0, 71, 0, 0, 0, 86, 0, 0, 57, 0, 43, 0, 43, 0, 0, 43, 0, 29, 0, 29, 14, 14, 29, 14], \"unison\": \"piano\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.07, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.06, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.05, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.04, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.09, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.08, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 5 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 6 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.03, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 7 }, { \"target\": \"distortion\", \"envelope\": \"none\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 0.3 }], \"isDrum\": false } },\n            { name: \"shaker\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 43, \"chorus\": 43, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 96, \"wave\": \"deep\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 12, \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": true } },\n            { name: \"distant sorrow\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"detune\", \"vibrato\", \"note filter\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.2, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"echoSustain\": 100, \"echoDelayBeats\": 1, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [86, 71, 57, 43, 43, 29, 57, 0, 14, 0, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 57, 57, 57, 0, 57, 57, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"fall\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 2 }], \"isDrum\": false } },\n            { name: \"metallic kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 28, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"effects\": [], \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"128x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"chimes\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"effects\": [\"chord type\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 29, \"panDelay\": 0, \"chorus\": 29, \"echoSustain\": 86, \"echoDelayBeats\": 0.667, \"reverb\": 84, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [0, 100, 71, 71, 29, 0, 57, 86, 0, 0, 0, 0, 71, 29, 0, 0, 57, 0, 0, 86, 0, 0, 0, 100, 0, 100, 0, 57], \"unison\": \"none\", \"stringSustain\": 36, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 4.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"stringSustain\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"steps\": 14, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }], \"isDrum\": false } },\n            { name: \"supersaw bass\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"chorus\": 29, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 67, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"ascension\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqSubFilters1\": [], \"effects\": [\"granular\", \"chorus\", \"reverb\"], \"granular\": 7, \"grainSize\": 44, \"grainAmounts\": 9, \"grainRange\": 37, \"chorus\": 71, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"spectrum\": [43, 0, 0, 57, 0, 0, 14, 100, 29, 0, 0, 100, 29, 0, 100, 0, 57, 29, 86, 14, 14, 100, 14, 0, 14, 14, 0, 0, 43, 0], \"unison\": \"voiced\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 0.7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 6 }], \"isDrum\": false } },\n            { name: \"liminal\", generalMidi: false, isNoise: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"detune\", \"vibrato\", \"note filter\", \"granular\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"detuneCents\": 8, \"vibrato\": \"custom\", \"vibratoDepth\": 0.48, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"granular\": 6, \"grainSize\": 49, \"grainAmounts\": 10, \"grainRange\": 40, \"distortion\": 57, \"aliases\": false, \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"chorus\": 29, \"reverb\": 48, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"pulseWidth\": 30, \"decimalOffset\": 0, \"dynamism\": 17, \"spread\": 83, \"shape\": 67, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 17, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1.3333, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.2, \"perEnvelopeUpperBound\": 1, \"discrete\": true, \"steps\": 8, \"seed\": 2, \"waveform\": 2 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 18, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"granular\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Chip Presets\", presets: toNameMap([\n            { name: \"Slarmoo's Pulse\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"chord type\", \"detune\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 24, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n            { name: \"discovery square\", midiProgram: 80, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"bitcrusher\"], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 57, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"octave\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 2, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"VRC6 Sawtooth alt\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"distortion\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 0, \"aliases\": false, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -1, \"3\": -1, \"4\": -1, \"5\": -1, \"6\": -1, \"7\": -1, \"8\": -1, \"9\": -5, \"10\": -5, \"11\": -5, \"12\": -4, \"13\": -4, \"14\": -4, \"15\": -3, \"16\": -3, \"17\": -3, \"18\": -7, \"19\": -7, \"20\": -6, \"21\": -6, \"22\": -5, \"23\": -5, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -7, \"28\": -7, \"29\": -6, \"30\": -6, \"31\": -5, \"32\": -5, \"33\": -4, \"34\": -4, \"35\": -4, \"36\": -8, \"37\": -8, \"38\": -7, \"39\": -7, \"40\": -6, \"41\": -6, \"42\": -5, \"43\": -5, \"44\": -4, \"45\": -4, \"46\": 21, \"47\": 20, \"48\": 18, \"49\": 17, \"50\": 16, \"51\": 14, \"52\": 13, \"53\": 12, \"54\": 11, \"55\": 7, \"56\": 6, \"57\": 6, \"58\": 5, \"59\": 5, \"60\": 5, \"61\": 4, \"62\": 4, \"63\": 4 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"pulse arps\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 7, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"effects\": [\"transition type\", \"chord type\", \"detune\", \"chorus\", \"echo\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 64, \"chorus\": 43, \"echoSustain\": 71, \"echoDelayBeats\": 0.333, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"pulseWidth\", \"envelope\": \"pitch\", \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 24, \"pitchEnvelopeEnd\": 83 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"waveform\": 0, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"chorus\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Instrumental Presets\", presets: toNameMap([\n            { name: \"rusty flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"effects\": [\"transition type\", \"detune\", \"distortion\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": -7, \"distortion\": 14, \"aliases\": false, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"bitcrushed piano\", midiProgram: 4, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 0, \"distortion\": 29, \"aliases\": true, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 43, \"panDelay\": 0, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"triangle\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": true, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0.6, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"detuned piano\", midiProgram: 3, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"effects\": [\"transition type\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 44, \"vibrato\": \"custom\", \"vibratoDepth\": 0.04, \"vibratoDelay\": 13, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 14, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [86, 86, 71, 71, 57, 57, 43, 29, 14, 29, 29, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 14, 14, 0, 0, 0], \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.26, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 49, \"waveform\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1.6667, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"unison\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 20, \"waveform\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n            { name: \"pan flute 2\", midiProgram: 75, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"reverb\": 16, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -6, \"spectrum\": [100, 29, 14, 14, 57, 0, 0, 71, 0, 86, 57, 43, 57, 71, 14, 29, 14, 14, 14, 100, 71, 14, 14, 14, 14, 86, 43, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"trumpet 2\", midiProgram: 56, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3049.17, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"detune\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"detuneCents\": -64, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 17, \"vibratoSpeed\": 12, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"distortion\": 29, \"aliases\": false, \"chorus\": 14, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"0.75×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 2 }, { \"frequency\": \"1×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"harp 2\", midiProgram: 46, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqSubFilters1\": [], \"effects\": [\"detune\", \"note filter\", \"echo\", \"reverb\"], \"detuneCents\": -23, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"echoSustain\": 29, \"echoDelayBeats\": 1.083, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←4 2←5 3←6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"detune\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"electric guitar 1\", midiProgram: 30, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"distortion\": 100, \"aliases\": false, \"panDelay\": 0, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 0, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.25×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"vibratoDepth\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 9, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"electric guitar 2\", midiProgram: 30, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"effects\": [\"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 22, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": true, \"perEnvelopeSpeed\": 2.25, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Novelty Presets\", presets: toNameMap([\n            { name: \"bitcrushed artifacts\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"distortion\", \"bitcrusher\", \"echo\"], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 86, \"echoSustain\": 0, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 100, 43, 0, 0, 14, 86, 0, 14, 0, 0, 0, 0, 0, 86], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"whistle 2\", midiProgram: 78, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2110.37, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 11, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"distortion\": 43, \"aliases\": false, \"echoSustain\": 57, \"echoDelayBeats\": 1.083, \"reverb\": 87, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -1, \"harmonics\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 86, 57, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 57, 29, 0, 29, 100, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"decay 1\" }], \"isDrum\": false } },\n            { name: \"frog wuh\", generalMidi: false, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqSubFilters1\": [], \"effects\": [\"pitch shift\", \"note filter\"], \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"spectrum\": [100, 29, 14, 29, 0, 14, 0, 71, 0, 43, 14, 71, 0, 0, 71, 14, 100, 0, 71, 0, 43, 86, 43, 0, 43, 0, 0, 43, 29, 29], \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"stationary harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"chord type\", \"vibrato\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 0, 57, 29, 14, 57, 29, 29, 14, 14, 29, 43, 14, 14, 14, 0, 14, 29, 29, 14, 0, 0, 14, 0, 0, 29, 14, 14], \"unison\": \"stationary\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"dead souls\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": true, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"distortion\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"detuneCents\": -200, \"distortion\": 100, \"aliases\": false, \"chorus\": 14, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [100, 71, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 14, 14, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 24, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.2, \"steps\": 16, \"seed\": 37, \"waveform\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n            { name: \"flutter\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"effects\": [\"transition type\", \"chorus\", \"reverb\", \"ring mod\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"ringMod\": 100, \"ringModHz\": 100, \"ringModWaveformIndex\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"ringModulationHz\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.9 }, { \"target\": \"noteVolume\", \"envelope\": \"blip\", \"inverse\": false, \"perEnvelopeSpeed\": 0.25, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"vinyl\", generalMidi: false, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"effects\": [\"transition type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"chorus\": 29, \"echoSustain\": 14, \"echoDelayBeats\": 0.083, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"wave\": \"crackling\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n        ])\n    }\n]);\n//# sourceMappingURL=EditorConfig.js.map","export function scaleElementsByFactor(array, factor) {\n    for (let i = 0; i < array.length; i++) {\n        array[i] *= factor;\n    }\n}\nfunction isPowerOf2(n) {\n    return !!n && !(n & (n - 1));\n}\nfunction countBits(n) {\n    if (!isPowerOf2(n))\n        throw new Error(\"FFT array length must be a power of 2.\");\n    return Math.round(Math.log(n) / Math.log(2));\n}\nfunction reverseIndexBits(array, fullArrayLength) {\n    const bitCount = countBits(fullArrayLength);\n    if (bitCount > 16)\n        throw new Error(\"FFT array length must not be greater than 2^16.\");\n    const finalShift = 16 - bitCount;\n    for (let i = 0; i < fullArrayLength; i++) {\n        let j;\n        j = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n        j = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n        j = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n        j = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\n        if (j > i) {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n}\nexport function discreteFourierTransform(realArray, imagArray) {\n    const fullArrayLength = realArray.length;\n    if (fullArrayLength != imagArray.length)\n        throw new Error(\"FFT arrays must be the same length.\");\n    const realOut = [];\n    const imagOut = [];\n    for (let i = 0; i < fullArrayLength; i++) {\n        realOut[i] = 0.0;\n        imagOut[i] = 0.0;\n        for (let j = 0; j < fullArrayLength; j++) {\n            const radians = -6.2831853 * j * i / fullArrayLength;\n            const c = Math.cos(radians);\n            const s = Math.sin(radians);\n            realOut[i] += realArray[j] * c - imagArray[j] * s;\n            imagOut[i] += realArray[j] * s + imagArray[j] * c;\n        }\n    }\n    return [realOut, imagOut];\n}\nexport function fastFourierTransform(realArray, imagArray) {\n    const fullArrayLength = realArray.length;\n    if (!isPowerOf2(fullArrayLength))\n        throw new Error(\"FFT array length must be a power of 2.\");\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    if (fullArrayLength != imagArray.length)\n        throw new Error(\"FFT arrays must be the same length.\");\n    reverseIndexBits(realArray, fullArrayLength);\n    reverseIndexBits(imagArray, fullArrayLength);\n    for (let startIndex = 0; startIndex < fullArrayLength; startIndex += 4) {\n        const startIndex1 = startIndex + 1;\n        const startIndex2 = startIndex + 2;\n        const startIndex3 = startIndex + 3;\n        const real0 = realArray[startIndex];\n        const real1 = realArray[startIndex1];\n        const real2 = realArray[startIndex2];\n        const real3 = realArray[startIndex3];\n        const imag0 = imagArray[startIndex];\n        const imag1 = imagArray[startIndex1];\n        const imag2 = imagArray[startIndex2];\n        const imag3 = imagArray[startIndex3];\n        const realTemp0 = real0 + real1;\n        const realTemp1 = real0 - real1;\n        const realTemp2 = real2 + real3;\n        const realTemp3 = real2 - real3;\n        const imagTemp0 = imag0 + imag1;\n        const imagTemp1 = imag0 - imag1;\n        const imagTemp2 = imag2 + imag3;\n        const imagTemp3 = imag2 - imag3;\n        realArray[startIndex] = realTemp0 + realTemp2;\n        realArray[startIndex1] = realTemp1 + imagTemp3;\n        realArray[startIndex2] = realTemp0 - realTemp2;\n        realArray[startIndex3] = realTemp1 - imagTemp3;\n        imagArray[startIndex] = imagTemp0 + imagTemp2;\n        imagArray[startIndex1] = imagTemp1 - realTemp3;\n        imagArray[startIndex2] = imagTemp0 - imagTemp2;\n        imagArray[startIndex3] = imagTemp1 + realTemp3;\n    }\n    for (let stride = 8; stride <= fullArrayLength; stride += stride) {\n        const halfLength = stride >>> 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            let c = 1.0;\n            let s = 0.0;\n            let cPrev = cosIncrement;\n            let sPrev = sinIncrement;\n            const secondHalf = startIndex + halfLength;\n            for (let i = startIndex; i < secondHalf; i++) {\n                const j = i + halfLength;\n                const real0 = realArray[i];\n                const imag0 = imagArray[i];\n                const real1 = realArray[j] * c - imagArray[j] * s;\n                const imag1 = realArray[j] * s + imagArray[j] * c;\n                realArray[i] = real0 + real1;\n                imagArray[i] = imag0 + imag1;\n                realArray[j] = real0 - real1;\n                imagArray[j] = imag0 - imag1;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n}\nexport function forwardRealFourierTransform(array) {\n    const fullArrayLength = array.length;\n    const totalPasses = countBits(fullArrayLength);\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    reverseIndexBits(array, fullArrayLength);\n    for (let index = 0; index < fullArrayLength; index += 4) {\n        const index1 = index + 1;\n        const index2 = index + 2;\n        const index3 = index + 3;\n        const real0 = array[index];\n        const real1 = array[index1];\n        const real2 = array[index2];\n        const real3 = array[index3];\n        const tempA = real0 + real1;\n        const tempB = real2 + real3;\n        array[index] = tempA + tempB;\n        array[index1] = real0 - real1;\n        array[index2] = tempA - tempB;\n        array[index3] = real2 - real3;\n    }\n    const sqrt2over2 = Math.sqrt(2.0) / 2.0;\n    for (let index = 0; index < fullArrayLength; index += 8) {\n        const index1 = index + 1;\n        const index3 = index + 3;\n        const index4 = index + 4;\n        const index5 = index + 5;\n        const index7 = index + 7;\n        const real0 = array[index];\n        const real1 = array[index1];\n        const imag3 = array[index3];\n        const real4 = array[index4];\n        const real5 = array[index5];\n        const imag7 = array[index7];\n        const tempA = (real5 - imag7) * sqrt2over2;\n        const tempB = (real5 + imag7) * sqrt2over2;\n        array[index] = real0 + real4;\n        array[index1] = real1 + tempA;\n        array[index3] = real1 - tempA;\n        array[index4] = real0 - real4;\n        array[index5] = tempB - imag3;\n        array[index7] = tempB + imag3;\n    }\n    for (let pass = 3; pass < totalPasses; pass++) {\n        const subStride = 1 << pass;\n        const midSubStride = subStride >> 1;\n        const stride = subStride << 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            const startIndexA = startIndex;\n            const startIndexB = startIndexA + subStride;\n            const stopIndex = startIndexB + subStride;\n            const realStartA = array[startIndexA];\n            const realStartB = array[startIndexB];\n            array[startIndexA] = realStartA + realStartB;\n            array[startIndexB] = realStartA - realStartB;\n            let c = cosIncrement;\n            let s = -sinIncrement;\n            let cPrev = 1.0;\n            let sPrev = 0.0;\n            for (let index = 1; index < midSubStride; index++) {\n                const indexA0 = startIndexA + index;\n                const indexA1 = startIndexB - index;\n                const indexB0 = startIndexB + index;\n                const indexB1 = stopIndex - index;\n                const real0 = array[indexA0];\n                const imag0 = array[indexA1];\n                const real1 = array[indexB0];\n                const imag1 = array[indexB1];\n                const tempA = real1 * c + imag1 * s;\n                const tempB = real1 * s - imag1 * c;\n                array[indexA0] = real0 + tempA;\n                array[indexA1] = real0 - tempA;\n                array[indexB0] = -imag0 - tempB;\n                array[indexB1] = imag0 - tempB;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n}\nexport function inverseRealFourierTransform(array, fullArrayLength) {\n    const totalPasses = countBits(fullArrayLength);\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    for (let pass = totalPasses - 1; pass >= 2; pass--) {\n        const subStride = 1 << pass;\n        const midSubStride = subStride >> 1;\n        const stride = subStride << 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            const startIndexA = startIndex;\n            const midIndexA = startIndexA + midSubStride;\n            const startIndexB = startIndexA + subStride;\n            const midIndexB = startIndexB + midSubStride;\n            const stopIndex = startIndexB + subStride;\n            const realStartA = array[startIndexA];\n            const imagStartB = array[startIndexB];\n            array[startIndexA] = realStartA + imagStartB;\n            array[midIndexA] *= 2;\n            array[startIndexB] = realStartA - imagStartB;\n            array[midIndexB] *= 2;\n            let c = cosIncrement;\n            let s = -sinIncrement;\n            let cPrev = 1.0;\n            let sPrev = 0.0;\n            for (let index = 1; index < midSubStride; index++) {\n                const indexA0 = startIndexA + index;\n                const indexA1 = startIndexB - index;\n                const indexB0 = startIndexB + index;\n                const indexB1 = stopIndex - index;\n                const real0 = array[indexA0];\n                const real1 = array[indexA1];\n                const imag0 = array[indexB0];\n                const imag1 = array[indexB1];\n                const tempA = real0 - real1;\n                const tempB = imag0 + imag1;\n                array[indexA0] = real0 + real1;\n                array[indexA1] = imag1 - imag0;\n                array[indexB0] = tempA * c - tempB * s;\n                array[indexB1] = tempB * c + tempA * s;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n    for (let index = 0; index < fullArrayLength; index += 4) {\n        const index1 = index + 1;\n        const index2 = index + 2;\n        const index3 = index + 3;\n        const real0 = array[index];\n        const real1 = array[index1] * 2;\n        const imag2 = array[index2];\n        const imag3 = array[index3] * 2;\n        const tempA = real0 + imag2;\n        const tempB = real0 - imag2;\n        array[index] = tempA + real1;\n        array[index1] = tempA - real1;\n        array[index2] = tempB + imag3;\n        array[index3] = tempB - imag3;\n    }\n    reverseIndexBits(array, fullArrayLength);\n}\n//# sourceMappingURL=FFT.js.map","export class Deque {\n    constructor() {\n        this._capacity = 1;\n        this._buffer = [undefined];\n        this._mask = 0;\n        this._offset = 0;\n        this._count = 0;\n    }\n    pushFront(element) {\n        if (this._count >= this._capacity)\n            this._expandCapacity();\n        this._offset = (this._offset - 1) & this._mask;\n        this._buffer[this._offset] = element;\n        this._count++;\n    }\n    pushBack(element) {\n        if (this._count >= this._capacity)\n            this._expandCapacity();\n        this._buffer[(this._offset + this._count) & this._mask] = element;\n        this._count++;\n    }\n    popFront() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        const element = this._buffer[this._offset];\n        this._buffer[this._offset] = undefined;\n        this._offset = (this._offset + 1) & this._mask;\n        this._count--;\n        return element;\n    }\n    popBack() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        this._count--;\n        const index = (this._offset + this._count) & this._mask;\n        const element = this._buffer[index];\n        this._buffer[index] = undefined;\n        return element;\n    }\n    peakFront() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        return this._buffer[this._offset];\n    }\n    peakBack() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        return this._buffer[(this._offset + this._count - 1) & this._mask];\n    }\n    count() {\n        return this._count;\n    }\n    set(index, element) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        this._buffer[(this._offset + index) & this._mask] = element;\n    }\n    get(index) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        return this._buffer[(this._offset + index) & this._mask];\n    }\n    remove(index) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        if (index <= (this._count >> 1)) {\n            while (index > 0) {\n                this.set(index, this.get(index - 1));\n                index--;\n            }\n            this.popFront();\n        }\n        else {\n            index++;\n            while (index < this._count) {\n                this.set(index - 1, this.get(index));\n                index++;\n            }\n            this.popBack();\n        }\n    }\n    _expandCapacity() {\n        if (this._capacity >= 0x40000000)\n            throw new Error(\"Capacity too big.\");\n        this._capacity = this._capacity << 1;\n        const oldBuffer = this._buffer;\n        const newBuffer = new Array(this._capacity);\n        const size = this._count | 0;\n        const offset = this._offset | 0;\n        for (let i = 0; i < size; i++) {\n            newBuffer[i] = oldBuffer[(offset + i) & this._mask];\n        }\n        for (let i = size; i < this._capacity; i++) {\n            newBuffer[i] = undefined;\n        }\n        this._offset = 0;\n        this._buffer = newBuffer;\n        this._mask = this._capacity - 1;\n    }\n}\n//# sourceMappingURL=Deque.js.map","class EventManager {\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {};\n        this.activeEvents = [];\n        this.listeners = {};\n    }\n    raise(eventType, eventData, extraEventData) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData, extraEventData);\n        }\n        this.activeEvents.pop();\n    }\n    listen(eventType, callback) {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = [];\n        }\n        this.listeners[eventType].push(callback);\n    }\n    unlisten(eventType, callback) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    unlistenAll(eventType) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType] = [];\n    }\n}\nexport const events = new EventManager();\n//# sourceMappingURL=Events.js.map","export class FilterCoefficients {\n    constructor() {\n        this.a = [1.0];\n        this.b = [1.0];\n        this.order = 0;\n    }\n    linearGain0thOrder(linearGain) {\n        this.b[0] = linearGain;\n        this.order = 0;\n    }\n    lowPass1stOrderButterworth(cornerRadiansPerSample) {\n        const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n        const a0 = 1.0 + g;\n        this.a[1] = (1.0 - g) / a0;\n        this.b[1] = this.b[0] = 1 / a0;\n        this.order = 1;\n    }\n    lowPass1stOrderSimplified(cornerRadiansPerSample) {\n        const g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n        this.a[1] = g - 1.0;\n        this.b[0] = g;\n        this.b[1] = 0.0;\n        this.order = 1;\n    }\n    highPass1stOrderButterworth(cornerRadiansPerSample) {\n        const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n        const a0 = 1.0 + g;\n        this.a[1] = (1.0 - g) / a0;\n        this.b[0] = g / a0;\n        this.b[1] = -g / a0;\n        this.order = 1;\n    }\n    highShelf1stOrder(cornerRadiansPerSample, shelfLinearGain) {\n        const tan = Math.tan(cornerRadiansPerSample * 0.5);\n        const sqrtGain = Math.sqrt(shelfLinearGain);\n        const g = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n        const a0 = 1.0;\n        this.a[1] = g / a0;\n        this.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n        this.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n        this.order = 1;\n    }\n    allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample) {\n        const g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n        this.a[1] = g;\n        this.b[0] = g;\n        this.b[1] = 1.0;\n        this.order = 1;\n    }\n    allPass1stOrderFractionalDelay(delay) {\n        const g = (1.0 - delay) / (1.0 + delay);\n        this.a[1] = g;\n        this.b[0] = g;\n        this.b[1] = 1.0;\n        this.order = 1;\n    }\n    lowPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {\n        const alpha = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n        const cos = Math.cos(cornerRadiansPerSample);\n        const a0 = 1.0 + alpha;\n        this.a[1] = -2.0 * cos / a0;\n        this.a[2] = (1 - alpha) / a0;\n        this.b[2] = this.b[0] = (1 - cos) / (2.0 * a0);\n        this.b[1] = (1 - cos) / a0;\n        this.order = 2;\n    }\n    lowPass2ndOrderSimplified(cornerRadiansPerSample, peakLinearGain) {\n        const g = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n        const filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);\n        const feedback = filterResonance + filterResonance / (1.0 - g);\n        this.a[1] = 2.0 * g + (g - 1.0) * g * feedback - 2.0;\n        this.a[2] = (g - 1.0) * (g - g * feedback - 1.0);\n        this.b[0] = g * g;\n        this.b[1] = 0;\n        this.b[2] = 0;\n        this.order = 2;\n    }\n    highPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {\n        const alpha = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n        const cos = Math.cos(cornerRadiansPerSample);\n        const a0 = 1.0 + alpha;\n        this.a[1] = -2.0 * cos / a0;\n        this.a[2] = (1.0 - alpha) / a0;\n        this.b[2] = this.b[0] = (1.0 + cos) / (2.0 * a0);\n        this.b[1] = -(1.0 + cos) / a0;\n        this.order = 2;\n    }\n    highShelf2ndOrder(cornerRadiansPerSample, shelfLinearGain, slope) {\n        const A = Math.sqrt(shelfLinearGain);\n        const c = Math.cos(cornerRadiansPerSample);\n        const Aplus = A + 1.0;\n        const Aminus = A - 1.0;\n        const alpha = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n        const sqrtA2Alpha = 2.0 * Math.sqrt(A) * alpha;\n        const a0 = (Aplus - Aminus * c + sqrtA2Alpha);\n        this.a[1] = 2 * (Aminus - Aplus * c) / a0;\n        this.a[2] = (Aplus - Aminus * c - sqrtA2Alpha) / a0;\n        this.b[0] = A * (Aplus + Aminus * c + sqrtA2Alpha) / a0;\n        this.b[1] = -2 * A * (Aminus + Aplus * c) / a0;\n        this.b[2] = A * (Aplus + Aminus * c - sqrtA2Alpha) / a0;\n        this.order = 2;\n    }\n    peak2ndOrder(cornerRadiansPerSample, peakLinearGain, bandWidthScale) {\n        const sqrtGain = Math.sqrt(peakLinearGain);\n        const bandWidth = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1 / sqrtGain);\n        const alpha = Math.tan(bandWidth * 0.5);\n        const a0 = 1.0 + alpha / sqrtGain;\n        this.b[0] = (1.0 + alpha * sqrtGain) / a0;\n        this.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n        this.b[2] = (1.0 - alpha * sqrtGain) / a0;\n        this.a[2] = (1.0 - alpha / sqrtGain) / a0;\n        this.order = 2;\n    }\n}\nexport class FrequencyResponse {\n    constructor() {\n        this.real = 0.0;\n        this.imag = 0.0;\n        this.denom = 1.0;\n    }\n    analyze(filter, radiansPerSample) {\n        this.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n    }\n    analyzeComplex(filter, real, imag) {\n        const a = filter.a;\n        const b = filter.b;\n        const realZ1 = real;\n        const imagZ1 = -imag;\n        let realNum = b[0] + b[1] * realZ1;\n        let imagNum = b[1] * imagZ1;\n        let realDenom = 1.0 + a[1] * realZ1;\n        let imagDenom = a[1] * imagZ1;\n        let realZ = realZ1;\n        let imagZ = imagZ1;\n        for (let i = 2; i <= filter.order; i++) {\n            const realTemp = realZ * realZ1 - imagZ * imagZ1;\n            const imagTemp = realZ * imagZ1 + imagZ * realZ1;\n            realZ = realTemp;\n            imagZ = imagTemp;\n            realNum += b[i] * realZ;\n            imagNum += b[i] * imagZ;\n            realDenom += a[i] * realZ;\n            imagDenom += a[i] * imagZ;\n        }\n        this.denom = realDenom * realDenom + imagDenom * imagDenom;\n        this.real = realNum * realDenom + imagNum * imagDenom;\n        this.imag = imagNum * realDenom - realNum * imagDenom;\n    }\n    magnitude() {\n        return Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n    }\n    angle() {\n        return Math.atan2(this.imag, this.real);\n    }\n}\nexport class DynamicBiquadFilter {\n    constructor() {\n        this.a1 = 0.0;\n        this.a2 = 0.0;\n        this.b0 = 1.0;\n        this.b1 = 0.0;\n        this.b2 = 0.0;\n        this.a1Delta = 0.0;\n        this.a2Delta = 0.0;\n        this.b0Delta = 0.0;\n        this.b1Delta = 0.0;\n        this.b2Delta = 0.0;\n        this.output1 = 0.0;\n        this.output2 = 0.0;\n        this.useMultiplicativeInputCoefficients = false;\n    }\n    resetOutput() {\n        this.output1 = 0.0;\n        this.output2 = 0.0;\n    }\n    loadCoefficientsWithGradient(start, end, deltaRate, useMultiplicativeInputCoefficients) {\n        if (start.order != 2 || end.order != 2)\n            throw new Error();\n        this.a1 = start.a[1];\n        this.a2 = start.a[2];\n        this.b0 = start.b[0];\n        this.b1 = start.b[1];\n        this.b2 = start.b[2];\n        this.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n        this.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n        if (useMultiplicativeInputCoefficients) {\n            this.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n            this.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n            this.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n        }\n        else {\n            this.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n            this.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n            this.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n        }\n        this.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n    }\n}\nexport function warpNyquistToInfinity(radians) {\n    return 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians) {\n    return 2.0 * Math.atan(radians * 0.5);\n}\n//# sourceMappingURL=filtering.js.map","const PRIME32_1 = 2654435761;\nconst PRIME32_2 = 2246822519;\nconst PRIME32_3 = 3266489917;\nconst PRIME32_4 = 668265263;\nconst PRIME32_5 = 374761393;\nlet encoder;\n/**\n *\n * @param input - byte array or string\n * @param seed - optional seed (32-bit unsigned);\n */\nexport function xxHash32(input, seed = 0) {\n    const buffer = typeof input === 'string' ? (encoder ??= new TextEncoder()).encode(input) : input;\n    const b = buffer;\n    /*\n        Step 1. Initialize internal accumulators\n        Each accumulator gets an initial value based on optional seed input. Since the seed is optional, it can be 0.\n\n        ```\n            u32 acc1 = seed + PRIME32_1 + PRIME32_2;\n            u32 acc2 = seed + PRIME32_2;\n            u32 acc3 = seed + 0;\n            u32 acc4 = seed - PRIME32_1;\n        ```\n        Special case : input is less than 16 bytes\n        When input is too small (< 16 bytes), the algorithm will not process any stripe. Consequently, it will not\n        make use of parallel accumulators.\n\n        In which case, a simplified initialization is performed, using a single accumulator :\n\n        u32 acc  = seed + PRIME32_5;\n        The algorithm then proceeds directly to step 4.\n    */\n    let acc = (seed + PRIME32_5) & 0xffffffff;\n    let offset = 0;\n    if (b.length >= 16) {\n        const accN = [\n            (seed + PRIME32_1 + PRIME32_2) & 0xffffffff,\n            (seed + PRIME32_2) & 0xffffffff,\n            (seed + 0) & 0xffffffff,\n            (seed - PRIME32_1) & 0xffffffff,\n        ];\n        /*\n            Step 2. Process stripes\n            A stripe is a contiguous segment of 16 bytes. It is evenly divided into 4 lanes, of 4 bytes each.\n            The first lane is used to update accumulator 1, the second lane is used to update accumulator 2, and so on.\n\n            Each lane read its associated 32-bit value using little-endian convention.\n\n            For each {lane, accumulator}, the update process is called a round, and applies the following formula :\n\n            ```\n            accN = accN + (laneN * PRIME32_2);\n            accN = accN <<< 13;\n            accN = accN * PRIME32_1;\n            ```\n\n            This shuffles the bits so that any bit from input lane impacts several bits in output accumulator.\n            All operations are performed modulo 2^32.\n\n            Input is consumed one full stripe at a time. Step 2 is looped as many times as necessary to consume\n            the whole input, except the last remaining bytes which cannot form a stripe (< 16 bytes). When that\n            happens, move to step 3.\n        */\n        const b = buffer;\n        const limit = b.length - 16;\n        let lane = 0;\n        for (offset = 0; (offset & 0xfffffff0) <= limit; offset += 4) {\n            const i = offset;\n            const laneN0 = b[i + 0] + (b[i + 1] << 8);\n            const laneN1 = b[i + 2] + (b[i + 3] << 8);\n            const laneNP = laneN0 * PRIME32_2 + ((laneN1 * PRIME32_2) << 16);\n            let acc = (accN[lane] + laneNP) & 0xffffffff;\n            acc = (acc << 13) | (acc >>> 19);\n            const acc0 = acc & 0xffff;\n            const acc1 = acc >>> 16;\n            accN[lane] = (acc0 * PRIME32_1 + ((acc1 * PRIME32_1) << 16)) & 0xffffffff;\n            lane = (lane + 1) & 0x3;\n        }\n        /*\n            Step 3. Accumulator convergence\n            All 4 lane accumulators from previous steps are merged to produce a single remaining accumulator\n            of same width (32-bit). The associated formula is as follows :\n\n            ```\n            acc = (acc1 <<< 1) + (acc2 <<< 7) + (acc3 <<< 12) + (acc4 <<< 18);\n            ```\n        */\n        acc =\n            (((accN[0] << 1) | (accN[0] >>> 31)) +\n                ((accN[1] << 7) | (accN[1] >>> 25)) +\n                ((accN[2] << 12) | (accN[2] >>> 20)) +\n                ((accN[3] << 18) | (accN[3] >>> 14))) &\n                0xffffffff;\n    }\n    /*\n        Step 4. Add input length\n        The input total length is presumed known at this stage. This step is just about adding the length to\n        accumulator, so that it participates to final mixing.\n\n        ```\n        acc = acc + (u32)inputLength;\n        ```\n    */\n    acc = (acc + buffer.length) & 0xffffffff;\n    /*\n        Step 5. Consume remaining input\n        There may be up to 15 bytes remaining to consume from the input. The final stage will digest them according\n        to following pseudo-code :\n        ```\n        while (remainingLength >= 4) {\n            lane = read_32bit_little_endian(input_ptr);\n            acc = acc + lane * PRIME32_3;\n            acc = (acc <<< 17) * PRIME32_4;\n            input_ptr += 4; remainingLength -= 4;\n        }\n        ```\n        This process ensures that all input bytes are present in the final mix.\n    */\n    const limit = buffer.length - 4;\n    for (; offset <= limit; offset += 4) {\n        const i = offset;\n        const laneN0 = b[i + 0] + (b[i + 1] << 8);\n        const laneN1 = b[i + 2] + (b[i + 3] << 8);\n        const laneP = laneN0 * PRIME32_3 + ((laneN1 * PRIME32_3) << 16);\n        acc = (acc + laneP) & 0xffffffff;\n        acc = (acc << 17) | (acc >>> 15);\n        acc = ((acc & 0xffff) * PRIME32_4 + (((acc >>> 16) * PRIME32_4) << 16)) & 0xffffffff;\n    }\n    /*\n        ```\n        while (remainingLength >= 1) {\n            lane = read_byte(input_ptr);\n            acc = acc + lane * PRIME32_5;\n            acc = (acc <<< 11) * PRIME32_1;\n            input_ptr += 1; remainingLength -= 1;\n        }\n        ```\n    */\n    for (; offset < b.length; ++offset) {\n        const lane = b[offset];\n        acc = acc + lane * PRIME32_5;\n        acc = (acc << 11) | (acc >>> 21);\n        acc = ((acc & 0xffff) * PRIME32_1 + (((acc >>> 16) * PRIME32_1) << 16)) & 0xffffffff;\n    }\n    /*\n        Step 6. Final mix (avalanche)\n        The final mix ensures that all input bits have a chance to impact any bit in the output digest,\n        resulting in an unbiased distribution. This is also called avalanche effect.\n        ```\n        acc = acc xor (acc >> 15);\n        acc = acc * PRIME32_2;\n        acc = acc xor (acc >> 13);\n        acc = acc * PRIME32_3;\n        acc = acc xor (acc >> 16);\n        ```\n    */\n    acc = acc ^ (acc >>> 15);\n    acc = (((acc & 0xffff) * PRIME32_2) & 0xffffffff) + (((acc >>> 16) * PRIME32_2) << 16);\n    acc = acc ^ (acc >>> 13);\n    acc = (((acc & 0xffff) * PRIME32_3) & 0xffffffff) + (((acc >>> 16) * PRIME32_3) << 16);\n    acc = acc ^ (acc >>> 16);\n    // turn any negatives back into a positive number;\n    return acc < 0 ? acc + 4294967296 : acc;\n}\n//# sourceMappingURL=xxHash32.js.map","import { startLoadingSample, sampleLoadingState, sampleLoadEvents, SampleLoadedEvent, loadBuiltInSamples, toNameMap, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, effectsIncludeRingModulation, effectsIncludeGranular, calculateRingModHertz } from \"./SynthConfig\";\nimport { EditorConfig } from \"../editor/EditorConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { events } from \"../global/Events\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter, warpInfinityToNyquist } from \"./filtering\";\nimport { xxHash32 } from \"js-xxhash\";\nconst epsilon = (1.0e-24);\nexport function clamp(min, max, val) {\n    max = max - 1;\n    if (val <= max) {\n        if (val >= min)\n            return val;\n        else\n            return min;\n    }\n    else {\n        return max;\n    }\n}\nfunction validateRange(min, max, val) {\n    if (min <= val && val <= max)\n        return val;\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\nexport function parseFloatWithDefault(s, defaultValue) {\n    let result = parseFloat(s);\n    if (Number.isNaN(result))\n        result = defaultValue;\n    return result;\n}\nexport function parseIntWithDefault(s, defaultValue) {\n    let result = parseInt(s);\n    if (Number.isNaN(result))\n        result = defaultValue;\n    return result;\n}\nfunction encode32BitNumber(buffer, x) {\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\nfunction decode32BitNumber(compressed, charIndex) {\n    let x = 0;\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\nfunction encodeUnisonSettings(buffer, v, s, o, e, i) {\n    buffer.push(base64IntToCharCode[v]);\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex) {\n    let key = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave = 0;\n    if (rawKeyIndex === 12) {\n        key = 0;\n        octave = 1;\n    }\n    else if (rawKeyIndex === 13) {\n        key = 6;\n        octave = -1;\n    }\n    else if (rawKeyIndex === 14) {\n        key = 0;\n        octave = -1;\n    }\n    else if (rawKeyIndex === 15) {\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\nconst base64IntToCharCode = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0];\nclass BitFieldReader {\n    constructor(source, startIndex, stopIndex) {\n        this._bits = [];\n        this._readIndex = 0;\n        for (let i = startIndex; i < stopIndex; i++) {\n            const value = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n    read(bitCount) {\n        let result = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n    readLongTail(minValue, minBits) {\n        let result = minValue;\n        let numBits = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n    readPartDuration() {\n        return this.readLongTail(1, 3);\n    }\n    readLegacyPartDuration() {\n        return this.readLongTail(1, 2);\n    }\n    readPinCount() {\n        return this.readLongTail(1, 0);\n    }\n    readPitchInterval() {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        }\n        else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\nclass BitFieldWriter {\n    constructor() {\n        this._index = 0;\n        this._bits = [];\n    }\n    clear() {\n        this._index = 0;\n    }\n    write(bitCount, value) {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n    writeLongTail(minValue, minBits, value) {\n        if (value < minValue)\n            throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n    writePartDuration(value) {\n        this.writeLongTail(1, 3, value);\n    }\n    writePinCount(value) {\n        this.writeLongTail(1, 0, value);\n    }\n    writePitchInterval(value) {\n        if (value < 0) {\n            this.write(1, 1);\n            this.writeLongTail(1, 3, -value);\n        }\n        else {\n            this.write(1, 0);\n            this.writeLongTail(1, 3, value);\n        }\n    }\n    concat(other) {\n        for (let i = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n    encodeBase64(buffer) {\n        for (let i = 0; i < this._index; i += 6) {\n            const value = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n    lengthBase64() {\n        return Math.ceil(this._index / 6);\n    }\n}\nexport function makeNotePin(interval, time, size) {\n    return { interval: interval, time: time, size: size };\n}\nexport class Note {\n    constructor(pitch, start, end, size, fadeout = false) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n    }\n    pickMainInterval() {\n        let longestFlatIntervalDuration = 0;\n        let mainInterval = 0;\n        for (let pinIndex = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA = this.pins[pinIndex - 1];\n            const pinB = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize = 0;\n            for (let pinIndex = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n    clone() {\n        const newNote = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n    getEndPinIndex(part) {\n        let endPinIndex;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part)\n                break;\n        }\n        return endPinIndex;\n    }\n}\nexport class Pattern {\n    constructor() {\n        this.notes = [];\n        this.instruments = [0];\n    }\n    cloneNotes() {\n        const result = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n    reset() {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n    toJsonObject(song, channel, isModChannel) {\n        const noteArray = [];\n        for (const note of this.notes) {\n            let instrument = channel.instruments[this.instruments[0]];\n            let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray = [];\n            for (const pin of note.pins) {\n                let useVol = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                    \"pitchBend\": pin.interval,\n                    \"volume\": useVol,\n                    \"forMod\": isModChannel,\n                });\n            }\n            const noteObject = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n        const patternObject = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n    fromJsonObject(patternObject, song, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, jsonFormat = \"auto\") {\n        const format = jsonFormat.toLowerCase();\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments = patternObject[\"instruments\"];\n                const instrumentCount = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            }\n            else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n            for (let j = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount)\n                    break;\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n                const note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n                for (let k = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1)\n                        continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize)\n                        break;\n                }\n                if (note.pitches.length < 1)\n                    continue;\n                let startInterval = 0;\n                let instrument = channel.instruments[this.instruments[0]];\n                let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n                for (let k = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined)\n                        continue;\n                    const interval = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n                    const time = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n                    let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n                    let size;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    }\n                    else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    if (time > song.beatsPerBar * Config.partsPerBeat)\n                        continue;\n                    if (note.pins.length == 0) {\n                        note.start = time;\n                        startInterval = interval;\n                    }\n                    else {\n                    }\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2)\n                    continue;\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n                const maxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch = maxPitch;\n                let highestPitch = 0;\n                for (let k = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch)\n                        lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch)\n                        highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1)\n                    continue;\n                for (let k = 0; k < note.pins.length; k++) {\n                    const pin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0)\n                        pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch)\n                        pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                            k--;\n                        }\n                    }\n                }\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                }\n                else {\n                    note.continuesLastPattern = false;\n                }\n                if ((format != \"ultrabox\" && format != \"slarmoosbox\") && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                    for (const pin of note.pins) {\n                        const oldMin = 30;\n                        const newMin = 1;\n                        const old = pin.size + oldMin;\n                        pin.size = old - newMin;\n                    }\n                }\n                this.notes.push(note);\n            }\n        }\n    }\n}\nexport class Operator {\n    constructor(index) {\n        this.frequency = 4;\n        this.amplitude = 0;\n        this.waveform = 0;\n        this.pulseWidth = 0.5;\n        this.reset(index);\n    }\n    reset(index) {\n        this.frequency = 4;\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n    copy(other) {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\nexport class CustomAlgorithm {\n    constructor() {\n        this.name = \"\";\n        this.carrierCount = 0;\n        this.modulatedBy = [[], [], [], [], [], []];\n        this.associatedCarrier = [];\n        this.fromPreset(1);\n    }\n    set(carriers, modulation) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i + 1;\n            }\n            this.name += (i + 1);\n            for (let j = 0; j < modulation[i].length; j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers - 1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            }\n            else {\n                this.name += \".\";\n            }\n        }\n    }\n    reset() {\n        this.name = \"\";\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n    copy(other) {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n    fromPreset(other) {\n        this.reset();\n        let preset = Config.algorithms6Op[other];\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\nexport class CustomFeedBack {\n    constructor() {\n        this.name = \"\";\n        this.indices = [[], [], [], [], [], []];\n        this.fromPreset(1);\n    }\n    set(inIndices) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n    reset() {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n    copy(other) {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n    fromPreset(other) {\n        this.reset();\n        let preset = Config.feedbacks6Op[other];\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\nexport class SpectrumWave {\n    constructor(isNoiseChannel) {\n        this.spectrum = [];\n        this.hash = -1;\n        this.reset(isNoiseChannel);\n    }\n    reset(isNoiseChannel) {\n        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            }\n            else {\n                const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n    markCustomWaveDirty() {\n        const hashMult = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.spectrum)\n            hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\nclass SpectrumWaveState {\n    constructor() {\n        this.wave = null;\n        this._hash = -1;\n    }\n    getCustomWave(settings, lowestOctave) {\n        if (this._hash == settings.hash)\n            return this.wave;\n        this._hash = settings.hash;\n        const waveLength = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave = this.wave;\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n        const highestOctave = 14;\n        const falloffRatio = 0.25;\n        const pitchTweak = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point) {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n        let combinedAmplitude = 1;\n        for (let i = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1 = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2 = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1 = controlPointToOctave(i - 1);\n            let octave2 = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints)\n                octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0)\n                continue;\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n        wave[waveLength] = wave[0];\n        return wave;\n    }\n}\nexport class HarmonicsWave {\n    constructor() {\n        this.harmonics = [];\n        this.hash = -1;\n        this.reset();\n    }\n    reset() {\n        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n    markCustomWaveDirty() {\n        const hashMult = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.harmonics)\n            hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\nclass HarmonicsWaveState {\n    constructor() {\n        this.wave = null;\n        this._hash = -1;\n    }\n    getCustomWave(settings, instrumentType) {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType)\n            return this.wave;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n        const harmonicsRendered = (instrumentType == 7) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n        const waveLength = Config.harmonicsWavelength;\n        const retroWave = getDrumWave(0, null, null);\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave = this.wave;\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n        const overallSlope = -0.25;\n        let combinedControlPointAmplitude = 1;\n        for (let harmonicIndex = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq = harmonicIndex + 1;\n            let controlValue = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue = controlValue / Config.harmonicsMax;\n            let amplitude = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n            amplitude *= retroWave[harmonicIndex + 589];\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n        inverseRealFourierTransform(wave, waveLength);\n        const mult = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i = 0; i < wave.length; i++)\n            wave[i] *= mult;\n        performIntegralOld(wave);\n        wave[waveLength] = wave[0];\n        return wave;\n    }\n}\nclass Grain {\n    constructor() {\n        this.delayLinePosition = 0;\n        this.ageInSamples = 0;\n        this.maxAgeInSamples = 0;\n        this.delay = 0;\n        this.parabolicEnvelopeAmplitude = 0;\n        this.parabolicEnvelopeSlope = 0;\n        this.parabolicEnvelopeCurve = 0;\n        this.rcbEnvelopeAmplitude = 0;\n        this.rcbEnvelopeAttackIndex = 0;\n        this.rcbEnvelopeReleaseIndex = 0;\n        this.rcbEnvelopeSustain = 0;\n    }\n    initializeParabolicEnvelope(durationInSamples, amplitude) {\n        this.parabolicEnvelopeAmplitude = 0;\n        const invDuration = 1.0 / durationInSamples;\n        const invDurationSquared = invDuration * invDuration;\n        this.parabolicEnvelopeSlope = 4.0 * amplitude * (invDuration - invDurationSquared);\n        this.parabolicEnvelopeCurve = -8.0 * amplitude * invDurationSquared;\n    }\n    updateParabolicEnvelope() {\n        this.parabolicEnvelopeAmplitude += this.parabolicEnvelopeSlope;\n        this.parabolicEnvelopeSlope += this.parabolicEnvelopeCurve;\n    }\n    initializeRCBEnvelope(durationInSamples, amplitude) {\n        this.rcbEnvelopeAttackIndex = Math.floor(durationInSamples / 6);\n        this.rcbEnvelopeSustain = amplitude;\n        this.rcbEnvelopeReleaseIndex = Math.floor(durationInSamples * 5 / 6);\n    }\n    updateRCBEnvelope() {\n        if (this.ageInSamples < this.rcbEnvelopeAttackIndex) {\n            this.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI + (Math.PI * (this.ageInSamples / this.rcbEnvelopeAttackIndex) * (this.rcbEnvelopeSustain / 2.0))));\n        }\n        else if (this.ageInSamples > this.rcbEnvelopeReleaseIndex) {\n            this.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI * ((this.ageInSamples - this.rcbEnvelopeReleaseIndex) / this.rcbEnvelopeAttackIndex)) * (this.rcbEnvelopeSustain / 2.0));\n        }\n    }\n    addDelay(delay) {\n        this.delay = delay;\n    }\n}\nexport class FilterControlPoint {\n    constructor() {\n        this.freq = 0;\n        this.gain = Config.filterGainCenter;\n        this.type = 2;\n    }\n    set(freqSetting, gainSetting) {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n    getHz() {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n    static getHzFromSettingValue(value) {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    static getSettingValueFromHz(hz) {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    static getRoundedSettingValueFromHz(hz) {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n    getLinearGain(peakMult = 1.0) {\n        const power = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral = (this.type == 2) ? 0.0 : -0.5;\n        const interpolatedPower = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    static getRoundedSettingValueFromLinearGain(linearGain) {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n    toCoefficients(filter, sampleRate, freqMult = 1.0, peakMult = 1.0) {\n        const cornerRadiansPerSample = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case 0:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case 1:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case 2:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n    getVolumeCompensationMult() {\n        const octave = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case 0:\n                const freqRelativeTo8khz = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                const warpedFreq = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case 1:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case 2:\n                const distanceFromCenter = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\nexport class FilterSettings {\n    constructor() {\n        this.controlPoints = [];\n        this.controlPointCount = 0;\n        this.reset();\n    }\n    reset() {\n        this.controlPointCount = 0;\n    }\n    addPoint(type, freqSetting, gainSetting) {\n        let controlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        }\n        else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n    toJsonObject() {\n        const filterArray = [];\n        for (let i = 0; i < this.controlPointCount; i++) {\n            const point = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n    fromJsonObject(filterObject) {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (point.type == -1)\n                    point.type = 2;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                }\n                else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                }\n                else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n    static filtersCanMorph(filterA, filterB) {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n    static lerpFilters(filterA, filterB, pos) {\n        let lerpedFilter = new FilterSettings();\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n        pos = Math.max(0, Math.min(1, pos));\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n            return lerpedFilter;\n        }\n        else {\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n    convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyEnv) {\n        this.reset();\n        const legacyFilterCutoffMaxHz = 8000;\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n        const resonant = (legacyResonanceSetting > 1);\n        const firstOrder = (legacyResonanceSetting == 0);\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays = (legacyEnv.type == 5 || legacyEnv.type == 6 || legacyEnv.type == 10 || legacyEnv.type == 1);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n        if (legacyEnv.type == 0 && !resonant && cutoffAtMax) {\n        }\n        else if (firstOrder) {\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            if (envDecays)\n                logGain = Math.min(logGain, -1.0);\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            }\n            else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            let legacyFilterGain;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            }\n            else {\n                const legacyFilter = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant)\n                legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        this.controlPoints.length = this.controlPointCount;\n    }\n    convertLegacySettingsForSynth(legacyCutoffSetting, legacyResonanceSetting, allowFirstOrder = false) {\n        this.reset();\n        const legacyFilterCutoffMaxHz = 8000;\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n        const firstOrder = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n        if (firstOrder) {\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz;\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getSettingValueFromHz(curvedHz);\n            let legacyFilterGain;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n    }\n}\nexport class EnvelopeSettings {\n    constructor(isNoiseEnvelope) {\n        this.isNoiseEnvelope = isNoiseEnvelope;\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = 0;\n        this.discrete = false;\n        this.reset();\n    }\n    reset() {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.pitchEnvelopeStart = 0;\n        this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount - 1 : Config.maxPitch;\n        this.inverse = false;\n        this.isNoiseEnvelope = false;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = 0;\n        this.discrete = false;\n    }\n    toJsonObject() {\n        const envelopeObject = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.newEnvelopes[this.envelope].name,\n            \"inverse\": this.inverse,\n            \"perEnvelopeSpeed\": this.perEnvelopeSpeed,\n            \"perEnvelopeLowerBound\": this.perEnvelopeLowerBound,\n            \"perEnvelopeUpperBound\": this.perEnvelopeUpperBound,\n            \"discrete\": this.discrete,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        if (Config.newEnvelopes[this.envelope].name == \"pitch\") {\n            envelopeObject[\"pitchEnvelopeStart\"] = this.pitchEnvelopeStart;\n            envelopeObject[\"pitchEnvelopeEnd\"] = this.pitchEnvelopeEnd;\n        }\n        else if (Config.newEnvelopes[this.envelope].name == \"random\") {\n            envelopeObject[\"steps\"] = this.steps;\n            envelopeObject[\"seed\"] = this.seed;\n            envelopeObject[\"waveform\"] = this.waveform;\n        }\n        else if (Config.newEnvelopes[this.envelope].name == \"lfo\") {\n            envelopeObject[\"waveform\"] = this.waveform;\n            envelopeObject[\"steps\"] = this.steps;\n        }\n        return envelopeObject;\n    }\n    fromJsonObject(envelopeObject, format) {\n        this.reset();\n        let target = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null)\n            target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n        let envelope = Config.envelopes.dictionary[\"none\"];\n        let isTremolo2 = false;\n        if (format == \"slarmoosbox\") {\n            if (envelopeObject[\"envelope\"] == \"tremolo2\") {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (envelopeObject[\"envelope\"] == \"tremolo\") {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = false;\n            }\n            else {\n                envelope = Config.newEnvelopes.dictionary[envelopeObject[\"envelope\"]];\n            }\n        }\n        else {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == 9) {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > 8) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            }\n            else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == undefined) {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == 9) {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > 8) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            }\n            else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == null)\n            envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        }\n        else {\n            this.index = 0;\n        }\n        if (envelopeObject[\"pitchEnvelopeStart\"] != undefined) {\n            this.pitchEnvelopeStart = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeStart\"]);\n        }\n        else {\n            this.pitchEnvelopeStart = 0;\n        }\n        if (envelopeObject[\"pitchEnvelopeEnd\"] != undefined) {\n            this.pitchEnvelopeEnd = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeEnd\"]);\n        }\n        else {\n            this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch;\n        }\n        this.inverse = Boolean(envelopeObject[\"inverse\"]);\n        if (envelopeObject[\"perEnvelopeSpeed\"] != undefined) {\n            this.perEnvelopeSpeed = envelopeObject[\"perEnvelopeSpeed\"];\n        }\n        else {\n            this.perEnvelopeSpeed = Config.envelopes.dictionary[envelopeObject[\"envelope\"]].speed;\n        }\n        if (envelopeObject[\"perEnvelopeLowerBound\"] != undefined) {\n            this.perEnvelopeLowerBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeLowerBound\"]);\n        }\n        else {\n            this.perEnvelopeLowerBound = 0;\n        }\n        if (envelopeObject[\"perEnvelopeUpperBound\"] != undefined) {\n            this.perEnvelopeUpperBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeUpperBound\"]);\n        }\n        else {\n            this.perEnvelopeUpperBound = 1;\n        }\n        if (isTremolo2) {\n            if (this.inverse) {\n                this.perEnvelopeUpperBound = Math.floor((this.perEnvelopeUpperBound / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = Math.floor((this.perEnvelopeLowerBound / 2) * 10) / 10;\n            }\n            else {\n                this.perEnvelopeUpperBound = Math.floor((0.5 + (this.perEnvelopeUpperBound - this.perEnvelopeLowerBound) / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = 0.5;\n            }\n        }\n        if (envelopeObject[\"steps\"] != undefined) {\n            this.steps = clamp(1, Config.randomEnvelopeStepsMax + 1, envelopeObject[\"steps\"]);\n        }\n        else {\n            this.steps = 2;\n        }\n        if (envelopeObject[\"seed\"] != undefined) {\n            this.seed = clamp(1, Config.randomEnvelopeSeedMax + 1, envelopeObject[\"seed\"]);\n        }\n        else {\n            this.seed = 2;\n        }\n        if (envelopeObject[\"waveform\"] != undefined) {\n            this.waveform = envelopeObject[\"waveform\"];\n        }\n        else {\n            this.waveform = 0;\n        }\n        if (envelopeObject[\"discrete\"] != undefined) {\n            this.discrete = envelopeObject[\"discrete\"];\n        }\n        else {\n            this.discrete = false;\n        }\n    }\n}\nexport class Instrument {\n    constructor(isNoiseChannel, isModChannel) {\n        this.type = 0;\n        this.preset = 0;\n        this.chipWave = 2;\n        this.isUsingAdvancedLoopControls = false;\n        this.chipWaveLoopStart = 0;\n        this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n        this.chipWaveLoopMode = 0;\n        this.chipWavePlayBackwards = false;\n        this.chipWaveStartOffset = 0;\n        this.chipNoise = 1;\n        this.eqFilter = new FilterSettings();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        this.noteFilter = new FilterSettings();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.eqSubFilters = [];\n        this.noteSubFilters = [];\n        this.envelopes = [];\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.envelopeCount = 0;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.pitchShift = 0;\n        this.detune = 0;\n        this.vibrato = 0;\n        this.interval = 0;\n        this.vibratoDepth = 0;\n        this.vibratoSpeed = 10;\n        this.vibratoDelay = 0;\n        this.vibratoType = 0;\n        this.envelopeSpeed = 12;\n        this.unison = 0;\n        this.unisonVoices = 1;\n        this.unisonSpread = 0.0;\n        this.unisonOffset = 0.0;\n        this.unisonExpression = 1.4;\n        this.unisonSign = 1.0;\n        this.effects = 0;\n        this.chord = 1;\n        this.volume = 0;\n        this.pan = Config.panCenter;\n        this.panDelay = 0;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 0;\n        this.fastTwoNoteArp = false;\n        this.legacyTieOver = false;\n        this.clicklessTransition = false;\n        this.aliases = false;\n        this.pulseWidth = Config.pulseWidthRange;\n        this.decimalOffset = 0;\n        this.supersawDynamism = Config.supersawDynamismMax;\n        this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        this.supersawShape = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = 1;\n        this.distortion = 0;\n        this.bitcrusherFreq = 0;\n        this.bitcrusherQuantization = 0;\n        this.ringModulation = Config.ringModRange >> 1;\n        this.ringModulationHz = Config.ringModHzRange >> 1;\n        this.ringModWaveformIndex = 0;\n        this.ringModPulseWidth = Config.pwmOperatorWaves.length >> 1;\n        this.ringModHzOffset = 200;\n        this.granular = 4;\n        this.grainSize = (Config.grainSizeMax - Config.grainSizeMin) / Config.grainSizeStep;\n        this.grainAmounts = Config.grainAmountsMax;\n        this.grainRange = 40;\n        this.chorus = 0;\n        this.reverb = 0;\n        this.echoSustain = 0;\n        this.echoDelay = 0;\n        this.algorithm = 0;\n        this.feedbackType = 0;\n        this.algorithm6Op = 1;\n        this.feedbackType6Op = 1;\n        this.customAlgorithm = new CustomAlgorithm();\n        this.customFeedbackType = new CustomFeedBack();\n        this.feedbackAmplitude = 0;\n        this.customChipWave = new Float32Array(64);\n        this.customChipWaveIntegral = new Float32Array(65);\n        this.operators = [];\n        this.harmonicsWave = new HarmonicsWave();\n        this.drumsetEnvelopes = [];\n        this.drumsetSpectrumWaves = [];\n        this.modChannels = [];\n        this.modInstruments = [];\n        this.modulators = [];\n        this.modFilterTypes = [];\n        this.modEnvelopeNumbers = [];\n        this.invalidModulators = [];\n        this.isNoiseInstrument = false;\n        if (isModChannel) {\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push(-2);\n                this.modInstruments.push(0);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i = 0; i < Config.operatorCount + 2; i++) {\n            this.operators[i] = new Operator(i);\n        }\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n        let sum = 0.0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average = sum / this.customChipWave.length;\n        let cumulative = 0;\n        let wavePrev = 0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n        this.customChipWaveIntegral[64] = 0.0;\n        this.isNoiseInstrument = isNoiseChannel;\n    }\n    setTypeAndReset(type, isNoiseChannel, isModChannel) {\n        if (isModChannel)\n            type = 10;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = (1 << 2);\n        this.chorus = Config.chorusRange - 1;\n        this.reverb = 0;\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\n        this.eqFilter.reset();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            this.eqSubFilters[i] = null;\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5);\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\n        this.ringModulation = Config.ringModRange >> 1;\n        this.ringModulationHz = Config.ringModHzRange >> 1;\n        this.ringModWaveformIndex = 0;\n        this.ringModPulseWidth = Config.pwmOperatorWaves.length >> 1;\n        this.ringModHzOffset = 200;\n        this.granular = 4;\n        this.grainSize = (Config.grainSizeMax - Config.grainSizeMin) / Config.grainSizeStep;\n        this.grainAmounts = Config.grainAmountsMax;\n        this.grainRange = 40;\n        this.pan = Config.panCenter;\n        this.panDelay = 0;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? 1 : 0;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 1;\n        this.envelopeSpeed = 12;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        this.isNoiseInstrument = isNoiseChannel;\n        switch (type) {\n            case 0:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n                break;\n            case 9:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case 1:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case 11:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.effects = 1;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case 2:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case 3:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case 4:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case 5:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case 6:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                this.decimalOffset = 0;\n                break;\n            case 7:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case 10:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.effects = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push(-2);\n                    this.modInstruments.push(0);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                    this.modEnvelopeNumbers[mod] = 0;\n                }\n                break;\n            case 8:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.supersawDynamism = Config.supersawDynamismMax;\n                this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n                this.supersawShape = 0;\n                this.pulseWidth = Config.pulseWidthRange - 1;\n                this.decimalOffset = 0;\n                break;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            this.effects = (this.effects | (1 << 11));\n        }\n    }\n    convertLegacySettings(legacySettings, forceSimpleFilter) {\n        let legacyCutoffSetting = legacySettings.filterCutoff;\n        let legacyResonanceSetting = legacySettings.filterResonance;\n        let legacyFilterEnv = legacySettings.filterEnvelope;\n        let legacyPulseEnv = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv = legacySettings.feedbackEnvelope;\n        if (legacyCutoffSetting == undefined)\n            legacyCutoffSetting = (this.type == 0) ? 6 : 10;\n        if (legacyResonanceSetting == undefined)\n            legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined)\n            legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined)\n            legacyPulseEnv = Config.envelopes.dictionary[(this.type == 6) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined)\n            legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == 1) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined)\n            legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n        const legacyFilterCutoffRange = 11;\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == 4)\n            legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        const carrierCount = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize = true;\n        let allCarriersControlledByNoteSize = true;\n        let noteSizeControlsSomethingElse = (legacyFilterEnv.type == 1) || (legacyPulseEnv.type == 1);\n        if (this.type == 1 || this.type == 11) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == 1);\n            for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != 1) {\n                        allCarriersControlledByNoteSize = false;\n                    }\n                    else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                }\n                else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == 1);\n                }\n            }\n        }\n        this.envelopeCount = 0;\n        if (this.type == 1 || this.type == 11) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n            else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n        }\n        if (legacyFilterEnv.type == 0) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects &= ~(1 << 5);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n        else {\n            this.eqFilter.reset();\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects |= 1 << 5;\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index, false);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n        if (legacyPulseEnv.type != 0) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index, false);\n        }\n        for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize)\n                continue;\n            if (legacyOperatorEnvelopes[i].type != 0) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index, false);\n            }\n        }\n        if (legacyFeedbackEnv.type != 0) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index, false);\n        }\n    }\n    toJsonObject() {\n        const instrumentObject = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"eqFilter\": this.eqFilter.toJsonObject(),\n            \"eqFilterType\": this.eqFilterType,\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\n            \"eqSimplePeak\": this.eqFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed\n        };\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            if (this.eqSubFilters[i] != null)\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i].toJsonObject();\n        }\n        const effects = [];\n        for (const effect of Config.effectOrder) {\n            if (this.effects & (1 << effect)) {\n                effects.push(Config.effectNames[effect]);\n            }\n        }\n        instrumentObject[\"effects\"] = effects;\n        if (effectsIncludeTransition(this.effects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.effects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n            instrumentObject[\"monoChordTone\"] = this.monoChordTone;\n        }\n        if (effectsIncludePitchShift(this.effects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.effects)) {\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.effects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            }\n            else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        if (effectsIncludeNoteFilter(this.effects)) {\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null)\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i].toJsonObject();\n            }\n        }\n        if (effectsIncludeGranular(this.effects)) {\n            instrumentObject[\"granular\"] = this.granular;\n            instrumentObject[\"grainSize\"] = this.grainSize;\n            instrumentObject[\"grainAmounts\"] = this.grainAmounts;\n            instrumentObject[\"grainRange\"] = this.grainRange;\n        }\n        if (effectsIncludeRingModulation(this.effects)) {\n            instrumentObject[\"ringMod\"] = Math.round(100 * this.ringModulation / (Config.ringModRange - 1));\n            instrumentObject[\"ringModHz\"] = Math.round(100 * this.ringModulationHz / (Config.ringModHzRange - 1));\n            instrumentObject[\"ringModWaveformIndex\"] = this.ringModWaveformIndex;\n            instrumentObject[\"ringModPulseWidth\"] = Math.round(100 * this.ringModPulseWidth / (Config.pulseWidthRange - 1));\n            instrumentObject[\"ringModHzOffset\"] = Math.round(100 * this.ringModHzOffset / (Config.rmHzOffsetMax));\n        }\n        if (effectsIncludeDistortion(this.effects)) {\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\n            instrumentObject[\"aliases\"] = this.aliases;\n        }\n        if (effectsIncludeBitcrusher(this.effects)) {\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n        }\n        if (effectsIncludePanning(this.effects)) {\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\n            instrumentObject[\"panDelay\"] = this.panDelay;\n        }\n        if (effectsIncludeChorus(this.effects)) {\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\n        }\n        if (effectsIncludeEcho(this.effects)) {\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n        }\n        if (effectsIncludeReverb(this.effects)) {\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\n        }\n        if (this.type != 4) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\n        }\n        if (this.type == 5 || this.type == 7) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n        if (this.type == 2) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 3) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 4) {\n            instrumentObject[\"drums\"] = [];\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            for (let j = 0; j < Config.drumCount; j++) {\n                const spectrum = [];\n                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        }\n        else if (this.type == 0) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n            instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n            instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n            instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n            instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n            instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n        }\n        else if (this.type == 6) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 8) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n            instrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n            instrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n        }\n        else if (this.type == 7) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n                instrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n            }\n        }\n        else if (this.type == 5) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 1 || this.type == 11) {\n            const operatorArray = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if (this.type == 1) {\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n            else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if (this.algorithm6Op == 0) {\n                    const customAlgorithm = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if (this.feedbackType6Op == 0) {\n                    const customFeedback = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        }\n        else if (this.type == 9) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n            }\n        }\n        else if (this.type == 10) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            instrumentObject[\"modEnvelopeNumbers\"] = [];\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n                instrumentObject[\"modEnvelopeNumbers\"][mod] = this.modEnvelopeNumbers[mod];\n            }\n        }\n        else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n        const envelopes = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n        return instrumentObject;\n    }\n    fromJsonObject(instrumentObject, isNoiseChannel, isModChannel, useSlowerRhythm, useFastTwoNoteArp, legacyGlobalReverb = 0, jsonFormat = Config.jsonFormat) {\n        if (instrumentObject == undefined)\n            instrumentObject = {};\n        const format = jsonFormat.toLowerCase();\n        let type = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        if ((format == \"synthbox\") && (instrumentObject[\"type\"] == \"FM\"))\n            type = Config.instrumentTypeNames.indexOf(\"FM6op\");\n        if (type == -1)\n            type = isModChannel ? 10 : (isNoiseChannel ? 2 : 0);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n        this.effects &= ~(1 << 2);\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n        if (instrumentObject[\"volume\"] != undefined) {\n            if (format == \"jummbox\" || format == \"midbox\" || format == \"synthbox\" || format == \"goldbox\" || format == \"paandorasbox\" || format == \"ultrabox\" || format == \"slarmoosbox\") {\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n            }\n            else {\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\n            }\n        }\n        else {\n            this.volume = 0;\n        }\n        this.envelopeSpeed = instrumentObject[\"envelopeSpeed\"] != undefined ? clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0) : 12;\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            let effects = 0;\n            for (let i = 0; i < instrumentObject[\"effects\"].length; i++) {\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\n            }\n            this.effects = (effects & ((1 << 15) - 1));\n        }\n        else {\n            const legacyEffectsNames = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            if (this.effects == -1)\n                this.effects = (this.type == 2) ? 0 : 1;\n        }\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        const transitionProperty = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"];\n        if (transitionProperty != undefined) {\n            let transition = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = {\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                }[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined)\n                this.transition = transition.index;\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                this.effects = (this.effects | (1 << 10));\n            }\n        }\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n        {\n            const chordProperty = instrumentObject[\"chord\"];\n            const legacyChordNames = { \"harmony\": \"simultaneous\" };\n            const chord = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            }\n            else {\n                if (this.type == 2) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                }\n                else if (this.type == 7) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                }\n                else if (this.type == 0) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                }\n                else if (this.type == 1 || this.type == 11) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                }\n                else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n        this.unison = Config.unisons.dictionary[\"none\"].index;\n        const unisonProperty = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"];\n        if (unisonProperty != undefined) {\n            const legacyChorusNames = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\n            const unison = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined)\n                this.unison = unison.index;\n            if (unisonProperty == \"custom\")\n                this.unison = Config.unisons.length;\n        }\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\n            this.effects = (this.effects | (1 << 11));\n        }\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        if (instrumentObject[\"octoff\"] != undefined) {\n            let potentialPitchShift = instrumentObject[\"octoff\"];\n            this.effects = (this.effects | (1 << 7));\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\n                this.pitchShift = 24;\n            }\n            else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 18;\n            }\n            else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves\")) {\n                this.pitchShift = 0;\n            }\n            else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 6;\n            }\n            else {\n                this.pitchShift = 12;\n            }\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index;\n        const vibratoProperty = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"];\n        if (vibratoProperty != undefined) {\n            const legacyVibratoNames = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length;\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else {\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.effects = (this.effects | (1 << 9));\n            }\n        }\n        if (instrumentObject[\"pan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\n        }\n        else if (instrumentObject[\"ipan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Config.panCenter + (instrumentObject[\"ipan\"] * -50));\n        }\n        else {\n            this.pan = Config.panCenter;\n        }\n        if (this.pan != Config.panCenter) {\n            this.effects = (this.effects | (1 << 2));\n        }\n        if (instrumentObject[\"panDelay\"] != undefined) {\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\n        }\n        else {\n            this.panDelay = 0;\n        }\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n        if (instrumentObject[\"ringMod\"] != undefined) {\n            this.ringModulation = clamp(0, Config.ringModRange, Math.round((Config.ringModRange - 1) * (instrumentObject[\"ringMod\"] | 0) / 100));\n        }\n        if (instrumentObject[\"ringModHz\"] != undefined) {\n            this.ringModulationHz = clamp(0, Config.ringModHzRange, Math.round((Config.ringModHzRange - 1) * (instrumentObject[\"ringModHz\"] | 0) / 100));\n        }\n        if (instrumentObject[\"ringModWaveformIndex\"] != undefined) {\n            this.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, instrumentObject[\"ringModWaveformIndex\"]);\n        }\n        if (instrumentObject[\"ringModPulseWidth\"] != undefined) {\n            this.ringModPulseWidth = clamp(0, Config.pulseWidthRange, Math.round((Config.pulseWidthRange - 1) * (instrumentObject[\"ringModPulseWidth\"] | 0) / 100));\n        }\n        if (instrumentObject[\"ringModHzOffset\"] != undefined) {\n            this.ringModHzOffset = clamp(0, Config.rmHzOffsetMax, Math.round((Config.rmHzOffsetMax - 1) * (instrumentObject[\"ringModHzOffset\"] | 0) / 100));\n        }\n        if (instrumentObject[\"granular\"] != undefined) {\n            this.granular = instrumentObject[\"granular\"];\n        }\n        if (instrumentObject[\"grainSize\"] != undefined) {\n            this.grainSize = instrumentObject[\"grainSize\"];\n        }\n        if (instrumentObject[\"grainAmounts\"] != undefined) {\n            this.grainAmounts = instrumentObject[\"grainAmounts\"];\n        }\n        if (instrumentObject[\"grainRange\"] != undefined) {\n            this.grainRange = clamp(0, Config.grainRangeMax / Config.grainSizeStep + 1, instrumentObject[\"grainRange\"]);\n        }\n        if (instrumentObject[\"distortion\"] != undefined) {\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\n        }\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\n        }\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoSustain\"] != undefined) {\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\n        }\n        if (!isNaN(instrumentObject[\"chorus\"])) {\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\n        }\n        if (instrumentObject[\"reverb\"] != undefined) {\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\n        }\n        else {\n            this.reverb = legacyGlobalReverb;\n        }\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        }\n        else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        }\n        else {\n            this.decimalOffset = 0;\n        }\n        if (instrumentObject[\"dynamism\"] != undefined) {\n            this.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n        }\n        else {\n            this.supersawDynamism = Config.supersawDynamismMax;\n        }\n        if (instrumentObject[\"spread\"] != undefined) {\n            this.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n        }\n        else {\n            this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        }\n        if (instrumentObject[\"shape\"] != undefined) {\n            this.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n        }\n        else {\n            this.supersawShape = 0;\n        }\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        }\n        else {\n            this.harmonicsWave.reset();\n        }\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n                this.spectrumWave.markCustomWaveDirty();\n            }\n        }\n        else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        }\n        else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : 0;\n        if (this.stringSustainType == -1)\n            this.stringSustainType = 0;\n        if (this.type == 2) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\")\n                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\")\n                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1)\n                this.chipNoise = 1;\n        }\n        const legacyEnvelopeNames = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name) => {\n            if (legacyEnvelopeNames[name] != undefined)\n                return Config.envelopes.dictionary[legacyEnvelopeNames[name]];\n            else {\n                return Config.envelopes.dictionary[name];\n            }\n        };\n        if (this.type == 4) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j = 0; j < Config.drumCount; j++) {\n                    const drum = instrumentObject[\"drums\"][j];\n                    if (drum == undefined)\n                        continue;\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined)\n                            this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                }\n            }\n        }\n        if (this.type == 0) {\n            const legacyWaveNames = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n            const modboxWaveNames = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n            const sandboxWaveNames = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n            const zefboxWaveNames = { \"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71, \"deep pulse\": 72 };\n            const miscWaveNames = { \"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n            const paandorasboxWaveNames = { \"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119 };\n            this.chipWave = -1;\n            const rawName = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1)\n                    this.chipWave = potentialChipWaveIndex;\n            }\n            if (this.chipWave == -1)\n                this.chipWave = 1;\n        }\n        if (this.type == 1 || this.type == 11) {\n            if (this.type == 1) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1)\n                    this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1)\n                    this.feedbackType = 0;\n            }\n            else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1)\n                    this.algorithm6Op = 1;\n                if (this.algorithm6Op == 0) {\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                }\n                else {\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType6Op == -1) {\n                    let synthboxLegacyFeedbacks = toNameMap([\n                        { name: \"2⟲ 3⟲\", indices: [[], [2], [3], [], [], []] },\n                        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n                        { name: \"4⟲ 5⟲\", indices: [[], [], [], [4], [5], []] },\n                        { name: \"5⟲ 6⟲\", indices: [[], [], [], [], [5], [6]] },\n                        { name: \"1⟲ 6⟲\", indices: [[1], [], [], [], [], [6]] },\n                        { name: \"1⟲ 3⟲\", indices: [[1], [], [3], [], [], []] },\n                        { name: \"1⟲ 4⟲\", indices: [[1], [], [], [4], [], []] },\n                        { name: \"1⟲ 5⟲\", indices: [[1], [], [], [], [5], []] },\n                        { name: \"4⟲ 6⟲\", indices: [[], [], [], [4], [], [6]] },\n                        { name: \"2⟲ 6⟲\", indices: [[], [2], [], [], [], [6]] },\n                        { name: \"3⟲ 6⟲\", indices: [[], [], [3], [], [], [6]] },\n                        { name: \"4⟲ 5⟲ 6⟲\", indices: [[], [], [], [4], [5], [6]] },\n                        { name: \"1⟲ 3⟲ 6⟲\", indices: [[1], [], [3], [], [], [6]] },\n                        { name: \"2→5\", indices: [[], [], [], [], [2], []] },\n                        { name: \"2→6\", indices: [[], [], [], [], [], [2]] },\n                        { name: \"3→5\", indices: [[], [], [], [], [3], []] },\n                        { name: \"3→6\", indices: [[], [], [], [], [], [3]] },\n                        { name: \"4→6\", indices: [[], [], [], [], [], [4]] },\n                        { name: \"5→6\", indices: [[], [], [], [], [], [5]] },\n                        { name: \"1→3→4\", indices: [[], [], [1], [], [3], []] },\n                        { name: \"2→5→6\", indices: [[], [], [], [], [2], [5]] },\n                        { name: \"2→4→6\", indices: [[], [], [], [2], [], [4]] },\n                        { name: \"4→5→6\", indices: [[], [], [], [], [4], [5]] },\n                        { name: \"3→4→5→6\", indices: [[], [], [], [3], [4], [5]] },\n                        { name: \"2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n                        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n                    ]);\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])].indices;\n                    if (synthboxFeedbackType != undefined) {\n                        this.feedbackType6Op = 0;\n                        this.customFeedbackType.set(synthboxFeedbackType);\n                    }\n                    else {\n                        this.feedbackType6Op = 1;\n                    }\n                }\n                if ((this.feedbackType6Op == 0) && (instrumentObject[\"customFeedback\"] != undefined)) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                }\n                else {\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op);\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            }\n            else {\n                this.feedbackAmplitude = 0;\n            }\n            for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {\n                const operator = this.operators[j];\n                let operatorObject = undefined;\n                if (instrumentObject[\"operators\"] != undefined)\n                    operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined)\n                    operatorObject = {};\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1)\n                    operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                }\n                else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    if (format == \"goldbox\" && j > 3) {\n                        operator.waveform = 0;\n                        continue;\n                    }\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        }\n                        else if (operatorObject[\"waveform\"] == \"rounded\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"quasi-sine\"].index;\n                        }\n                        else {\n                            operator.waveform = 0;\n                        }\n                    }\n                }\n                else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                }\n                else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == 9) {\n            if (instrumentObject[\"customChipWave\"]) {\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        }\n        else if (this.type == 10) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                        this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                    if (instrumentObject[\"modEnvelopeNumbers\"] != undefined)\n                        this.modEnvelopeNumbers[mod] = instrumentObject[\"modEnvelopeNumbers\"][mod];\n                }\n            }\n        }\n        if (this.type != 10) {\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12;\n            }\n            if (this.chord == Config.chords.dictionary[\"monophonic\"].index && instrumentObject[\"monoChordTone\"] != undefined) {\n                this.monoChordTone = instrumentObject[\"monoChordTone\"];\n            }\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                if (format == \"modbox\") {\n                    this.effects = (this.effects | (1 << 3));\n                    this.aliases = true;\n                    this.distortion = 0;\n                }\n                else {\n                    this.aliases = false;\n                }\n            }\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            }\n            else {\n                this.noteFilter.reset();\n            }\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i].fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\n            }\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\n            }\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\n            }\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\n            }\n            else {\n                this.eqFilter.reset();\n                const legacySettings = {};\n                const filterCutoffMaxHz = 8000;\n                const filterCutoffRange = 11;\n                const filterResonanceRange = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                }\n                else {\n                    legacySettings.filterCutoff = (this.type == 0) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                }\n                else {\n                    legacySettings.filterResonance = 0;\n                }\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {\n                        let envelope;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1)\n                        legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n                this.convertLegacySettings(legacySettings, true);\n            }\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\n                    this.eqSubFilters[i] = new FilterSettings();\n                    this.eqSubFilters[i].fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\n                }\n            }\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount)\n                        break;\n                    const tempEnvelope = new EnvelopeSettings(this.isNoiseInstrument);\n                    tempEnvelope.fromJsonObject(envelopeArray[i], format);\n                    let pitchEnvelopeStart;\n                    if (instrumentObject[\"pitchEnvelopeStart\"] != undefined && instrumentObject[\"pitchEnvelopeStart\"] != null) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\"];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeStart\" + i] != undefined && instrumentObject[\"pitchEnvelopeStart\" + i] != undefined) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\" + i];\n                    }\n                    else {\n                        pitchEnvelopeStart = tempEnvelope.pitchEnvelopeStart;\n                    }\n                    let pitchEnvelopeEnd;\n                    if (instrumentObject[\"pitchEnvelopeEnd\"] != undefined && instrumentObject[\"pitchEnvelopeEnd\"] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\"];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeEnd\" + i] != undefined && instrumentObject[\"pitchEnvelopeEnd\" + i] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\" + i];\n                    }\n                    else {\n                        pitchEnvelopeEnd = tempEnvelope.pitchEnvelopeEnd;\n                    }\n                    let envelopeInverse;\n                    if (instrumentObject[\"envelopeInverse\" + i] != undefined && instrumentObject[\"envelopeInverse\" + i] != null) {\n                        envelopeInverse = instrumentObject[\"envelopeInverse\" + i];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeInverse\"] != undefined && instrumentObject[\"pitchEnvelopeInverse\"] != null && Config.envelopes[tempEnvelope.envelope].name == \"pitch\") {\n                        envelopeInverse = instrumentObject[\"pitchEnvelopeInverse\"];\n                    }\n                    else {\n                        envelopeInverse = tempEnvelope.inverse;\n                    }\n                    let discreteEnvelope;\n                    if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n                        discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n                    }\n                    else {\n                        discreteEnvelope = tempEnvelope.discrete;\n                    }\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, tempEnvelope.perEnvelopeSpeed, tempEnvelope.perEnvelopeLowerBound, tempEnvelope.perEnvelopeUpperBound, tempEnvelope.steps, tempEnvelope.seed, tempEnvelope.waveform, discreteEnvelope);\n                }\n            }\n        }\n        if (type === 0) {\n            if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n            }\n            else {\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n            }\n        }\n    }\n    getLargestControlPointCount(forNoteFilter) {\n        let largest;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i].controlPointCount > largest)\n                    largest = this.noteSubFilters[i].controlPointCount;\n            }\n        }\n        else {\n            largest = this.eqFilter.controlPointCount;\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.eqSubFilters[i] != null && this.eqSubFilters[i].controlPointCount > largest)\n                    largest = this.eqSubFilters[i].controlPointCount;\n            }\n        }\n        return largest;\n    }\n    static frequencyFromPitch(pitch) {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n    addEnvelope(target, index, envelope, newEnvelopes, start = 0, end = -1, inverse = false, perEnvelopeSpeed = -1, perEnvelopeLowerBound = 0, perEnvelopeUpperBound = 1, steps = 2, seed = 2, waveform = 0, discrete = false) {\n        end = end != -1 ? end : this.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        perEnvelopeSpeed = perEnvelopeSpeed != -1 ? perEnvelopeSpeed : newEnvelopes ? 1 : Config.envelopes[envelope].speed;\n        let makeEmpty = false;\n        if (!this.supportsEnvelopeTarget(target, index))\n            makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount)\n            throw new Error();\n        while (this.envelopes.length <= this.envelopeCount)\n            this.envelopes[this.envelopes.length] = new EnvelopeSettings(this.isNoiseInstrument);\n        const envelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        if (!newEnvelopes) {\n            envelopeSettings.envelope = clamp(0, Config.newEnvelopes.length, Config.envelopes[envelope].type);\n        }\n        else {\n            envelopeSettings.envelope = envelope;\n        }\n        envelopeSettings.pitchEnvelopeStart = start;\n        envelopeSettings.pitchEnvelopeEnd = end;\n        envelopeSettings.inverse = inverse;\n        envelopeSettings.perEnvelopeSpeed = perEnvelopeSpeed;\n        envelopeSettings.perEnvelopeLowerBound = perEnvelopeLowerBound;\n        envelopeSettings.perEnvelopeUpperBound = perEnvelopeUpperBound;\n        envelopeSettings.steps = steps;\n        envelopeSettings.seed = seed;\n        envelopeSettings.waveform = waveform;\n        envelopeSettings.discrete = discrete;\n        this.envelopeCount++;\n    }\n    supportsEnvelopeTarget(target, index) {\n        const automationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n            return false;\n        }\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\n            return false;\n        }\n        if (automationTarget.name == \"arpeggioSpeed\") {\n            return effectsIncludeChord(this.effects) && this.chord == Config.chords.dictionary[\"arpeggio\"].index;\n        }\n        if (automationTarget.isFilter) {\n            let useControlPointCount = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount)\n                return false;\n        }\n        if ((automationTarget.name == \"operatorFrequency\") || (automationTarget.name == \"operatorAmplitude\")) {\n            if (index >= 4 + (this.type == 11 ? 2 : 0))\n                return false;\n        }\n        return true;\n    }\n    clearInvalidEnvelopeTargets() {\n        for (let envelopeIndex = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target = this.envelopes[envelopeIndex].target;\n            const index = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n    getTransition() {\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\n            (this.type == 10 ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n    getFadeInSeconds() {\n        return (this.type == 4) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\n    }\n    getFadeOutTicks() {\n        return (this.type == 4) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut);\n    }\n    getChord() {\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n    getDrumsetEnvelope(pitch) {\n        if (this.type != 4)\n            throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\nexport class Channel {\n    constructor() {\n        this.octave = 0;\n        this.instruments = [];\n        this.patterns = [];\n        this.bars = [];\n        this.muted = false;\n        this.name = \"\";\n    }\n}\nexport class Song {\n    constructor(string) {\n        this.scaleCustom = [];\n        this.channels = [];\n        this.limitDecay = 4.0;\n        this.limitRise = 4000.0;\n        this.compressionThreshold = 1.0;\n        this.limitThreshold = 1.0;\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.masterGain = 1.0;\n        this.inVolumeCap = 0.0;\n        this.outVolumeCap = 0.0;\n        this.eqFilter = new FilterSettings();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        this.eqSubFilters = [];\n        this.getNewNoteVolume = (isMod, modChannel, modInstrument, modCount) => {\n            if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n                return Config.noteSizeMax;\n            else {\n                modCount = Config.modCount - modCount - 1;\n                const instrument = this.channels[modChannel].instruments[modInstrument];\n                let vol = Config.modulators[instrument.modulators[modCount]].newNoteVol;\n                let currentIndex = instrument.modulators[modCount];\n                let tempoIndex = Config.modulators.dictionary[\"tempo\"].index;\n                if (currentIndex == tempoIndex)\n                    vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n                if (!Config.modulators[currentIndex].forSong && instrument.modInstruments[modCount] < this.channels[instrument.modChannels[modCount]].instruments.length) {\n                    let chorusIndex = Config.modulators.dictionary[\"chorus\"].index;\n                    let reverbIndex = Config.modulators.dictionary[\"reverb\"].index;\n                    let panningIndex = Config.modulators.dictionary[\"pan\"].index;\n                    let panDelayIndex = Config.modulators.dictionary[\"pan delay\"].index;\n                    let distortionIndex = Config.modulators.dictionary[\"distortion\"].index;\n                    let detuneIndex = Config.modulators.dictionary[\"detune\"].index;\n                    let vibratoDepthIndex = Config.modulators.dictionary[\"vibrato depth\"].index;\n                    let vibratoSpeedIndex = Config.modulators.dictionary[\"vibrato speed\"].index;\n                    let vibratoDelayIndex = Config.modulators.dictionary[\"vibrato delay\"].index;\n                    let arpSpeedIndex = Config.modulators.dictionary[\"arp speed\"].index;\n                    let bitCrushIndex = Config.modulators.dictionary[\"bit crush\"].index;\n                    let freqCrushIndex = Config.modulators.dictionary[\"freq crush\"].index;\n                    let echoIndex = Config.modulators.dictionary[\"echo\"].index;\n                    let echoDelayIndex = Config.modulators.dictionary[\"echo delay\"].index;\n                    let pitchShiftIndex = Config.modulators.dictionary[\"pitch shift\"].index;\n                    let ringModIndex = Config.modulators.dictionary[\"ring modulation\"].index;\n                    let ringModHertzIndex = Config.modulators.dictionary[\"ring mod hertz\"].index;\n                    let granularIndex = Config.modulators.dictionary[\"granular\"].index;\n                    let grainAmountIndex = Config.modulators.dictionary[\"grain freq\"].index;\n                    let grainSizeIndex = Config.modulators.dictionary[\"grain size\"].index;\n                    let grainRangeIndex = Config.modulators.dictionary[\"grain range\"].index;\n                    let envSpeedIndex = Config.modulators.dictionary[\"envelope speed\"].index;\n                    let perEnvSpeedIndex = Config.modulators.dictionary[\"individual envelope speed\"].index;\n                    let perEnvLowerIndex = Config.modulators.dictionary[\"individual envelope lower bound\"].index;\n                    let perEnvUpperIndex = Config.modulators.dictionary[\"individual envelope upper bound\"].index;\n                    let instrumentIndex = instrument.modInstruments[modCount];\n                    switch (currentIndex) {\n                        case chorusIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].chorus - Config.modulators[chorusIndex].convertRealFactor;\n                            break;\n                        case reverbIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].reverb - Config.modulators[reverbIndex].convertRealFactor;\n                            break;\n                        case panningIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].pan - Config.modulators[panningIndex].convertRealFactor;\n                            break;\n                        case panDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].panDelay - Config.modulators[panDelayIndex].convertRealFactor;\n                            break;\n                        case distortionIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].distortion - Config.modulators[distortionIndex].convertRealFactor;\n                            break;\n                        case detuneIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].detune;\n                            break;\n                        case vibratoDepthIndex:\n                            vol = Math.round(this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].vibratoDepth * 25 - Config.modulators[vibratoDepthIndex].convertRealFactor);\n                            break;\n                        case vibratoSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].vibratoSpeed - Config.modulators[vibratoSpeedIndex].convertRealFactor;\n                            break;\n                        case vibratoDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].vibratoDelay - Config.modulators[vibratoDelayIndex].convertRealFactor;\n                            break;\n                        case arpSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].arpeggioSpeed - Config.modulators[arpSpeedIndex].convertRealFactor;\n                            break;\n                        case bitCrushIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].bitcrusherQuantization - Config.modulators[bitCrushIndex].convertRealFactor;\n                            break;\n                        case freqCrushIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].bitcrusherFreq - Config.modulators[freqCrushIndex].convertRealFactor;\n                            break;\n                        case echoIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].echoSustain - Config.modulators[echoIndex].convertRealFactor;\n                            break;\n                        case echoDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].echoDelay - Config.modulators[echoDelayIndex].convertRealFactor;\n                            break;\n                        case pitchShiftIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].pitchShift;\n                            break;\n                        case ringModIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].ringModulation - Config.modulators[ringModIndex].convertRealFactor;\n                            break;\n                        case ringModHertzIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].ringModulationHz - Config.modulators[ringModHertzIndex].convertRealFactor;\n                            break;\n                        case granularIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].granular - Config.modulators[granularIndex].convertRealFactor;\n                            break;\n                        case grainAmountIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].grainAmounts - Config.modulators[grainAmountIndex].convertRealFactor;\n                            break;\n                        case grainSizeIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].grainSize - Config.modulators[grainSizeIndex].convertRealFactor;\n                            break;\n                        case grainRangeIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].grainRange - Config.modulators[grainRangeIndex].convertRealFactor;\n                            break;\n                        case envSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopeSpeed - Config.modulators[envSpeedIndex].convertRealFactor;\n                            break;\n                        case perEnvSpeedIndex:\n                            vol = Config.perEnvelopeSpeedToIndices[this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeSpeed] - Config.modulators[perEnvSpeedIndex].convertRealFactor;\n                            break;\n                        case perEnvLowerIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeLowerBound - Config.modulators[perEnvLowerIndex].convertRealFactor;\n                            break;\n                        case perEnvUpperIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeUpperBound - Config.modulators[perEnvUpperIndex].convertRealFactor;\n                            break;\n                    }\n                }\n                if (vol != undefined)\n                    return vol;\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        this.getVolumeCap = (isMod, modChannel, modInstrument, modCount) => {\n            if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n                return Config.noteSizeMax;\n            else {\n                modCount = Config.modCount - modCount - 1;\n                let instrument = this.channels[modChannel].instruments[modInstrument];\n                let modulator = Config.modulators[instrument.modulators[modCount]];\n                let cap = modulator.maxRawVol;\n                if (cap != undefined) {\n                    if (modulator.name == \"eq filter\" || modulator.name == \"note filter\" || modulator.name == \"song eq\") {\n                        cap = Config.filterMorphCount - 1;\n                        if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                            cap = Config.filterFreqRange;\n                        }\n                        else if (instrument.modFilterTypes[modCount] > 0) {\n                            cap = Config.filterGainRange;\n                        }\n                    }\n                    return cap;\n                }\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        this.getVolumeCapForSetting = (isMod, modSetting, filterType) => {\n            if (!isMod)\n                return Config.noteSizeMax;\n            else {\n                let cap = Config.modulators[modSetting].maxRawVol;\n                if (cap != undefined) {\n                    if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\" || Config.modulators[modSetting].name == \"song eq\")) {\n                        cap = Config.filterMorphCount - 1;\n                        if (filterType > 0 && filterType % 2) {\n                            cap = Config.filterFreqRange;\n                        }\n                        else if (filterType > 0) {\n                            cap = Config.filterGainRange;\n                        }\n                    }\n                    return cap;\n                }\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        if (string != undefined) {\n            this.fromBase64String(string);\n        }\n        else {\n            this.initToDefault(true);\n        }\n    }\n    getChannelCount() {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n    getMaxInstrumentsPerChannel() {\n        return Math.max(this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin, this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n    getMaxInstrumentsPerPattern(channelIndex) {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n    getMaxInstrumentsPerPatternForChannel(channel) {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n    getChannelIsNoise(channelIndex) {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n    getChannelIsMod(channelIndex) {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n    initToDefault(andResetChannels = true) {\n        this.scale = 0;\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 150;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 1;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n        this.eqFilter.reset();\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            this.eqSubFilters[i] = null;\n        }\n        this.title = \"Untitled\";\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n        if (andResetChannels) {\n            this.pitchChannelCount = 3;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 1;\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                const channel = this.channels[channelIndex];\n                channel.octave = Math.max(3 - channelIndex, 0);\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    }\n                    else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n                for (let instrument = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? 10 : (isNoiseChannel ? 2 : 0), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n                for (let bar = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n    toBase64String() {\n        let bits;\n        let buffer = [];\n        buffer.push(Song._variant);\n        buffer.push(base64IntToCharCode[Song._latestSlarmoosBoxVersion]);\n        buffer.push(78);\n        var encodedSongTitle = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n        for (let i = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n        buffer.push(110, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(115, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]);\n            }\n        }\n        buffer.push(107, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(108, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(101, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(116, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(97, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(103, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(106, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(114, base64IntToCharCode[this.rhythm]);\n        buffer.push(79);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]);\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]);\n            buffer.push(base64IntToCharCode[this.limitDecay]);\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]);\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]);\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]);\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]);\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]);\n        }\n        buffer.push(99);\n        if (this.eqFilter == null) {\n            buffer.push(base64IntToCharCode[0]);\n            console.log(\"Null EQ filter settings detected in toBase64String for song\");\n        }\n        else {\n            buffer.push(base64IntToCharCode[this.eqFilter.controlPointCount]);\n            for (let j = 0; j < this.eqFilter.controlPointCount; j++) {\n                const point = this.eqFilter.controlPoints[j];\n                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n            }\n        }\n        let usingSubFilterBitfield = 0;\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            usingSubFilterBitfield |= (+(this.eqSubFilters[j + 1] != null) << j);\n        }\n        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            if (usingSubFilterBitfield & (1 << j)) {\n                buffer.push(base64IntToCharCode[this.eqSubFilters[j + 1].controlPointCount]);\n                for (let k = 0; k < this.eqSubFilters[j + 1].controlPointCount; k++) {\n                    const point = this.eqSubFilters[j + 1].controlPoints[k];\n                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                }\n            }\n        }\n        buffer.push(85);\n        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n            var encodedChannelName = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n            for (let i = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n        }\n        buffer.push(105, base64IntToCharCode[(this.layeredInstruments << 1) | this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n        buffer.push(111);\n        for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(84, base64IntToCharCode[instrument.type]);\n                buffer.push(118, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(117, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n                buffer.push(102);\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\n                if (instrument.eqFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.eqFilter == null) {\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    }\n                    else {\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\n                        for (let j = 0; j < instrument.eqFilter.controlPointCount; j++) {\n                            const point = instrument.eqFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n                    let usingSubFilterBitfield = 0;\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\n                    }\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1].controlPointCount]);\n                            for (let k = 0; k < instrument.eqSubFilters[j + 1].controlPointCount; k++) {\n                                const point = instrument.eqSubFilters[j + 1].controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n                buffer.push(113, base64IntToCharCode[(instrument.effects >> 12) & 63], base64IntToCharCode[(instrument.effects >> 6) & 63], base64IntToCharCode[instrument.effects & 63]);\n                if (effectsIncludeNoteFilter(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                    if (instrument.noteFilterType) {\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                    }\n                    else {\n                        if (instrument.noteFilter == null) {\n                            buffer.push(base64IntToCharCode[0]);\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                            for (let j = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                                const point = instrument.noteFilter.controlPoints[j];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                        let usingSubFilterBitfield = 0;\n                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                        }\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1].controlPointCount]);\n                                for (let k = 0; k < instrument.noteSubFilters[j + 1].controlPointCount; k++) {\n                                    const point = instrument.noteSubFilters[j + 1].controlPoints[k];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (effectsIncludeTransition(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]);\n                    }\n                    if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.monoChordTone]);\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                if (effectsIncludeDistortion(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\n                }\n                if (effectsIncludeBitcrusher(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\n                }\n                if (effectsIncludePanning(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\n                }\n                if (effectsIncludeChorus(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\n                }\n                if (effectsIncludeEcho(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\n                }\n                if (effectsIncludeReverb(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\n                }\n                if (effectsIncludeGranular(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.granular]);\n                    buffer.push(base64IntToCharCode[instrument.grainSize]);\n                    buffer.push(base64IntToCharCode[instrument.grainAmounts]);\n                    buffer.push(base64IntToCharCode[instrument.grainRange]);\n                }\n                if (effectsIncludeRingModulation(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.ringModulation]);\n                    buffer.push(base64IntToCharCode[instrument.ringModulationHz]);\n                    buffer.push(base64IntToCharCode[instrument.ringModWaveformIndex]);\n                    buffer.push(base64IntToCharCode[(instrument.ringModPulseWidth)]);\n                    buffer.push(base64IntToCharCode[(instrument.ringModHzOffset - Config.rmHzOffsetMin) >> 6], base64IntToCharCode[(instrument.ringModHzOffset - Config.rmHzOffsetMin) & 0x3F]);\n                }\n                if (instrument.type != 4) {\n                    buffer.push(100, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n                if (instrument.type == 5 || instrument.type == 7) {\n                    buffer.push(72);\n                    const harmonicsBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n                if (instrument.type == 0) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(121);\n                    const encodedLoopMode = ((clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n                        | (instrument.isUsingAdvancedLoopControls ? 1 : 0));\n                    buffer.push(base64IntToCharCode[encodedLoopMode]);\n                    const encodedReleaseMode = ((clamp(0, 31 + 1, 0) << 1)\n                        | (instrument.chipWavePlayBackwards ? 1 : 0));\n                    buffer.push(base64IntToCharCode[encodedReleaseMode]);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopStart);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n                    encode32BitNumber(buffer, instrument.chipWaveStartOffset);\n                }\n                else if (instrument.type == 1 || instrument.type == 11) {\n                    if (instrument.type == 1) {\n                        buffer.push(65, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(70, base64IntToCharCode[instrument.feedbackType]);\n                    }\n                    else {\n                        buffer.push(65, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(67, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(113);\n                            for (let o = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(82);\n                            }\n                            buffer.push(113);\n                        }\n                        buffer.push(70, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(113);\n                            for (let o = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(82);\n                            }\n                            buffer.push(113);\n                        }\n                    }\n                    buffer.push(66, base64IntToCharCode[instrument.feedbackAmplitude]);\n                    buffer.push(81);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(80);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(82);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                }\n                else if (instrument.type == 9) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(77);\n                    for (let j = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24)]);\n                    }\n                }\n                else if (instrument.type == 2) {\n                    buffer.push(119, base64IntToCharCode[instrument.chipNoise]);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 3) {\n                    buffer.push(83);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 4) {\n                    buffer.push(122);\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n                    buffer.push(83);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 5) {\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 6) {\n                    buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 8) {\n                    buffer.push(120, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n                    buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                }\n                else if (instrument.type == 7) {\n                    if (Config.stringSustainRange > 0x20 || 2 > 2) {\n                        throw new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(73, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                }\n                else if (instrument.type == 10) {\n                }\n                else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n                buffer.push(69, base64IntToCharCode[instrument.envelopeCount]);\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"pitch\") {\n                        if (!instrument.isNoiseInstrument) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart & 0x3f]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd & 0x3f]);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd]);\n                        }\n                    }\n                    else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"random\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].seed]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                    }\n                    else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"lfo\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                        if (instrument.envelopes[envelopeIndex].waveform == 5 || instrument.envelopes[envelopeIndex].waveform == 6) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        }\n                    }\n                    let checkboxValues = +instrument.envelopes[envelopeIndex].discrete;\n                    checkboxValues = checkboxValues << 1;\n                    checkboxValues += +instrument.envelopes[envelopeIndex].inverse;\n                    buffer.push(base64IntToCharCode[checkboxValues] ? base64IntToCharCode[checkboxValues] : base64IntToCharCode[0]);\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"pitch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"note size\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"punch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"none\") {\n                        buffer.push(base64IntToCharCode[Config.perEnvelopeSpeedToIndices[instrument.envelopes[envelopeIndex].perEnvelopeSpeed]]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeLowerBound * 10]);\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeUpperBound * 10]);\n                }\n            }\n        }\n        buffer.push(98);\n        bits = new BitFieldWriter();\n        let neededBits = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1)\n            neededBits++;\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++)\n            for (let i = 0; i < this.barCount; i++) {\n                bits.write(neededBits, this.channels[channelIndex].bars[i]);\n            }\n        bits.encodeBase64(buffer);\n        buffer.push(112);\n        bits = new BitFieldWriter();\n        const shapeBits = new BitFieldWriter();\n        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n            if (isModChannel) {\n                const neededModInstrumentIndexBits = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    let instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        const modChannel = instrument.modChannels[mod];\n                        const modInstrument = instrument.modInstruments[mod];\n                        const modSetting = instrument.modulators[mod];\n                        const modFilter = instrument.modFilterTypes[mod];\n                        const modEnvelope = instrument.modEnvelopeNumbers[mod];\n                        let status = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n                        bits.write(2, status);\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannel);\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\n                        }\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\") {\n                            bits.write(6, modFilter);\n                        }\n                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\") {\n                            bits.write(6, modEnvelope);\n                        }\n                    }\n                }\n            }\n            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes = [];\n            for (let i = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n                    let curPart = 0;\n                    for (const note of pattern.notes) {\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0);\n                            bits.write(1, 1);\n                            bits.writePartDuration(curPart - note.start);\n                        }\n                        if (note.start > curPart) {\n                            bits.write(2, 0);\n                            if (isModChannel)\n                                bits.write(1, 0);\n                            bits.writePartDuration(note.start - curPart);\n                        }\n                        shapeBits.clear();\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        }\n                        else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n                        shapeBits.writePinCount(note.pins.length - 1);\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size);\n                        }\n                        else {\n                            shapeBits.write(9, note.pins[0].size);\n                        }\n                        let shapePart = 0;\n                        let startPitch = note.pitches[0];\n                        let currentPitch = startPitch;\n                        const pitchBends = [];\n                        for (let i = 1; i < note.pins.length; i++) {\n                            const pin = note.pins[i];\n                            const nextPitch = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            }\n                            else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            }\n                            else {\n                                shapeBits.write(9, pin.size);\n                            }\n                        }\n                        const shapeString = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1);\n                            bits.concat(shapeBits);\n                        }\n                        else {\n                            bits.write(1, 1);\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10)\n                            recentShapes.pop();\n                        const allPitches = note.pitches.concat(pitchBends);\n                        for (let i = 0; i < allPitches.length; i++) {\n                            const pitch = allPitches[i];\n                            const pitchIndex = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval = 0;\n                                let pitchIter = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1)\n                                            interval++;\n                                    }\n                                }\n                                else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1)\n                                            interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            }\n                            else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16)\n                                recentPitches.pop();\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            }\n                            else {\n                                lastPitch = pitch;\n                            }\n                        }\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n                        curPart = note.end;\n                    }\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0);\n                        if (isModChannel)\n                            bits.write(1, 0);\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                }\n                else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength = bits.lengthBase64();\n        let digits = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits);\n        bits.encodeBase64(buffer);\n        const maxApplyArgs = 64000;\n        let customSamplesStr = \"\";\n        if (EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0) {\n            customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\");\n        }\n        if (buffer.length < maxApplyArgs) {\n            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n        }\n        else {\n            let result = \"\";\n            for (let i = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n            return result + customSamplesStr;\n        }\n    }\n    static _envelopeFromLegacyIndex(legacyIndex) {\n        if (legacyIndex == 0)\n            legacyIndex = 1;\n        else if (legacyIndex == 1)\n            legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n    fromBase64String(compressed, jsonFormat = \"auto\") {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex = 0;\n        while (compressed.charCodeAt(charIndex) <= 32)\n            charIndex++;\n        if (compressed.charCodeAt(charIndex) == 35)\n            charIndex++;\n        if (compressed.charCodeAt(charIndex) == 123) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\n            return;\n        }\n        const variantTest = compressed.charCodeAt(charIndex);\n        let fromBeepBox = false;\n        let fromJummBox = false;\n        let fromGoldBox = false;\n        let fromUltraBox = false;\n        let fromSlarmoosBox = false;\n        if (variantTest == 0x6A) {\n            fromJummBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x67) {\n            fromGoldBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x75) {\n            fromUltraBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x64) {\n            fromJummBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x61) {\n            fromUltraBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x73) {\n            fromSlarmoosBox = true;\n            charIndex++;\n        }\n        else {\n            fromBeepBox = true;\n        }\n        const version = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion))\n            return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion))\n            return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion))\n            return;\n        if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion))\n            return;\n        if (fromSlarmoosBox && (version == -1 || version > Song._latestSlarmoosBoxVersion || version < Song._oldestSlarmoosBoxVersion))\n            return;\n        const beforeTwo = version < 2;\n        const beforeThree = version < 3;\n        const beforeFour = version < 4;\n        const beforeFive = version < 5;\n        const beforeSix = version < 6;\n        const beforeSeven = version < 7;\n        const beforeEight = version < 8;\n        const beforeNine = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n        let willLoadLegacySamplesForOldSongs = false;\n        if (fromSlarmoosBox || fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\");\n            var compressed_array = compressed.split(\"|\");\n            compressed = compressed_array.shift();\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n                Song._restoreChipWaveListToDefault();\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls = [];\n                const customSamplePresets = [];\n                sampleLoadingState.statusTable = {};\n                sampleLoadingState.urlTable = {};\n                sampleLoadingState.totalSamples = 0;\n                sampleLoadingState.samplesLoaded = 0;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                for (const url of compressed_array) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    else {\n                        const parseOldSyntax = beforeThree;\n                        const ok = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                        if (!ok) {\n                            continue;\n                        }\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        }\n        if (beforeThree && fromBeepBox) {\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].effects |= 1 << 10;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n        let legacySettingsCache = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            legacySettingsCache = [];\n            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j = 0; j < Config.instrumentCountMin; j++)\n                    legacySettingsCache[i][j] = {};\n            }\n        }\n        let legacyGlobalReverb = 0;\n        let instrumentChannelIterator = 0;\n        let instrumentIndexIterator = -1;\n        let command;\n        let useSlowerArpSpeed = false;\n        let useFastTwoNoteArp = false;\n        while (charIndex < compressed.length)\n            switch (command = compressed.charCodeAt(charIndex++)) {\n                case 78:\n                    {\n                        var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n                        charIndex += songNameLength;\n                    }\n                    break;\n                case 110:\n                    {\n                        this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (fromBeepBox || (fromJummBox && beforeTwo)) {\n                            this.modChannelCount = 0;\n                        }\n                        else {\n                            this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                        this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                        this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n                        for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                            this.channels[channelIndex] = new Channel();\n                        }\n                        this.channels.length = this.getChannelCount();\n                        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                                legacySettingsCache[i] = [];\n                                for (let j = 0; j < Config.instrumentCountMin; j++)\n                                    legacySettingsCache[i][j] = {};\n                            }\n                        }\n                    }\n                    break;\n                case 115:\n                    {\n                        this.scale = clamp(0, Config.scales.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                                this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1;\n                            }\n                        }\n                        if (fromBeepBox)\n                            this.scale = 0;\n                    }\n                    break;\n                case 107:\n                    {\n                        if (beforeSeven && fromBeepBox) {\n                            this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = 0;\n                        }\n                        else if (fromBeepBox || fromJummBox) {\n                            this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = 0;\n                        }\n                        else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                            const rawKeyIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const [key, octave] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                            this.key = key;\n                            this.octave = octave;\n                        }\n                        else {\n                            this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                        }\n                    }\n                    break;\n                case 108:\n                    {\n                        if (beforeFive && fromBeepBox) {\n                            this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                    }\n                    break;\n                case 101:\n                    {\n                        if (beforeFive && fromBeepBox) {\n                            this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                    }\n                    break;\n                case 116:\n                    {\n                        if (beforeFour && fromBeepBox) {\n                            this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else {\n                            this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n                    }\n                    break;\n                case 109:\n                    {\n                        if (beforeNine && fromBeepBox) {\n                            legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                            legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                        }\n                        else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 97:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else {\n                            this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n                    }\n                    break;\n                case 103:\n                    {\n                        const barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                                this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                            }\n                            this.channels[channelIndex].bars.length = this.barCount;\n                        }\n                    }\n                    break;\n                case 106:\n                    {\n                        let patternsPerChannel;\n                        if (beforeEight && fromBeepBox) {\n                            patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        else {\n                            patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                        const channelCount = this.getChannelCount();\n                        for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\n                            const patterns = this.channels[channelIndex].patterns;\n                            for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                                patterns[pattern] = new Pattern();\n                            }\n                            patterns.length = this.patternsPerChannel;\n                        }\n                    }\n                    break;\n                case 105:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const instrumentsPerChannel = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                            this.layeredInstruments = false;\n                            this.patternInstruments = (instrumentsPerChannel > 1);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                                for (let instrumentIndex = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                    this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                                }\n                                this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                                if (beforeSix && fromBeepBox) {\n                                    for (let instrumentIndex = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                        this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? 2 : 0, isNoiseChannel, isModChannel);\n                                    }\n                                }\n                                for (let j = legacySettingsCache[channelIndex].length; j < instrumentsPerChannel; j++) {\n                                    legacySettingsCache[channelIndex][j] = {};\n                                }\n                            }\n                        }\n                        else {\n                            const instrumentsFlagBits = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                            this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                let instrumentCount = 1;\n                                if (this.layeredInstruments || this.patternInstruments) {\n                                    instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                                }\n                                const channel = this.channels[channelIndex];\n                                const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                                const isModChannel = this.getChannelIsMod(channelIndex);\n                                for (let i = channel.instruments.length; i < instrumentCount; i++) {\n                                    channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                                }\n                                channel.instruments.length = instrumentCount;\n                            }\n                        }\n                    }\n                    break;\n                case 114:\n                    {\n                        if (!fromUltraBox && !fromSlarmoosBox) {\n                            let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.rhythm = clamp(0, Config.rhythms.length, newRhythm);\n                            if (fromJummBox && beforeThree || fromBeepBox) {\n                                if (this.rhythm == Config.rhythms.dictionary[\"÷3 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"÷6\"].index) {\n                                    useSlowerArpSpeed = true;\n                                }\n                                if (this.rhythm >= Config.rhythms.dictionary[\"÷6\"].index) {\n                                    useFastTwoNoteArp = true;\n                                }\n                            }\n                        }\n                        else if ((fromSlarmoosBox && beforeFour) || (fromUltraBox && beforeFive)) {\n                            const rhythmMap = [1, 1, 0, 1, 2, 3, 4, 5];\n                            this.rhythm = clamp(0, Config.rhythms.length, rhythmMap[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]]);\n                        }\n                        else {\n                            this.rhythm = clamp(0, Config.rhythms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 111:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                            if (channelIndex >= this.pitchChannelCount)\n                                this.channels[channelIndex].octave = 0;\n                        }\n                        else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                if (channelIndex >= this.pitchChannelCount)\n                                    this.channels[channelIndex].octave = 0;\n                            }\n                        }\n                        else {\n                            for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let channelIndex = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                                this.channels[channelIndex].octave = 0;\n                            }\n                        }\n                    }\n                    break;\n                case 84:\n                    {\n                        instrumentIndexIterator++;\n                        if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                            instrumentChannelIterator++;\n                            instrumentIndexIterator = 0;\n                        }\n                        validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        let instrumentType = validateRange(0, 12 - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            if (instrumentType == 7 || instrumentType == 8) {\n                                instrumentType += 2;\n                            }\n                        }\n                        else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive)) {\n                            if (instrumentType == 8 || instrumentType == 9 || instrumentType == 10) {\n                                instrumentType += 1;\n                            }\n                        }\n                        instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n                        if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == 0 || instrumentType == 9 || instrumentType == 6)) {\n                            instrument.aliases = true;\n                            instrument.distortion = 0;\n                            instrument.effects |= 1 << 3;\n                        }\n                        if (useSlowerArpSpeed) {\n                            instrument.arpeggioSpeed = 9;\n                        }\n                        if (useFastTwoNoteArp) {\n                            instrument.fastTwoNoteArp = true;\n                        }\n                        if (beforeSeven && fromBeepBox) {\n                            if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                                instrument.effects |= 1 << 11;\n                            }\n                        }\n                    }\n                    break;\n                case 117:\n                    {\n                        const presetValue = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 7) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;\n                            }\n                        }\n                        else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 8) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;\n                            }\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 10) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 11;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 11;\n                            }\n                        }\n                        if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\")) {\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\");\n                        }\n                    }\n                    break;\n                case 119:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            instrument.convertLegacySettings(legacySettingsCache[channelIndex][0], forceSimpleFilter);\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    if (channelIndex >= this.pitchChannelCount) {\n                                        instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    else {\n                                        instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                                    }\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            if (instrumentChannelIterator >= this.pitchChannelCount) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                        else {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == 2) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                if (fromSlarmoosBox || fromUltraBox) {\n                                    const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (chipWaveCounter == 3) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\n                                    }\n                                    else if (chipWaveCounter == 2) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\n                                    }\n                                    else if (chipWaveCounter == 1) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\n                                    }\n                                    else {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\n                                    }\n                                }\n                                else {\n                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 102:\n                    {\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            if (beforeSeven && fromBeepBox) {\n                                const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];\n                                const legacyToEnvelope = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                                if (beforeThree && fromBeepBox) {\n                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const instrument = this.channels[channelIndex].instruments[0];\n                                    const legacySettings = legacySettingsCache[channelIndex][0];\n                                    const legacyFilter = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                    legacySettings.filterResonance = 0;\n                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                                else if (beforeSix && fromBeepBox) {\n                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                        for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                            const instrument = this.channels[channelIndex].instruments[i];\n                                            const legacySettings = legacySettingsCache[channelIndex][i];\n                                            const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                            if (channelIndex < this.pitchChannelCount) {\n                                                legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                                legacySettings.filterResonance = 0;\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                            }\n                                            else {\n                                                legacySettings.filterCutoff = 10;\n                                                legacySettings.filterResonance = 0;\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                            }\n                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                        }\n                                    }\n                                }\n                                else {\n                                    const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                    legacySettings.filterResonance = 0;\n                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                            else {\n                                const filterCutoffRange = 11;\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if (fromBeepBox || typeCheck == 0) {\n                                instrument.eqFilterType = false;\n                                if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const originalControlPointCount = typeCheck;\n                                instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                for (let i = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\n                                    instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i = 0; i < instrument.eqFilter.controlPointCount; i++) {\n                                    const point = instrument.eqFilter.controlPoints[i];\n                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                                instrument.eqSubFilters[0] = instrument.eqFilter;\n                                if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox || fromSlarmoosBox) {\n                                    let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                        if (usingSubFilterBitfield & (1 << j)) {\n                                            const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            if (instrument.eqSubFilters[j + 1] == null)\n                                                instrument.eqSubFilters[j + 1] = new FilterSettings();\n                                            instrument.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                            for (let i = instrument.eqSubFilters[j + 1].controlPoints.length; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                instrument.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                            }\n                                            for (let i = 0; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                const point = instrument.eqSubFilters[j + 1].controlPoints[i];\n                                                point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            }\n                                            for (let i = instrument.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                charIndex += 3;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                instrument.eqFilterType = true;\n                                instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 121:\n                    {\n                        if (fromSlarmoosBox || fromUltraBox) {\n                            if (beforeThree && fromUltraBox) {\n                                const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                                charIndex += sampleLoopInfoEncodedLength;\n                                const sampleLoopInfo = JSON.parse(atob(sampleLoopInfoEncoded));\n                                for (const entry of sampleLoopInfo) {\n                                    const channelIndex = entry[\"channel\"];\n                                    const instrumentIndex = entry[\"instrument\"];\n                                    const info = entry[\"info\"];\n                                    const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                                    instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                                    instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                                    instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                                    instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                                    instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                                    instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                                }\n                            }\n                            else {\n                                const encodedLoopMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const isUsingAdvancedLoopControls = Boolean(encodedLoopMode & 1);\n                                const chipWaveLoopMode = encodedLoopMode >> 1;\n                                const encodedReleaseMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const chipWavePlayBackwards = Boolean(encodedReleaseMode & 1);\n                                const chipWaveLoopStart = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const chipWaveLoopEnd = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const chipWaveStartOffset = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                                instrument.chipWaveLoopStart = chipWaveLoopStart;\n                                instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                                instrument.chipWaveLoopMode = chipWaveLoopMode;\n                                instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                                instrument.chipWaveStartOffset = chipWaveStartOffset;\n                            }\n                        }\n                        else if (fromGoldBox && !beforeFour && beforeSix) {\n                            if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                                if (!willLoadLegacySamplesForOldSongs) {\n                                    willLoadLegacySamplesForOldSongs = true;\n                                    Config.willReloadForCustomSamples = true;\n                                    EditorConfig.customSamples = [\"legacySamples\"];\n                                    loadBuiltInSamples(0);\n                                }\n                            }\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\n                        }\n                        else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const filterResonanceRange = 8;\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    }\n                    break;\n                case 122:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) {\n                            }\n                            if (instrument.type == 4) {\n                                for (let i = 0; i < Config.drumCount; i++) {\n                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                        aa = pregoldToEnvelope[aa];\n                                    instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                                }\n                            }\n                            else {\n                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                    aa = pregoldToEnvelope[aa];\n                                legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                        }\n                        else {\n                            for (let i = 0; i < Config.drumCount; i++) {\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (!fromSlarmoosBox && aa >= 2)\n                                    aa++;\n                                instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                            }\n                        }\n                    }\n                    break;\n                case 87:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (fromBeepBox) {\n                            instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n                        }\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                aa = pregoldToEnvelope[aa];\n                            legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        if ((fromUltraBox && !beforeFour) || fromSlarmoosBox) {\n                            instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 73:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const sustainValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n                        instrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, 2, sustainValue >> 5) : 0;\n                    }\n                    break;\n                case 100:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const legacySettings = [\n                                { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                                { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                                { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                                { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                                { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                                { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                                { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                                { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                                { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                            ];\n                            if (beforeThree && fromBeepBox) {\n                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[channelIndex].instruments[0];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    instrument.effects |= 1 << 10;\n                                }\n                            }\n                            else if (beforeSix && fromBeepBox) {\n                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                    for (const instrument of this.channels[channelIndex].instruments) {\n                                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                            instrument.effects |= 1 << 10;\n                                        }\n                                    }\n                                }\n                            }\n                            else if ((beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    instrument.effects |= 1 << 10;\n                                }\n                            }\n                            else {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                                    instrument.legacyTieOver = true;\n                                }\n                                instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                                    instrument.effects |= 1 << 10;\n                                }\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                        }\n                    }\n                    break;\n                case 99:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            if (beforeSeven && fromBeepBox) {\n                                if (beforeThree && fromBeepBox) {\n                                    const legacyEffects = [0, 3, 2, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[channelIndex].instruments[0];\n                                    const legacySettings = legacySettingsCache[channelIndex][0];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        instrument.effects |= 1 << 9;\n                                    }\n                                }\n                                else if (beforeSix && fromBeepBox) {\n                                    const legacyEffects = [0, 1, 2, 3, 0, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                        for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                            const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            const instrument = this.channels[channelIndex].instruments[i];\n                                            const legacySettings = legacySettingsCache[channelIndex][i];\n                                            instrument.vibrato = legacyEffects[effect];\n                                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                            }\n                                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                                instrument.effects |= 1 << 9;\n                                            }\n                                            if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                                instrument.effects |= 1 << 0;\n                                                instrument.reverb = legacyGlobalReverb;\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    const legacyEffects = [0, 1, 2, 3, 0, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        instrument.effects |= 1 << 9;\n                                    }\n                                    if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                        instrument.effects |= 1 << 0;\n                                        instrument.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                            else {\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                const vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.vibrato = vibrato;\n                                if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                    instrument.effects |= 1 << 9;\n                                }\n                                if (vibrato == Config.vibratos.length) {\n                                    instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                                    instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                                    instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.effects |= 1 << 9;\n                                }\n                                else {\n                                    instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                                    instrument.vibratoSpeed = 10;\n                                    instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                                    instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                                }\n                            }\n                        }\n                        else {\n                            if (fromSlarmoosBox && !beforeFour) {\n                                const originalControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                this.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                for (let i = this.eqFilter.controlPoints.length; i < this.eqFilter.controlPointCount; i++) {\n                                    this.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i = 0; i < this.eqFilter.controlPointCount; i++) {\n                                    const point = this.eqFilter.controlPoints[i];\n                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i = this.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                                this.eqSubFilters[0] = this.eqFilter;\n                                let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (this.eqSubFilters[j + 1] == null)\n                                            this.eqSubFilters[j + 1] = new FilterSettings();\n                                        this.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i = this.eqSubFilters[j + 1].controlPoints.length; i < this.eqSubFilters[j + 1].controlPointCount; i++) {\n                                            this.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i = 0; i < this.eqSubFilters[j + 1].controlPointCount; i++) {\n                                            const point = this.eqSubFilters[j + 1].controlPoints[i];\n                                            point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i = this.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 71:\n                    {\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 104:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    let unison = clamp(0, Config.unisons.length, originalValue);\n                                    if (originalValue == 8) {\n                                        unison = 2;\n                                        instrument.chord = 3;\n                                    }\n                                    instrument.unison = unison;\n                                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison = clamp(0, Config.unisons.length, originalValue);\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            if (originalValue == 8) {\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const unisonLength = (beforeFive || !fromSlarmoosBox) ? 27 : Config.unisons.length;\n                            if (((fromUltraBox && !beforeFive) || fromSlarmoosBox) && (instrument.unison == unisonLength)) {\n                                instrument.unison = Config.unisons.length;\n                                instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSpread = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n                                const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonOffset = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n                                const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonExpression = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                                const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSign = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                                instrument.unisonSpread = unisonSpread / 1000;\n                                if (unisonSpreadNegative == 0)\n                                    instrument.unisonSpread *= -1;\n                                instrument.unisonOffset = unisonOffset / 1000;\n                                if (unisonOffsetNegative == 0)\n                                    instrument.unisonOffset *= -1;\n                                instrument.unisonExpression = unisonExpression / 1000;\n                                if (unisonExpressionNegative == 0)\n                                    instrument.unisonExpression *= -1;\n                                instrument.unisonSign = unisonSign / 1000;\n                                if (unisonSignNegative == 0)\n                                    instrument.unisonSign *= -1;\n                            }\n                            else {\n                                instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                                instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                                instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                                instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                                instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                            }\n                        }\n                    }\n                    break;\n                case 67:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                                instrument.effects |= 1 << 11;\n                            }\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 113:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << 15) - 1));\n                            if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                instrument.effects &= ~(1 << 0);\n                            }\n                            else if (effectsIncludeReverb(instrument.effects)) {\n                                instrument.reverb = legacyGlobalReverb;\n                            }\n                            instrument.effects |= 1 << 2;\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                instrument.effects |= 1 << 9;\n                            }\n                            if (instrument.detune != Config.detuneCenter) {\n                                instrument.effects |= 1 << 8;\n                            }\n                            if (instrument.aliases)\n                                instrument.effects |= 1 << 3;\n                            else\n                                instrument.effects &= ~(1 << 3);\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                            if (15 > 15)\n                                throw new Error();\n                            if (fromSlarmoosBox && !beforeFive) {\n                                instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 12) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeNoteFilter(instrument.effects)) {\n                                let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (fromBeepBox || typeCheck == 0) {\n                                    instrument.noteFilterType = false;\n                                    if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                        typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                                    for (let i = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                        instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                        const point = instrument.noteFilter.controlPoints[i];\n                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\n                                        charIndex += 3;\n                                    }\n                                    instrument.noteSubFilters[0] = instrument.noteFilter;\n                                    if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox) || (fromSlarmoosBox)) {\n                                        let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                            if (usingSubFilterBitfield & (1 << j)) {\n                                                const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                                if (instrument.noteSubFilters[j + 1] == null)\n                                                    instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                                instrument.noteSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                                for (let i = instrument.noteSubFilters[j + 1].controlPoints.length; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {\n                                                    instrument.noteSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                                }\n                                                for (let i = 0; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {\n                                                    const point = instrument.noteSubFilters[j + 1].controlPoints[i];\n                                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                }\n                                                for (let i = instrument.noteSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                    charIndex += 3;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    instrument.noteFilterType = true;\n                                    instrument.noteFilter.reset();\n                                    instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeTransition(instrument.effects)) {\n                                instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeChord(instrument.effects)) {\n                                instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                                    instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                                }\n                                if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index && fromSlarmoosBox && !beforeFive) {\n                                    instrument.monoChordTone = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                }\n                            }\n                            if (effectsIncludePitchShift(instrument.effects)) {\n                                instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeDetune(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                                }\n                                else {\n                                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeVibrato(instrument.effects)) {\n                                instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                                    instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                                    instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                else {\n                                    instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                                    instrument.vibratoSpeed = 10;\n                                    instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                                    instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                                }\n                            }\n                            if (effectsIncludeDistortion(instrument.effects)) {\n                                instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                            }\n                            if (effectsIncludeBitcrusher(instrument.effects)) {\n                                instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludePanning(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                                }\n                                else {\n                                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (effectsIncludeChorus(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                                }\n                                else {\n                                    instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeEcho(instrument.effects)) {\n                                instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeReverb(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                                }\n                                else {\n                                    instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeGranular(instrument.effects)) {\n                                instrument.granular = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrument.grainSize = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrument.grainAmounts = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrument.grainRange = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (effectsIncludeRingModulation(instrument.effects)) {\n                                instrument.ringModulation = clamp(0, Config.ringModRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModulationHz = clamp(0, Config.ringModHzRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModPulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModHzOffset = clamp(Config.rmHzOffsetMin, Config.rmHzOffsetMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                        instrument.effects &= (1 << 15) - 1;\n                    }\n                    break;\n                case 118:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                        else if (fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                        }\n                    }\n                    break;\n                case 76:\n                    {\n                        if (beforeNine && fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                        }\n                        else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox || fromSlarmoosBox) {\n                                instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 68:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                            instrument.effects |= 1 << 8;\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 77:\n                    {\n                        let instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        for (let j = 0; j < 64; j++) {\n                            instrument.customChipWave[j]\n                                = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                        }\n                        let sum = 0.0;\n                        for (let i = 0; i < instrument.customChipWave.length; i++) {\n                            sum += instrument.customChipWave[i];\n                        }\n                        const average = sum / instrument.customChipWave.length;\n                        let cumulative = 0;\n                        let wavePrev = 0;\n                        for (let i = 0; i < instrument.customChipWave.length; i++) {\n                            cumulative += wavePrev;\n                            wavePrev = instrument.customChipWave[i] - average;\n                            instrument.customChipWaveIntegral[i] = cumulative;\n                        }\n                        instrument.customChipWaveIntegral[64] = 0.0;\n                    }\n                    break;\n                case 79:\n                    {\n                        let nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (nextValue == 0x3f) {\n                            this.restoreLimiterDefaults();\n                        }\n                        else {\n                            this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                            nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                            this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                            this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                            this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                            this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                        }\n                    }\n                    break;\n                case 85:\n                    {\n                        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n                            var channelNameLength;\n                            if (beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox)\n                                channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            else\n                                channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n                            charIndex += channelNameLength;\n                        }\n                    }\n                    break;\n                case 65:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 1) {\n                            instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        else {\n                            instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                            if (compressed.charCodeAt(charIndex) == 67) {\n                                let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                                charIndex++;\n                                let tempModArray = [];\n                                if (compressed.charCodeAt(charIndex + 1) == 113) {\n                                    charIndex++;\n                                    let j = 0;\n                                    charIndex++;\n                                    while (compressed.charCodeAt(charIndex) != 113) {\n                                        tempModArray[j] = [];\n                                        let o = 0;\n                                        while (compressed.charCodeAt(charIndex) != 82) {\n                                            tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                            o++;\n                                            charIndex++;\n                                        }\n                                        j++;\n                                        charIndex++;\n                                    }\n                                    instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                                    charIndex++;\n                                }\n                            }\n                        }\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    }\n                    break;\n                case 120:\n                    {\n                        if (fromGoldBox && !beforeFour && beforeSix) {\n                            const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((chipWaveForCompat + 62) > 85) {\n                                if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                                    if (!willLoadLegacySamplesForOldSongs) {\n                                        willLoadLegacySamplesForOldSongs = true;\n                                        Config.willReloadForCustomSamples = true;\n                                        EditorConfig.customSamples = [\"legacySamples\"];\n                                        loadBuiltInSamples(0);\n                                    }\n                                }\n                            }\n                            if ((chipWaveForCompat + 62) > 78) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\n                            }\n                            else if ((chipWaveForCompat + 62) > 67) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\n                            }\n                            else if ((chipWaveForCompat + 62) == 67) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\n                            }\n                            else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 70:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 1) {\n                            instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        else {\n                            instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                            let tempModArray = [];\n                            if (compressed.charCodeAt(charIndex) == 113) {\n                                let j = 0;\n                                charIndex++;\n                                while (compressed.charCodeAt(charIndex) != 113) {\n                                    tempModArray[j] = [];\n                                    let o = 0;\n                                    while (compressed.charCodeAt(charIndex) != 82) {\n                                        tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                        o++;\n                                        charIndex++;\n                                    }\n                                    j++;\n                                    charIndex++;\n                                }\n                                instrument.customFeedbackType.set(tempModArray);\n                                charIndex++;\n                            }\n                        }\n                    }\n                    break;\n                case 66:\n                    {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    break;\n                case 86:\n                    {\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                aa = pregoldToEnvelope[aa];\n                            legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 81:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (beforeThree && fromGoldBox) {\n                            const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            }\n                        }\n                        else if (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox) {\n                            const freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            }\n                        }\n                        else {\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 80:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                            instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 69:\n                    {\n                        const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const jummToUltraEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\n                        const slarURL3toURL4Envelope = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14];\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.operatorEnvelopes = [];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (fromBeepBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (fromJummBox)\n                                    aa = jummToUltraEnvelope[aa];\n                                legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                            }\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                            const envelopeCount = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            let envelopeDiscrete = false;\n                            if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive) || (fromSlarmoosBox)) {\n                                instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (!fromSlarmoosBox || beforeFive) {\n                                    envelopeDiscrete = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                                }\n                            }\n                            for (let i = 0; i < envelopeCount; i++) {\n                                const target = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                let index = 0;\n                                const maxCount = Config.instrumentAutomationTargets[target].maxCount;\n                                if (maxCount > 1) {\n                                    index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (fromBeepBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (fromJummBox)\n                                    aa = jummToUltraEnvelope[aa];\n                                if (!fromSlarmoosBox && aa >= 2)\n                                    aa++;\n                                let updatedEnvelopes = false;\n                                let perEnvelopeSpeed = 1;\n                                if (!fromSlarmoosBox || beforeThree) {\n                                    updatedEnvelopes = true;\n                                    perEnvelopeSpeed = Config.envelopes[aa].speed;\n                                    aa = Config.envelopes[aa].type;\n                                }\n                                else if (beforeFour && aa >= 3)\n                                    aa++;\n                                let isTremolo2 = false;\n                                if ((fromSlarmoosBox && !beforeThree && beforeFour) || updatedEnvelopes) {\n                                    if (aa == 9)\n                                        isTremolo2 = true;\n                                    aa = slarURL3toURL4Envelope[aa];\n                                }\n                                const envelope = clamp(0, ((fromSlarmoosBox && !beforeThree || updatedEnvelopes) ? Config.newEnvelopes.length : Config.envelopes.length), aa);\n                                let pitchEnvelopeStart = 0;\n                                let pitchEnvelopeEnd = Config.maxPitch;\n                                let envelopeInverse = false;\n                                perEnvelopeSpeed = (fromSlarmoosBox && !beforeThree) ? Config.newEnvelopes[envelope].speed : perEnvelopeSpeed;\n                                let perEnvelopeLowerBound = 0;\n                                let perEnvelopeUpperBound = 1;\n                                let steps = 2;\n                                let seed = 2;\n                                let waveform = 0;\n                                if (fromSlarmoosBox && !beforeFour) {\n                                    if (Config.newEnvelopes[envelope].name == \"lfo\") {\n                                        waveform = clamp(0, 7, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        if (waveform == 5 || waveform == 6) {\n                                            steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    else if (Config.newEnvelopes[envelope].name == \"random\") {\n                                        steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        seed = clamp(1, Config.randomEnvelopeSeedMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        waveform = clamp(0, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                }\n                                if (fromSlarmoosBox && !beforeThree) {\n                                    if (Config.newEnvelopes[envelope].name == \"pitch\") {\n                                        if (!instrument.isNoiseInstrument) {\n                                            let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            pitchEnvelopeStart = clamp(0, Config.maxPitch + 1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            pitchEnvelopeEnd = clamp(0, Config.maxPitch + 1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        else {\n                                            pitchEnvelopeStart = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            pitchEnvelopeEnd = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    let checkboxValues = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (fromSlarmoosBox && !beforeFive) {\n                                        envelopeDiscrete = (checkboxValues >> 1) == 1 ? true : false;\n                                    }\n                                    envelopeInverse = (checkboxValues & 1) == 1 ? true : false;\n                                    if (Config.newEnvelopes[envelope].name != \"pitch\" && Config.newEnvelopes[envelope].name != \"note size\" && Config.newEnvelopes[envelope].name != \"punch\" && Config.newEnvelopes[envelope].name != \"none\") {\n                                        perEnvelopeSpeed = Config.perEnvelopeSpeedIndices[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                                    }\n                                    perEnvelopeLowerBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                                    perEnvelopeUpperBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                                }\n                                if (!fromSlarmoosBox || beforeFour) {\n                                    if (isTremolo2) {\n                                        waveform = 0;\n                                        if (envelopeInverse) {\n                                            perEnvelopeUpperBound = Math.floor((perEnvelopeUpperBound / 2) * 10) / 10;\n                                            perEnvelopeLowerBound = Math.floor((perEnvelopeLowerBound / 2) * 10) / 10;\n                                        }\n                                        else {\n                                            perEnvelopeUpperBound = Math.floor((0.5 + (perEnvelopeUpperBound - perEnvelopeLowerBound) / 2) * 10) / 10;\n                                            perEnvelopeLowerBound = 0.5;\n                                        }\n                                    }\n                                }\n                                instrument.addEnvelope(target, index, envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, perEnvelopeSpeed, perEnvelopeLowerBound, perEnvelopeUpperBound, steps, seed, waveform, envelopeDiscrete);\n                                if (fromSlarmoosBox && beforeThree && !beforeTwo) {\n                                    let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].pitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].pitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].inverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1 ? true : false;\n                                }\n                            }\n                            let instrumentPitchEnvelopeStart = 0;\n                            let instrumentPitchEnvelopeEnd = Config.maxPitch;\n                            let instrumentEnvelopeInverse = false;\n                            if (fromSlarmoosBox && beforeTwo) {\n                                let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentPitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentPitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentEnvelopeInverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] === 1 ? true : false;\n                                for (let i = 0; i < envelopeCount; i++) {\n                                    instrument.envelopes[i].pitchEnvelopeStart = instrumentPitchEnvelopeStart;\n                                    instrument.envelopes[i].pitchEnvelopeEnd = instrumentPitchEnvelopeEnd;\n                                    instrument.envelopes[i].inverse = Config.envelopes[instrument.envelopes[i].envelope].name == \"pitch\" ? instrumentEnvelopeInverse : false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 82:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (beforeThree && fromGoldBox) {\n                            for (let o = 0; o < Config.operatorCount; o++) {\n                                const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                                const old = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (old == 3) {\n                                    instrument.operators[o].pulseWidth = 5;\n                                }\n                                else if (old == 4) {\n                                    instrument.operators[o].pulseWidth = 4;\n                                }\n                                else if (old == 5) {\n                                    instrument.operators[o].pulseWidth = 6;\n                                }\n                                instrument.operators[o].waveform = pre3To3g[old];\n                            }\n                        }\n                        else {\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                if (fromJummBox) {\n                                    const jummToG = [0, 1, 3, 2, 4, 5];\n                                    instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n                                else {\n                                    instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                if (instrument.operators[o].waveform == 2) {\n                                    instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 83:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 3) {\n                            const byteCount = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                                instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                            }\n                            instrument.spectrumWave.markCustomWaveDirty();\n                            charIndex += byteCount;\n                        }\n                        else if (instrument.type == 4) {\n                            const byteCount = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                            for (let j = 0; j < Config.drumCount; j++) {\n                                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                                    instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                                }\n                                instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                            }\n                            charIndex += byteCount;\n                        }\n                        else {\n                            throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                        }\n                    }\n                    break;\n                case 72:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const byteCount = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);\n                        const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                            instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                        }\n                        instrument.harmonicsWave.markCustomWaveDirty();\n                        charIndex += byteCount;\n                    }\n                    break;\n                case 88:\n                    {\n                        if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                            if (instrument.aliases) {\n                                instrument.distortion = 0;\n                                instrument.effects |= 1 << 3;\n                            }\n                        }\n                        else {\n                            if (fromUltraBox || fromSlarmoosBox) {\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 98:\n                    {\n                        let subStringLength;\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const barCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            subStringLength = Math.ceil(barCount * 0.5);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let i = 0; i < barCount; i++) {\n                                this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                            }\n                        }\n                        else if (beforeFive && fromBeepBox) {\n                            let neededBits = 0;\n                            while ((1 << neededBits) < this.patternsPerChannel)\n                                neededBits++;\n                            subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.barCount; i++) {\n                                    this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                                }\n                            }\n                        }\n                        else {\n                            let neededBits = 0;\n                            while ((1 << neededBits) < this.patternsPerChannel + 1)\n                                neededBits++;\n                            subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.barCount; i++) {\n                                    this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                                }\n                            }\n                        }\n                        charIndex += subStringLength;\n                    }\n                    break;\n                case 112:\n                    {\n                        let bitStringLength = 0;\n                        let channelIndex;\n                        let largerChords = !((beforeFour && fromJummBox) || fromBeepBox);\n                        let recentPitchBitLength = (largerChords ? 4 : 3);\n                        let recentPitchLength = (largerChords ? 16 : 8);\n                        if (beforeThree && fromBeepBox) {\n                            channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            charIndex++;\n                            bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            bitStringLength = bitStringLength << 6;\n                            bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            channelIndex = 0;\n                            let bitStringLengthLength = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            while (bitStringLengthLength > 0) {\n                                bitStringLength = bitStringLength << 6;\n                                bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                bitStringLengthLength--;\n                            }\n                        }\n                        const bits = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                        charIndex += bitStringLength;\n                        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n                        let songReverbChannel = -1;\n                        let songReverbInstrument = -1;\n                        let songReverbIndex = -1;\n                        const shouldCorrectTempoMods = fromJummBox;\n                        const jummboxTempoMin = 30;\n                        while (true) {\n                            const channel = this.channels[channelIndex];\n                            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                            const isModChannel = this.getChannelIsMod(channelIndex);\n                            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n                            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n                            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n                            if (isModChannel) {\n                                let jumfive = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox);\n                                const neededModInstrumentIndexBits = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                                    let instrument = channel.instruments[instrumentIndex];\n                                    for (let mod = 0; mod < Config.modCount; mod++) {\n                                        let status = bits.read(2);\n                                        switch (status) {\n                                            case 0:\n                                                instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                                instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                                break;\n                                            case 1:\n                                                instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                                instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                                break;\n                                            case 2:\n                                                instrument.modChannels[mod] = -1;\n                                                break;\n                                            case 3:\n                                                instrument.modChannels[mod] = -2;\n                                                break;\n                                        }\n                                        if (status != 3) {\n                                            instrument.modulators[mod] = bits.read(6);\n                                        }\n                                        if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\")) {\n                                            instrument.modFilterTypes[mod] = bits.read(6);\n                                        }\n                                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\") {\n                                            instrument.modEnvelopeNumbers[mod] = bits.read(6);\n                                        }\n                                        if (jumfive && instrument.modChannels[mod] >= 0) {\n                                            let forNoteFilter = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\n                                            if (instrument.modulators[mod] == 7) {\n                                                if (forNoteFilter) {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                                }\n                                                else {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                                }\n                                                instrument.modFilterTypes[mod] = 1;\n                                            }\n                                            else if (instrument.modulators[mod] == 8) {\n                                                if (forNoteFilter) {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                                }\n                                                else {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                                }\n                                                instrument.modFilterTypes[mod] = 2;\n                                            }\n                                        }\n                                        else if (jumfive) {\n                                            if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                                songReverbChannel = channelIndex;\n                                                songReverbInstrument = instrumentIndex;\n                                                songReverbIndex = mod;\n                                            }\n                                        }\n                                        if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != 15) {\n                                            this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\n                                        }\n                                    }\n                                }\n                            }\n                            const detuneScaleNotes = [];\n                            for (let j = 0; j < channel.instruments.length; j++) {\n                                detuneScaleNotes[j] = [];\n                                for (let i = 0; i < Config.modCount; i++) {\n                                    detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                                }\n                            }\n                            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                            let lastPitch = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                            const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                            const recentShapes = [];\n                            for (let i = 0; i < recentPitches.length; i++) {\n                                recentPitches[i] += octaveOffset;\n                            }\n                            for (let i = 0; i < this.patternsPerChannel; i++) {\n                                const newPattern = channel.patterns[i];\n                                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                                    newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                                    newPattern.instruments.length = 1;\n                                }\n                                else {\n                                    if (this.patternInstruments) {\n                                        const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                        for (let j = 0; j < instrumentCount; j++) {\n                                            newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                        }\n                                        newPattern.instruments.length = instrumentCount;\n                                    }\n                                    else {\n                                        newPattern.instruments[0] = 0;\n                                        newPattern.instruments.length = Config.instrumentCountMin;\n                                    }\n                                }\n                                if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                                    newPattern.notes.length = 0;\n                                    continue;\n                                }\n                                let curPart = 0;\n                                const newNotes = newPattern.notes;\n                                let noteCount = 0;\n                                while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                                    const useOldShape = bits.read(1) == 1;\n                                    let newNote = false;\n                                    let shapeIndex = 0;\n                                    if (useOldShape) {\n                                        shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                                    }\n                                    else {\n                                        newNote = bits.read(1) == 1;\n                                    }\n                                    if (!useOldShape && !newNote) {\n                                        if (isModChannel) {\n                                            const isBackwards = bits.read(1) == 1;\n                                            const restLength = bits.readPartDuration();\n                                            if (isBackwards) {\n                                                curPart -= restLength;\n                                            }\n                                            else {\n                                                curPart += restLength;\n                                            }\n                                        }\n                                        else {\n                                            const restLength = (beforeSeven && fromBeepBox)\n                                                ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                                : bits.readPartDuration();\n                                            curPart += restLength;\n                                        }\n                                    }\n                                    else {\n                                        let shape;\n                                        if (useOldShape) {\n                                            shape = recentShapes[shapeIndex];\n                                            recentShapes.splice(shapeIndex, 1);\n                                        }\n                                        else {\n                                            shape = {};\n                                            if (!largerChords) {\n                                                shape.pitchCount = 1;\n                                                while (shape.pitchCount < 4 && bits.read(1) == 1)\n                                                    shape.pitchCount++;\n                                            }\n                                            else {\n                                                if (bits.read(1) == 1) {\n                                                    shape.pitchCount = bits.read(3) + 2;\n                                                }\n                                                else {\n                                                    shape.pitchCount = 1;\n                                                }\n                                            }\n                                            shape.pinCount = bits.readPinCount();\n                                            if (fromBeepBox) {\n                                                shape.initialSize = bits.read(2) * 2;\n                                            }\n                                            else if (!isModChannel) {\n                                                shape.initialSize = bits.read(bitsPerNoteSize);\n                                            }\n                                            else {\n                                                shape.initialSize = bits.read(9);\n                                            }\n                                            shape.pins = [];\n                                            shape.length = 0;\n                                            shape.bendCount = 0;\n                                            for (let j = 0; j < shape.pinCount; j++) {\n                                                let pinObj = {};\n                                                pinObj.pitchBend = bits.read(1) == 1;\n                                                if (pinObj.pitchBend)\n                                                    shape.bendCount++;\n                                                shape.length += (beforeSeven && fromBeepBox)\n                                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                                    : bits.readPartDuration();\n                                                pinObj.time = shape.length;\n                                                if (fromBeepBox) {\n                                                    pinObj.size = bits.read(2) * 2;\n                                                }\n                                                else if (!isModChannel) {\n                                                    pinObj.size = bits.read(bitsPerNoteSize);\n                                                }\n                                                else {\n                                                    pinObj.size = bits.read(9);\n                                                }\n                                                shape.pins.push(pinObj);\n                                            }\n                                        }\n                                        recentShapes.unshift(shape);\n                                        if (recentShapes.length > 10)\n                                            recentShapes.pop();\n                                        let note;\n                                        if (newNotes.length <= noteCount) {\n                                            note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\n                                            newNotes[noteCount++] = note;\n                                        }\n                                        else {\n                                            note = newNotes[noteCount++];\n                                            note.start = curPart;\n                                            note.end = curPart + shape.length;\n                                            note.pins[0].size = shape.initialSize;\n                                        }\n                                        let pitch;\n                                        let pitchCount = 0;\n                                        const pitchBends = [];\n                                        for (let j = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                            const useOldPitch = bits.read(1) == 1;\n                                            if (!useOldPitch) {\n                                                const interval = bits.readPitchInterval();\n                                                pitch = lastPitch;\n                                                let intervalIter = interval;\n                                                while (intervalIter > 0) {\n                                                    pitch++;\n                                                    while (recentPitches.indexOf(pitch) != -1)\n                                                        pitch++;\n                                                    intervalIter--;\n                                                }\n                                                while (intervalIter < 0) {\n                                                    pitch--;\n                                                    while (recentPitches.indexOf(pitch) != -1)\n                                                        pitch--;\n                                                    intervalIter++;\n                                                }\n                                            }\n                                            else {\n                                                const pitchIndex = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                                pitch = recentPitches[pitchIndex];\n                                                recentPitches.splice(pitchIndex, 1);\n                                            }\n                                            recentPitches.unshift(pitch);\n                                            if (recentPitches.length > recentPitchLength)\n                                                recentPitches.pop();\n                                            if (j < shape.pitchCount) {\n                                                note.pitches[pitchCount++] = pitch;\n                                            }\n                                            else {\n                                                pitchBends.push(pitch);\n                                            }\n                                            if (j == shape.pitchCount - 1) {\n                                                lastPitch = note.pitches[0];\n                                            }\n                                            else {\n                                                lastPitch = pitch;\n                                            }\n                                        }\n                                        note.pitches.length = pitchCount;\n                                        pitchBends.unshift(note.pitches[0]);\n                                        const noteIsForTempoMod = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary[\"tempo\"].index;\n                                        let tempoOffset = 0;\n                                        if (shouldCorrectTempoMods && noteIsForTempoMod) {\n                                            tempoOffset = jummboxTempoMin - Config.tempoMin;\n                                        }\n                                        if (isModChannel) {\n                                            note.pins[0].size += tempoOffset;\n                                            note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                        }\n                                        let pinCount = 1;\n                                        for (const pinObj of shape.pins) {\n                                            if (pinObj.pitchBend)\n                                                pitchBends.shift();\n                                            const interval = pitchBends[0] - note.pitches[0];\n                                            if (note.pins.length <= pinCount) {\n                                                if (isModChannel) {\n                                                    note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);\n                                                }\n                                                else {\n                                                    note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                                }\n                                            }\n                                            else {\n                                                const pin = note.pins[pinCount++];\n                                                pin.interval = interval;\n                                                pin.time = pinObj.time;\n                                                if (isModChannel) {\n                                                    pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;\n                                                }\n                                                else {\n                                                    pin.size = pinObj.size;\n                                                }\n                                            }\n                                        }\n                                        note.pins.length = pinCount;\n                                        if (note.start == 0) {\n                                            if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {\n                                                note.continuesLastPattern = (bits.read(1) == 1);\n                                            }\n                                            else {\n                                                if ((beforeFour && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                                    note.continuesLastPattern = false;\n                                                }\n                                                else {\n                                                    note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                                }\n                                            }\n                                        }\n                                        curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                                    }\n                                }\n                                newNotes.length = noteCount;\n                            }\n                            if (beforeThree && fromBeepBox) {\n                                break;\n                            }\n                            else {\n                                channelIndex++;\n                                if (channelIndex >= this.getChannelCount())\n                                    break;\n                            }\n                        }\n                        if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                            for (let channelIndex = 0; channelIndex < this.channels.length; channelIndex++) {\n                                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                                    const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                                    if (effectsIncludeReverb(instrument.effects)) {\n                                        instrument.reverb = Config.reverbRange - 1;\n                                    }\n                                    if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                        const patternIndex = this.channels[channelIndex].bars[0];\n                                        if (patternIndex > 0) {\n                                            const pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                            let lowestPart = 6;\n                                            for (const note of pattern.notes) {\n                                                if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                                    lowestPart = Math.min(lowestPart, note.start);\n                                                }\n                                            }\n                                            if (lowestPart > 0) {\n                                                pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                            }\n                                        }\n                                        else {\n                                            if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                                const pattern = new Pattern();\n                                                this.channels[channelIndex].patterns.push(pattern);\n                                                this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                                if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                                    for (let chn = 0; chn < this.channels.length; chn++) {\n                                                        if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                            this.channels[chn].patterns.push(new Pattern());\n                                                        }\n                                                    }\n                                                    this.patternsPerChannel++;\n                                                }\n                                                pattern.instruments.length = 1;\n                                                pattern.instruments[0] = songReverbInstrument;\n                                                pattern.notes.length = 0;\n                                                pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    {\n                        throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(0, charIndex));\n                    }\n                    break;\n            }\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n    static _isProperUrl(string) {\n        try {\n            if (OFFLINE) {\n                return Boolean(string);\n            }\n            else {\n                return Boolean(new URL(string));\n            }\n        }\n        catch (x) {\n            return false;\n        }\n    }\n    static _parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax) {\n        const defaultIndex = 0;\n        const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;\n        const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;\n        const customSampleUrlIndex = customSampleUrls.length;\n        customSampleUrls.push(url);\n        const chipWaveIndex = Config.chipWaves.length;\n        let urlSliced = url;\n        let customSampleRate = 44100;\n        let isCustomPercussive = false;\n        let customRootKey = 60;\n        let presetIsUsingAdvancedLoopControls = false;\n        let presetChipWaveLoopStart = null;\n        let presetChipWaveLoopEnd = null;\n        let presetChipWaveStartOffset = null;\n        let presetChipWaveLoopMode = null;\n        let presetChipWavePlayBackwards = false;\n        let parsedSampleOptions = false;\n        let optionsStartIndex = url.indexOf(\"!\");\n        let optionsEndIndex = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode = rawOption.charAt(0);\n                    const optionData = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    }\n                    else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    }\n                    else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    }\n                    else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n        let parsedUrl = null;\n        if (Song._isProperUrl(urlSliced)) {\n            if (OFFLINE) {\n                parsedUrl = urlSliced;\n            }\n            else {\n                parsedUrl = new URL(urlSliced);\n            }\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    urlSliced = url.replaceAll(\"@\", \"\");\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    isCustomPercussive = true;\n                }\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                }\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\n                }\n            }\n        }\n        if (parsedUrl != null) {\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions = [];\n            if (customSampleRate !== 44100)\n                namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60)\n                namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive)\n                namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null)\n                    namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null)\n                    namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null)\n                    namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null)\n                    namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards)\n                    namedOptions.push(\"e\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n            let name;\n            if (OFFLINE) {\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            else {\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            const expression = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset = {\n                index: 0,\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n        return true;\n    }\n    static _restoreChipWaveListToDefault() {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n    static _clearSamples() {\n        EditorConfig.customSamples = null;\n        Song._restoreChipWaveListToDefault();\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n    }\n    toJsonObject(enableIntro = true, loopCount = 1, enableOutro = true) {\n        const channelArray = [];\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const instrumentArray = [];\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n            const patternArray = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n            const sequenceArray = [];\n            if (enableIntro)\n                for (let i = 0; i < this.loopStart; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            for (let l = 0; l < loopCount; l++)\n                for (let i = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            if (enableOutro)\n                for (let i = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            const channelObject = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n        const result = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestSlarmoosBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            \"songEq\": this.eqFilter.toJsonObject(),\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            result[\"songEq\" + i] = this.eqSubFilters[i];\n        }\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n        return result;\n    }\n    fromJsonObject(jsonObject, jsonFormat = \"auto\") {\n        this.initToDefault(true);\n        if (!jsonObject)\n            return;\n        if (jsonFormat == \"auto\") {\n            if (jsonObject[\"format\"] == \"BeepBox\") {\n                if (jsonObject[\"riff\"] != undefined) {\n                    jsonFormat = \"modbox\";\n                }\n                if (jsonObject[\"masterGain\"] != undefined) {\n                    jsonFormat = \"jummbox\";\n                }\n            }\n        }\n        const format = (jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat).toLowerCase();\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                Config.willReloadForCustomSamples = true;\n                Song._restoreChipWaveListToDefault();\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls = [];\n                const customSamplePresets = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    else {\n                        const parseOldSyntax = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        }\n        else {\n            let shouldLoadLegacySamples = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects = channelObject[\"instruments\"];\n                        for (let i = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                continue;\n                            }\n                            const waveName = instrumentObject[\"wave\"];\n                            const names = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            const oldNames = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            const veryOldNames = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            }\n                            else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            }\n                            else if (veryOldNames.includes(waveName)) {\n                                if ((waveName === \"trumpet\" || waveName === \"flute\") && (format != \"paandorasbox\")) {\n                                }\n                                else {\n                                    shouldLoadLegacySamples = true;\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n                Song._restoreChipWaveListToDefault();\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            }\n            else {\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n        this.scale = 0;\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames = {\n                \"romani :)\": \"double harmonic :)\",\n                \"romani :(\": \"double harmonic :(\",\n                \"dbl harmonic :)\": \"double harmonic :)\",\n                \"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1)\n                this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            }\n            else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key = jsonObject[\"key\"];\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                }\n                else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                }\n                else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                }\n                else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                }\n                else {\n                    const letter = key.charAt(0).toUpperCase();\n                    const symbol = key.charAt(1).toLowerCase();\n                    const letterMap = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\n                    let index = letterMap[letter];\n                    const offset = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined)\n                            index += offset;\n                        if (index < 0)\n                            index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n        let legacyGlobalReverb = 0;\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n        let importedPartsPerBeat = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1;\n            }\n        }\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        }\n        else {\n            this.masterGain = 1.0;\n        }\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        }\n        else {\n            this.limitThreshold = 1.0;\n        }\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        }\n        else {\n            this.compressionThreshold = 1.0;\n        }\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        }\n        else {\n            this.limitRise = 4000.0;\n        }\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        }\n        else {\n            this.limitDecay = 4.0;\n        }\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        }\n        else {\n            this.limitRatio = 1.0;\n        }\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        }\n        else {\n            this.compressionRatio = 1.0;\n        }\n        if (jsonObject[\"songEq\"] != undefined) {\n            this.eqFilter.fromJsonObject(jsonObject[\"songEq\"]);\n        }\n        else {\n            this.eqFilter.reset();\n        }\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            if (jsonObject[\"songEq\" + i]) {\n                this.eqSubFilters[i] = jsonObject[\"songEq\" + i];\n            }\n            else {\n                this.eqSubFilters[i] = null;\n            }\n        }\n        let maxInstruments = 1;\n        let maxPatterns = 1;\n        let maxBars = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"])\n                    maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"])\n                    maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"])\n                    maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        }\n        else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        }\n        else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n        const newPitchChannels = [];\n        const newNoiseChannels = [];\n        const newModChannels = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject = jsonObject[\"channels\"][channelIndex];\n                const channel = new Channel();\n                let isNoiseChannel = false;\n                let isModChannel = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                }\n                else {\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                }\n                else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel)\n                        channel.octave = 0;\n                }\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects = channelObject[\"instruments\"];\n                    for (let i = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel())\n                            break;\n                        const instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\n                    }\n                }\n                for (let i = 0; i < this.patternsPerChannel; i++) {\n                    const pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n                    let patternObject = undefined;\n                    if (channelObject[\"patterns\"])\n                        patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined)\n                        continue;\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n                for (let i = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n        if (newPitchChannels.length > Config.pitchChannelCountMax)\n            newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax)\n            newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax)\n            newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n    getPattern(channelIndex, bar) {\n        if (bar < 0 || bar >= this.barCount)\n            return null;\n        const patternIndex = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0)\n            return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n    getBeatsPerMinute() {\n        return this.tempo;\n    }\n    static getNeededBits(maxValue) {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n    restoreLimiterDefaults() {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\nSong._format = Config.jsonFormat;\nSong._oldestBeepboxVersion = 2;\nSong._latestBeepboxVersion = 9;\nSong._oldestJummBoxVersion = 1;\nSong._latestJummBoxVersion = 6;\nSong._oldestGoldBoxVersion = 1;\nSong._latestGoldBoxVersion = 4;\nSong._oldestUltraBoxVersion = 1;\nSong._latestUltraBoxVersion = 5;\nSong._oldestSlarmoosBoxVersion = 1;\nSong._latestSlarmoosBoxVersion = 5;\nSong._variant = 0x73;\nclass PickedString {\n    constructor() {\n        this.delayLine = null;\n        this.allPassG = 0.0;\n        this.allPassGDelta = 0.0;\n        this.sustainFilterA1 = 0.0;\n        this.sustainFilterA1Delta = 0.0;\n        this.sustainFilterA2 = 0.0;\n        this.sustainFilterA2Delta = 0.0;\n        this.sustainFilterB0 = 0.0;\n        this.sustainFilterB0Delta = 0.0;\n        this.sustainFilterB1 = 0.0;\n        this.sustainFilterB1Delta = 0.0;\n        this.sustainFilterB2 = 0.0;\n        this.sustainFilterB2Delta = 0.0;\n        this.reset();\n    }\n    reset() {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n        this.sustainFilterPrevOutput2 = 0.0;\n        this.sustainFilterPrevInput1 = 0.0;\n        this.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n    update(synth, instrumentState, tone, stringIndex, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, sustainType) {\n        const allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n        const prevDelayLength = this.prevDelayLength;\n        const phaseDeltaStart = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n        const radiansPerSampleStart = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd = Math.PI * 2.0 * phaseDeltaEnd;\n        const centerHarmonicStart = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd = radiansPerSampleEnd * 2.0;\n        const allPassRadiansStart = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n        const decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n        const decayCurveEnd = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;\n        const register = sustainType == 1 ? 0.25 : 0.0;\n        const registerShelfCenter = 15.6;\n        const registerLowpassCenter = 3.0 * synth.samplesPerSecond / 48000;\n        const decayRateStart = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const decayRateEnd = Math.pow(0.5, decayCurveEnd * Math.pow(shelfRadians / (radiansPerSampleEnd * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const expressionDecayStart = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd = Math.pow(decayRateEnd, 0.002);\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart = Synth.tempFilterStartCoefficients.b[0];\n        const allPassPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd = Synth.tempFilterEndCoefficients.b[0];\n        const allPassPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n        const brightnessType = sustainType == 0 ? 0 : 1;\n        if (brightnessType == 0) {\n            const shelfGainStart = Math.pow(decayRateStart, Config.stringDecayRate);\n            const shelfGainEnd = Math.pow(decayRateEnd, Config.stringDecayRate);\n            Synth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n            Synth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n        }\n        else {\n            const cornerHardness = Math.pow(brightnessType == 1 ? 0.0 : 1.0, 0.25);\n            const lowpass1stOrderCutoffRadiansStart = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n            const lowpass1stOrderCutoffRadiansEnd = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd, .5);\n            const lowpass2ndOrderCutoffRadiansStart = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderCutoffRadiansEnd = lowpass1stOrderCutoffRadiansEnd * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderGainStart = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            const lowpass2ndOrderGainEnd = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            Synth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n            Synth.tempFilterEndCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd), lowpass2ndOrderGainEnd);\n        }\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const sustainFilterA1Start = Synth.tempFilterStartCoefficients.a[1];\n        const sustainFilterA2Start = Synth.tempFilterStartCoefficients.a[2];\n        const sustainFilterB0Start = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n        const sustainFilterB1Start = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n        const sustainFilterB2Start = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n        const sustainFilterPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const sustainFilterA1End = Synth.tempFilterEndCoefficients.a[1];\n        const sustainFilterA2End = Synth.tempFilterEndCoefficients.a[2];\n        const sustainFilterB0End = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n        const sustainFilterB1End = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n        const sustainFilterB2End = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n        const sustainFilterPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n        const periodLengthStart = 1.0 / phaseDeltaStart;\n        const periodLengthEnd = 1.0 / phaseDeltaEnd;\n        const minBufferLength = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n        const delayLength = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n        const delayLengthEnd = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n        this.prevDelayLength = delayLength;\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n        this.allPassG = allPassGStart;\n        this.sustainFilterA1 = sustainFilterA1Start;\n        this.sustainFilterA2 = sustainFilterA2Start;\n        this.sustainFilterB0 = sustainFilterB0Start;\n        this.sustainFilterB1 = sustainFilterB1Start;\n        this.sustainFilterB2 = sustainFilterB2Start;\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n        this.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n        this.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n        this.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n        this.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n        this.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n        const pitchChanged = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n        const reinitializeImpulse = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            const likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                const oldDelayBufferMask = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine = this.delayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        if (reinitializeImpulse) {\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n            this.sustainFilterPrevOutput2 = 0.0;\n            this.sustainFilterPrevInput1 = 0.0;\n            this.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n            const startImpulseFrom = -delayLength;\n            const startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt;\n            for (let i = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n            const impulseWave = instrumentState.wave;\n            const impulseWaveLength = impulseWave.length - 1;\n            const impulsePhaseDelta = impulseWaveLength / periodLengthStart;\n            const fadeDuration = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample = Math.ceil(startImpulseFrom);\n            const stopImpulseAt = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample = stopImpulseAt;\n            let impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral = 0.0;\n            for (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt = impulsePhase | 0;\n                const index = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral = impulseWave[index];\n                const phaseRatio = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade = fadeIn * fadeOut;\n                const curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade);\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\nclass EnvelopeComputer {\n    constructor() {\n        this.noteSecondsStart = [];\n        this.noteSecondsStartUnscaled = 0.0;\n        this.noteSecondsEnd = [];\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksStart = 0.0;\n        this.noteTicksEnd = 0.0;\n        this.noteSizeStart = Config.noteSizeMax;\n        this.noteSizeEnd = Config.noteSizeMax;\n        this.prevNoteSize = Config.noteSizeMax;\n        this.nextNoteSize = Config.noteSizeMax;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsStart = [];\n        this.prevNoteSecondsStartUnscaled = 0.0;\n        this.prevNoteSecondsEnd = [];\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksStart = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this.tickTimeEnd = [];\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.prevSlideStart = false;\n        this.prevSlideEnd = false;\n        this.nextSlideStart = false;\n        this.nextSlideEnd = false;\n        this.prevSlideRatioStart = 0.0;\n        this.prevSlideRatioEnd = 0.0;\n        this.nextSlideRatioStart = 0.0;\n        this.nextSlideRatioEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n        this.envelopeStarts = [];\n        this.envelopeEnds = [];\n        this._modifiedEnvelopeIndices = [];\n        this._modifiedEnvelopeCount = 0;\n        this.lowpassCutoffDecayVolumeCompensation = 1.0;\n        const length = 56;\n        for (let i = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n        this.reset();\n    }\n    reset() {\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsEnd[envelopeIndex] = 0.0;\n            this.prevNoteSecondsEnd[envelopeIndex] = 0.0;\n        }\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n    }\n    computeEnvelopes(instrument, currentPart, tickTimeStart, tickTimeStartReal, secondsPerTick, tone, timeScale, instrumentState, synth, channelIndex, instrumentIndex) {\n        const secondsPerTickUnscaled = secondsPerTick;\n        const transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEndUnscaled = 0.0;\n            this.noteTicksEnd = 0.0;\n            for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n                this.prevNoteSecondsEnd[envelopeIndex] = this.noteSecondsEnd[envelopeIndex];\n                this.noteSecondsEnd[envelopeIndex] = 0.0;\n            }\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            }\n            else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd = [];\n        const tickTimeEndReal = tickTimeStartReal + 1.0;\n        const noteSecondsStart = [];\n        const noteSecondsStartUnscaled = this.noteSecondsEndUnscaled;\n        const noteSecondsEnd = [];\n        const noteSecondsEndUnscaled = noteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const noteTicksStart = this.noteTicksEnd;\n        const noteTicksEnd = noteTicksStart + 1.0;\n        const prevNoteSecondsStart = [];\n        const prevNoteSecondsEnd = [];\n        const prevNoteSecondsStartUnscaled = this.prevNoteSecondsEndUnscaled;\n        const prevNoteSecondsEndUnscaled = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const prevNoteTicksStart = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd = prevNoteTicksStart + 1.0;\n        const beatsPerTick = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart = [];\n        const beatTimeEnd = [];\n        let noteSizeStart = this._noteSizeFinal;\n        let noteSizeEnd = this._noteSizeFinal;\n        let prevNoteSize = this._prevNoteSizeFinal;\n        let nextNoteSize = 0;\n        let prevSlideStart = false;\n        let prevSlideEnd = false;\n        let nextSlideStart = false;\n        let nextSlideEnd = false;\n        let prevSlideRatioStart = 0.0;\n        let prevSlideRatioEnd = 0.0;\n        let nextSlideRatioStart = 0.0;\n        let nextSlideRatioEnd = 0.0;\n        if (tone == null) {\n            this.startPinTickAbsolute = null;\n            this.startPinTickDefaultPitch = null;\n        }\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex = tone.note.getEndPinIndex(currentPart);\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            if (this.startPinTickAbsolute == null || (!(transition.continues || transition.slides)) && tone.passedEndOfNote)\n                this.startPinTickAbsolute = startPinTick + synth.computeTicksSinceStart(true);\n            if (this.startPinTickDefaultPitch == null || tone.passedEndOfNote)\n                this.startPinTickDefaultPitch = this.getPitchValue(instrument, tone, instrumentState, false);\n            if (!tone.passedEndOfNote)\n                this.startPinTickPitch = this.getPitchValue(instrument, tone, instrumentState, true);\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n            if (transition.slides) {\n                const noteStartTick = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks = noteEndTick - noteStartTick;\n                const maximumSlideTicks = noteLengthTicks * 0.5;\n                const slideTicks = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size;\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n        let lowpassCutoffDecayVolumeCompensation = 1.0;\n        let usedNoteSize = false;\n        for (let envelopeIndex = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget;\n            let targetIndex;\n            let envelope;\n            let inverse = false;\n            let isDiscrete = false;\n            let perEnvelopeSpeed = 1;\n            let globalEnvelopeSpeed = 1;\n            let envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n            let perEnvelopeLowerBound = 0;\n            let perEnvelopeUpperBound = 1;\n            let timeSinceStart = 0;\n            let steps = 2;\n            let seed = 2;\n            let waveform = 0;\n            let startPinTickAbsolute = this.startPinTickAbsolute || 0.0;\n            let defaultPitch = this.startPinTickDefaultPitch || 0.0;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize)\n                    break;\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.newEnvelopes.dictionary[\"note size\"];\n            }\n            else {\n                let envelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.newEnvelopes[envelopeSettings.envelope];\n                inverse = instrument.envelopes[envelopeIndex].inverse;\n                isDiscrete = instrument.envelopes[envelopeIndex].discrete;\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                globalEnvelopeSpeed = Math.pow(instrument.envelopeSpeed, 2) / 144;\n                envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n                perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].perEnvelopeLowerBound;\n                perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].perEnvelopeUpperBound;\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope lower bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound != null) {\n                    perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound;\n                }\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope upper bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound != null) {\n                    perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound;\n                }\n                if (!(perEnvelopeLowerBound <= perEnvelopeUpperBound)) {\n                    perEnvelopeLowerBound = 0;\n                    perEnvelopeUpperBound = 1;\n                }\n                timeSinceStart = synth.computeTicksSinceStart();\n                steps = instrument.envelopes[envelopeIndex].steps;\n                seed = instrument.envelopes[envelopeIndex].seed;\n                if (instrument.envelopes[envelopeIndex].waveform >= (envelope.name == \"lfo\" ? 7 : 4)) {\n                    instrument.envelopes[envelopeIndex].waveform = 0;\n                }\n                waveform = instrument.envelopes[envelopeIndex].waveform;\n                if (!timeScale[envelopeIndex])\n                    timeScale[envelopeIndex] = 0;\n                const secondsPerTickScaled = secondsPerTick * timeScale[envelopeIndex];\n                if (!tickTimeStart[envelopeIndex])\n                    tickTimeStart[envelopeIndex] = 0;\n                tickTimeEnd[envelopeIndex] = tickTimeStart[envelopeIndex] ? tickTimeStart[envelopeIndex] + timeScale[envelopeIndex] : timeScale[envelopeIndex];\n                noteSecondsStart[envelopeIndex] = this.noteSecondsEnd[envelopeIndex] ? this.noteSecondsEnd[envelopeIndex] : 0;\n                prevNoteSecondsStart[envelopeIndex] = this.prevNoteSecondsEnd[envelopeIndex] ? this.prevNoteSecondsEnd[envelopeIndex] : 0;\n                noteSecondsEnd[envelopeIndex] = noteSecondsStart[envelopeIndex] ? noteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsStart[envelopeIndex] ? prevNoteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                beatTimeStart[envelopeIndex] = tickTimeStart[envelopeIndex] ? beatsPerTick * tickTimeStart[envelopeIndex] : beatsPerTick;\n                beatTimeEnd[envelopeIndex] = tickTimeEnd[envelopeIndex] ? beatsPerTick * tickTimeEnd[envelopeIndex] : beatsPerTick;\n                if (envelope.type == 1)\n                    usedNoteSize = true;\n            }\n            const pitch = (envelope.type == 2) ? this.computePitchEnvelope(instrument, envelopeIndex, (this.startPinTickPitch || this.getPitchValue(instrument, tone, instrumentState, true))) : 0;\n            if (automationTarget.computeIndex != null) {\n                const computeIndex = automationTarget.computeIndex + targetIndex;\n                let envelopeStart = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsStartUnscaled, noteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, noteSizeStart, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                if (prevSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsStartUnscaled, prevNoteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeStart[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd = envelopeStart;\n                if (isDiscrete == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsEndUnscaled, noteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, noteSizeEnd, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    if (prevSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsEndUnscaled, prevNoteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeEnd[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n                if (automationTarget.isFilter) {\n                    const filterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == 0) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed));\n                    }\n                }\n            }\n        }\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsStart[envelopeIndex] = noteSecondsStart[envelopeIndex];\n            this.noteSecondsEnd[envelopeIndex] = noteSecondsEnd[envelopeIndex];\n            this.prevNoteSecondsStart[envelopeIndex] = prevNoteSecondsStart[envelopeIndex];\n            this.prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsEnd[envelopeIndex];\n        }\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n    clearEnvelopes() {\n        for (let envelopeIndex = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n    static computeEnvelope(envelope, perEnvelopeSpeed, globalEnvelopeSpeed, unspedTime, time, beats, timeSinceStart, noteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, isDrumset = false, steps, seed, waveform, defaultPitch, notePinStart) {\n        const envelopeSpeed = isDrumset ? envelope.speed : 1;\n        const boundAdjust = (perEnvelopeUpperBound - perEnvelopeLowerBound);\n        switch (envelope.type) {\n            case 0: return perEnvelopeUpperBound;\n            case 1:\n                if (!inverse) {\n                    return Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust) + perEnvelopeLowerBound;\n                }\n                else {\n                    return perEnvelopeUpperBound - Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust);\n                }\n            case 2:\n                return pitch;\n            case 3:\n                const hashMax = 0xffffffff;\n                const step = steps;\n                switch (waveform) {\n                    case 0:\n                        if (step <= 1)\n                            return 1;\n                        const timeHash = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(timeHash * step / (hashMax + 1)) / step;\n                        }\n                        else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(timeHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case 1:\n                        const pitchHash = xxHash32(defaultPitch + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * pitchHash / (hashMax + 1);\n                        }\n                        else {\n                            return boundAdjust * pitchHash / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    case 2:\n                        if (step <= 1)\n                            return 1;\n                        const noteHash = xxHash32(notePinStart + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(noteHash * step / (hashMax + 1)) / step;\n                        }\n                        else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(noteHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case 3:\n                        const timeHashA = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        const timeHashB = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed + 256) / (256))) + \"\", seed);\n                        const weightedAverage = timeHashA * (1 - ((timeSinceStart * perEnvelopeSpeed) / (256)) % 1) + timeHashB * (((timeSinceStart * perEnvelopeSpeed) / (256)) % 1);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * weightedAverage / (hashMax + 1);\n                        }\n                        else {\n                            return boundAdjust * weightedAverage / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case 6:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (1.0 / (1.0 + time * envelopeSpeed));\n                }\n                else {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n            case 7:\n                if (inverse) {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n                else {\n                    return perEnvelopeUpperBound - boundAdjust / (1.0 + time * envelopeSpeed);\n                }\n            case 8:\n                switch (waveform) {\n                    case 0:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            return (perEnvelopeUpperBound / 2) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                    case 1:\n                        if (inverse) {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeUpperBound : perEnvelopeLowerBound;\n                        }\n                        else {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeLowerBound : perEnvelopeUpperBound;\n                        }\n                    case 2:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) - (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            return (perEnvelopeUpperBound / 2) + (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                    case 3:\n                        if (inverse) {\n                            return perEnvelopeUpperBound - (beats * envelopeSpeed) % 1 * boundAdjust;\n                        }\n                        else {\n                            return (beats * envelopeSpeed) % 1 * boundAdjust + perEnvelopeLowerBound;\n                        }\n                    case 4:\n                        let trap = 0;\n                        if (inverse) {\n                            trap = (perEnvelopeUpperBound / 2) - (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            trap = (perEnvelopeUpperBound / 2) + (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        return Math.max(perEnvelopeLowerBound, Math.min(perEnvelopeUpperBound, trap));\n                    case 5:\n                        if (steps <= 1)\n                            return 1;\n                        let saw = (beats * envelopeSpeed) % 1;\n                        if (inverse) {\n                            return perEnvelopeUpperBound - Math.floor(saw * steps) * boundAdjust / (steps - 1);\n                        }\n                        else {\n                            return Math.floor(saw * steps) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                        }\n                    case 6:\n                        if (steps <= 1)\n                            return 1;\n                        let tri = 0.5 + (inverse ? -1 : 1) * (1 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed));\n                        return Math.round(tri * (steps - 1)) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case 9:\n                if (inverse) {\n                    return (perEnvelopeUpperBound / 4) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 + (perEnvelopeLowerBound / 4);\n                }\n                else {\n                    return 0.5 + (perEnvelopeUpperBound / 4) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 - (perEnvelopeLowerBound / 4);\n                }\n            case 4:\n                if (inverse) {\n                    return Math.max(0, perEnvelopeUpperBound + 1.0 - Math.max(1.0 - perEnvelopeLowerBound, 1.0 - perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0));\n                }\n                else {\n                    return Math.max(1.0 + perEnvelopeLowerBound, 1.0 + perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0);\n                }\n            case 5:\n                const attack = 0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed);\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed));\n                }\n                else {\n                    return boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed)) + perEnvelopeLowerBound;\n                }\n            case 10:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * Math.pow(2, -envelopeSpeed * time);\n                }\n                else {\n                    return boundAdjust * Math.pow(2, -envelopeSpeed * time) + perEnvelopeLowerBound;\n                }\n            case 14:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed)));\n                }\n                else {\n                    return boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed))) + perEnvelopeLowerBound;\n                }\n            case 11:\n                let temp = 0.5 - Math.cos(beats * envelopeSpeed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelopeSpeed - (temp / (1.5 / envelopeSpeed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * temp;\n                }\n                else {\n                    return boundAdjust * temp + perEnvelopeLowerBound;\n                }\n            case 12: {\n                let lin = (1.0 - (time / (16 / envelopeSpeed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                }\n                else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case 13: {\n                let lin = (time / (16 / envelopeSpeed));\n                lin = lin < 1.0 ? lin : 1.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                }\n                else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case 15: {\n                if (inverse) {\n                    return Math.min(Math.max(perEnvelopeLowerBound, perEnvelopeUpperBound - boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0))), perEnvelopeUpperBound);\n                }\n                else {\n                    return Math.max(perEnvelopeLowerBound, boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0)) + perEnvelopeLowerBound);\n                }\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n    }\n    getPitchValue(instrument, tone, instrumentState, calculateBends = true) {\n        if (tone && tone.pitchCount >= 1) {\n            const chord = instrument.getChord();\n            const arpeggiates = chord.arpeggiates;\n            const monophonic = chord.name == \"monophonic\";\n            const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n            const tonePitch = tone.pitches[arpeggiates ? getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio) : monophonic ? instrument.monoChordTone : 0];\n            if (calculateBends) {\n                return tone.lastInterval != tonePitch ? tonePitch + tone.lastInterval : tonePitch;\n            }\n            else {\n                return tonePitch;\n            }\n        }\n        return 0;\n    }\n    computePitchEnvelope(instrument, index, pitch = 0) {\n        let startNote = 0;\n        let endNote = Config.maxPitch;\n        let inverse = false;\n        let envelopeLowerBound = 0;\n        let envelopeUpperBound = 1;\n        if (instrument.isNoiseInstrument) {\n            endNote = Config.drumCount - 1;\n        }\n        if (index < instrument.envelopeCount && index !== -2) {\n            startNote = instrument.envelopes[index].pitchEnvelopeStart;\n            endNote = instrument.envelopes[index].pitchEnvelopeEnd;\n            inverse = instrument.envelopes[index].inverse;\n            envelopeLowerBound = instrument.envelopes[index].perEnvelopeLowerBound;\n            envelopeUpperBound = instrument.envelopes[index].perEnvelopeUpperBound;\n        }\n        if (startNote > endNote) {\n            startNote = 0;\n            endNote = instrument.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        }\n        const range = endNote - startNote + 1;\n        if (!inverse) {\n            if (pitch <= startNote) {\n                return envelopeLowerBound;\n            }\n            else if (pitch >= endNote) {\n                return envelopeUpperBound;\n            }\n            else {\n                return (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range + envelopeLowerBound;\n            }\n        }\n        else {\n            if (pitch <= startNote) {\n                return envelopeUpperBound;\n            }\n            else if (pitch >= endNote) {\n                return envelopeLowerBound;\n            }\n            else {\n                return envelopeUpperBound - (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range;\n            }\n        }\n    }\n    static getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed = 1) {\n        if (envelope.type == 10)\n            return 1.25 + 0.025 * perEnvelopeSpeed;\n        if (envelope.type == 6)\n            return 1.0 + 0.02 * perEnvelopeSpeed;\n        return 1.0;\n    }\n    computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd) {\n        const pitch = 1;\n        function computeDrumsetEnvelope(unspedTime, time, beats, noteSize) {\n            return EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 1, 1, unspedTime, time, beats, 0, noteSize, pitch, false, 0, 1, true, 2, 2, 0, pitch, 0);\n        }\n        let drumsetFilterEnvelopeStart = computeDrumsetEnvelope(this.noteSecondsStartUnscaled, this.noteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.noteSizeStart);\n        if (this.prevSlideStart) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsStartUnscaled, this.prevNoteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.prevNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.prevSlideRatioStart;\n        }\n        if (this.nextSlideStart) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeStart, this.nextNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.nextSlideRatioStart;\n        }\n        let drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeStart;\n        drumsetFilterEnvelopeEnd = computeDrumsetEnvelope(this.noteSecondsEndUnscaled, this.noteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.noteSizeEnd);\n        if (this.prevSlideEnd) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsEndUnscaled, this.prevNoteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.prevNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.prevSlideRatioEnd;\n        }\n        if (this.nextSlideEnd) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeEnd, this.nextNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.nextSlideRatioEnd;\n        }\n        this.drumsetFilterEnvelopeStart = drumsetFilterEnvelopeStart;\n        this.drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeEnd;\n    }\n}\nclass Tone {\n    constructor() {\n        this.pitches = Array(Config.maxChordSize + 2).fill(0);\n        this.pitchCount = 0;\n        this.chordSize = 0;\n        this.drumsetPitch = null;\n        this.note = null;\n        this.prevNote = null;\n        this.nextNote = null;\n        this.prevNotePitchIndex = 0;\n        this.nextNotePitchIndex = 0;\n        this.freshlyAllocated = true;\n        this.atNoteStart = false;\n        this.isOnLastTick = false;\n        this.passedEndOfNote = false;\n        this.forceContinueAtStart = false;\n        this.forceContinueAtEnd = false;\n        this.noteStartPart = 0;\n        this.noteEndPart = 0;\n        this.ticksSinceReleased = 0;\n        this.liveInputSamplesHeld = 0;\n        this.lastInterval = 0;\n        this.stringSustainStart = 0;\n        this.stringSustainEnd = 0;\n        this.noiseSamples = [];\n        this.phases = [];\n        this.operatorWaves = [];\n        this.phaseDeltas = [];\n        this.directions = [];\n        this.chipWaveCompletions = [];\n        this.chipWavePrevWaves = [];\n        this.chipWaveCompletionsLastWave = [];\n        this.phaseDeltaScales = [];\n        this.expression = 0.0;\n        this.expressionDelta = 0.0;\n        this.operatorExpressions = [];\n        this.operatorExpressionDeltas = [];\n        this.prevPitchExpressions = Array(Config.maxPitchOrOperatorCount).fill(null);\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.pulseWidth = 0.0;\n        this.pulseWidthDelta = 0.0;\n        this.decimalOffset = 0.0;\n        this.supersawDynamism = 0.0;\n        this.supersawDynamismDelta = 0.0;\n        this.supersawUnisonDetunes = [];\n        this.supersawShape = 0.0;\n        this.supersawShapeDelta = 0.0;\n        this.supersawDelayLength = 0.0;\n        this.supersawDelayLengthDelta = 0.0;\n        this.supersawDelayLine = null;\n        this.supersawDelayIndex = -1;\n        this.supersawPrevPhaseDelta = null;\n        this.pickedStrings = [];\n        this.noteFilters = [];\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.specialIntervalExpressionMult = 1.0;\n        this.feedbackOutputs = [];\n        this.feedbackMult = 0.0;\n        this.feedbackDelta = 0.0;\n        this.stereoVolumeLStart = 0.0;\n        this.stereoVolumeRStart = 0.0;\n        this.stereoVolumeLDelta = 0.0;\n        this.stereoVolumeRDelta = 0.0;\n        this.stereoDelayStart = 0.0;\n        this.stereoDelayEnd = 0.0;\n        this.stereoDelayDelta = 0.0;\n        this.customVolumeStart = 0.0;\n        this.customVolumeEnd = 0.0;\n        this.filterResonanceStart = 0.0;\n        this.filterResonanceDelta = 0.0;\n        this.isFirstOrder = false;\n        this.envelopeComputer = new EnvelopeComputer();\n        this.reset();\n    }\n    reset() {\n        for (let i = 0; i < Config.unisonVoicesMax; i++) {\n            this.noiseSamples[i] = 0.0;\n        }\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n            this.directions[i] = 1;\n            this.chipWaveCompletions[i] = 0;\n            this.chipWavePrevWaves[i] = 0;\n            this.chipWaveCompletionsLastWave[i] = 0;\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i = 0; i < this.noteFilterCount; i++) {\n            this.noteFilters[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\nclass InstrumentState {\n    constructor() {\n        this.awake = false;\n        this.computed = false;\n        this.tonesAddedInThisTick = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n        this.activeTones = new Deque();\n        this.activeModTones = new Deque();\n        this.releasedTones = new Deque();\n        this.liveInputTones = new Deque();\n        this.type = 0;\n        this.synthesizer = null;\n        this.wave = null;\n        this.isUsingAdvancedLoopControls = false;\n        this.chipWaveLoopStart = 0;\n        this.chipWaveLoopEnd = 0;\n        this.chipWaveLoopMode = 0;\n        this.chipWavePlayBackwards = false;\n        this.chipWaveStartOffset = 0;\n        this.noisePitchFilterMult = 1.0;\n        this.unison = null;\n        this.unisonVoices = 1;\n        this.unisonSpread = 0.0;\n        this.unisonOffset = 0.0;\n        this.unisonExpression = 1.4;\n        this.unisonSign = 1.0;\n        this.chord = null;\n        this.effects = 0;\n        this.volumeScale = 0;\n        this.aliases = false;\n        this.arpTime = 0;\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.envelopeTime = [];\n        this.eqFilterVolume = 1.0;\n        this.eqFilterVolumeDelta = 0.0;\n        this.mixVolume = 1.0;\n        this.mixVolumeDelta = 0.0;\n        this.delayInputMult = 0.0;\n        this.delayInputMultDelta = 0.0;\n        this.granularMix = 1.0;\n        this.granularMixDelta = 0.0;\n        this.granularDelayLine = null;\n        this.granularDelayLineIndex = 0;\n        this.granularMaximumDelayTimeInSeconds = 1;\n        this.usesRandomGrainLocation = true;\n        this.granularDelayLineDirty = false;\n        this.computeGrains = true;\n        this.ringModMix = 0;\n        this.ringModMixDelta = 0;\n        this.ringModPhase = 0;\n        this.ringModPhaseDelta = 0;\n        this.ringModPhaseDeltaScale = 1.0;\n        this.ringModWaveformIndex = 0.0;\n        this.ringModPulseWidth = 0.0;\n        this.ringModHzOffset = 0.0;\n        this.ringModMixFade = 1.0;\n        this.ringModMixFadeDelta = 0;\n        this.distortion = 0.0;\n        this.distortionDelta = 0.0;\n        this.distortionDrive = 0.0;\n        this.distortionDriveDelta = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        this.bitcrusherPhaseDelta = 0.0;\n        this.bitcrusherPhaseDeltaScale = 1.0;\n        this.bitcrusherScale = 1.0;\n        this.bitcrusherScaleScale = 1.0;\n        this.bitcrusherFoldLevel = 1.0;\n        this.bitcrusherFoldLevelScale = 1.0;\n        this.eqFilters = [];\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.panningDelayLine = null;\n        this.panningDelayPos = 0;\n        this.panningVolumeL = 0.0;\n        this.panningVolumeR = 0.0;\n        this.panningVolumeDeltaL = 0.0;\n        this.panningVolumeDeltaR = 0.0;\n        this.panningOffsetL = 0.0;\n        this.panningOffsetR = 0.0;\n        this.panningOffsetDeltaL = 0.0;\n        this.panningOffsetDeltaR = 0.0;\n        this.chorusDelayLineL = null;\n        this.chorusDelayLineR = null;\n        this.chorusDelayLineDirty = false;\n        this.chorusDelayPos = 0;\n        this.chorusPhase = 0;\n        this.chorusVoiceMult = 0;\n        this.chorusVoiceMultDelta = 0;\n        this.chorusCombinedMult = 0;\n        this.chorusCombinedMultDelta = 0;\n        this.echoDelayLineL = null;\n        this.echoDelayLineR = null;\n        this.echoDelayLineDirty = false;\n        this.echoDelayPos = 0;\n        this.echoDelayOffsetStart = 0;\n        this.echoDelayOffsetEnd = null;\n        this.echoDelayOffsetRatio = 0.0;\n        this.echoDelayOffsetRatioDelta = 0.0;\n        this.echoMult = 0.0;\n        this.echoMultDelta = 0.0;\n        this.echoShelfA1 = 0.0;\n        this.echoShelfB0 = 0.0;\n        this.echoShelfB1 = 0.0;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbDelayLine = null;\n        this.reverbDelayLineDirty = false;\n        this.reverbDelayPos = 0;\n        this.reverbMult = 0.0;\n        this.reverbMultDelta = 0.0;\n        this.reverbShelfA1 = 0.0;\n        this.reverbShelfB0 = 0.0;\n        this.reverbShelfB1 = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n        this.spectrumWave = new SpectrumWaveState();\n        this.harmonicsWave = new HarmonicsWaveState();\n        this.drumsetSpectrumWaves = [];\n        this.envelopeComputer = new EnvelopeComputer();\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n        this.granularGrains = [];\n        this.granularMaximumGrains = 256;\n        for (let i = 0; i < this.granularMaximumGrains; i++) {\n            this.granularGrains.push(new Grain());\n        }\n        this.granularGrainsLength = 0;\n    }\n    allocateNecessaryBuffers(synth, instrument, samplesPerTick) {\n        if (effectsIncludePanning(instrument.effects)) {\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\n            }\n        }\n        if (effectsIncludeChorus(instrument.effects)) {\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n            }\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n            }\n        }\n        if (effectsIncludeEcho(instrument.effects)) {\n            this.allocateEchoBuffers(samplesPerTick, instrument.echoDelay);\n        }\n        if (effectsIncludeReverb(instrument.effects)) {\n            if (this.reverbDelayLine == null) {\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n            }\n        }\n        if (effectsIncludeGranular(instrument.effects)) {\n            const granularDelayLineSizeInMilliseconds = 2500;\n            const granularDelayLineSizeInSeconds = granularDelayLineSizeInMilliseconds / 1000;\n            this.granularMaximumDelayTimeInSeconds = granularDelayLineSizeInSeconds;\n            const granularDelayLineSizeInSamples = Synth.fittingPowerOfTwo(Math.floor(granularDelayLineSizeInSeconds * synth.samplesPerSecond));\n            if (this.granularDelayLine == null || this.granularDelayLine.length != granularDelayLineSizeInSamples) {\n                this.granularDelayLine = new Float32Array(granularDelayLineSizeInSamples);\n                this.granularDelayLineIndex = 0;\n            }\n            const oldGrainsLength = this.granularGrains.length;\n            if (this.granularMaximumGrains > oldGrainsLength) {\n                for (let i = oldGrainsLength; i < this.granularMaximumGrains + 1; i++) {\n                    this.granularGrains.push(new Grain());\n                }\n            }\n            if (this.granularMaximumGrains < this.granularGrainsLength) {\n                this.granularGrainsLength = Math.round(this.granularMaximumGrains);\n            }\n        }\n    }\n    allocateEchoBuffers(samplesPerTick, echoDelay) {\n        const safeEchoDelaySteps = Math.max(Config.echoDelayRange >> 1, (echoDelay + 1));\n        const baseEchoDelayBufferSize = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n        const safeEchoDelayBufferSize = baseEchoDelayBufferSize * 2;\n        if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n            this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n            this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n        }\n        else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n            const newDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n            const newDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n            const oldMask = this.echoDelayLineL.length - 1;\n            for (let i = 0; i < this.echoDelayLineL.length; i++) {\n                newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n            }\n            this.echoDelayPos = this.echoDelayLineL.length;\n            this.echoDelayLineL = newDelayLineL;\n            this.echoDelayLineR = newDelayLineR;\n        }\n    }\n    deactivate() {\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        for (let i = 0; i < this.eqFilterCount; i++) {\n            this.eqFilters[i].resetOutput();\n        }\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.panningDelayPos = 0;\n        if (this.panningDelayLine != null)\n            for (let i = 0; i < this.panningDelayLine.length; i++)\n                this.panningDelayLine[i] = 0.0;\n        this.echoDelayOffsetEnd = null;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n        this.volumeScale = 1.0;\n        this.aliases = false;\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n    resetAllEffects() {\n        this.deactivate();\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++)\n            this.envelopeTime[envelopeIndex] = 0;\n        this.envelopeComputer.reset();\n        if (this.chorusDelayLineDirty) {\n            for (let i = 0; i < this.chorusDelayLineL.length; i++)\n                this.chorusDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.chorusDelayLineR.length; i++)\n                this.chorusDelayLineR[i] = 0.0;\n        }\n        if (this.echoDelayLineDirty) {\n            for (let i = 0; i < this.echoDelayLineL.length; i++)\n                this.echoDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.echoDelayLineR.length; i++)\n                this.echoDelayLineR[i] = 0.0;\n        }\n        if (this.reverbDelayLineDirty) {\n            for (let i = 0; i < this.reverbDelayLine.length; i++)\n                this.reverbDelayLine[i] = 0.0;\n        }\n        if (this.granularDelayLineDirty) {\n            for (let i = 0; i < this.granularDelayLine.length; i++)\n                this.granularDelayLine[i] = 0.0;\n        }\n        this.chorusPhase = 0.0;\n        this.ringModPhase = 0.0;\n        this.ringModMixFade = 1.0;\n    }\n    compute(synth, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex) {\n        this.computed = true;\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n        this.effects = instrument.effects;\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n        const samplesPerSecond = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n        const ticksIntoBar = synth.getTicksIntoBar();\n        const tickTimeStart = ticksIntoBar;\n        const secondsPerTick = samplesPerTick / synth.samplesPerSecond;\n        const currentPart = synth.getCurrentPart();\n        const envelopeSpeeds = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (synth.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, synth.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            }\n            else {\n                useEnvelopeSpeed = ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]);\n            }\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (synth.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed * perEnvelopeSpeed;\n        }\n        this.envelopeComputer.computeEnvelopes(instrument, currentPart, this.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, this, synth, channelIndex, instrumentIndex);\n        const envelopeStarts = this.envelopeComputer.envelopeStarts;\n        const envelopeEnds = this.envelopeComputer.envelopeEnds;\n        const usesGranular = effectsIncludeGranular(this.effects);\n        const usesRingModulation = effectsIncludeRingModulation(this.effects);\n        const usesDistortion = effectsIncludeDistortion(this.effects);\n        const usesBitcrusher = effectsIncludeBitcrusher(this.effects);\n        const usesPanning = effectsIncludePanning(this.effects);\n        const usesChorus = effectsIncludeChorus(this.effects);\n        const usesEcho = effectsIncludeEcho(this.effects);\n        const usesReverb = effectsIncludeReverb(this.effects);\n        let granularChance = 0;\n        if (usesGranular) {\n            granularChance = (instrument.grainAmounts + 1);\n            this.granularMaximumGrains = instrument.grainAmounts;\n            if (synth.isModActive(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex)) {\n                this.granularMaximumGrains = synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false);\n                granularChance = (synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false) + 1);\n            }\n            this.granularMaximumGrains = Math.floor(Math.pow(2, this.granularMaximumGrains * envelopeStarts[52]));\n            granularChance = granularChance * envelopeStarts[52];\n        }\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n        if (usesGranular) {\n            this.granularMix = instrument.granular / Config.granularRange;\n            this.computeGrains = true;\n            let granularMixEnd = this.granularMix;\n            if (synth.isModActive(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex)) {\n                this.granularMix = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, false) / Config.granularRange;\n                granularMixEnd = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, true) / Config.granularRange;\n            }\n            this.granularMix *= envelopeStarts[51];\n            granularMixEnd *= envelopeEnds[51];\n            this.granularMixDelta = (granularMixEnd - this.granularMix) / roundedSamplesPerTick;\n            for (let iterations = 0; iterations < Math.ceil(Math.random() * Math.random() * 10); iterations++) {\n                if (this.granularGrainsLength < this.granularMaximumGrains && Math.random() <= granularChance) {\n                    let granularMinGrainSizeInMilliseconds = instrument.grainSize;\n                    if (synth.isModActive(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex)) {\n                        granularMinGrainSizeInMilliseconds = synth.getModValue(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex, false);\n                    }\n                    granularMinGrainSizeInMilliseconds *= envelopeStarts[53];\n                    let grainRange = instrument.grainRange;\n                    if (synth.isModActive(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex)) {\n                        grainRange = synth.getModValue(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex, false);\n                    }\n                    grainRange *= envelopeStarts[54];\n                    const granularMaxGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + grainRange;\n                    const granularGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + (granularMaxGrainSizeInMilliseconds - granularMinGrainSizeInMilliseconds) * Math.random();\n                    const granularGrainSizeInSeconds = granularGrainSizeInMilliseconds / 1000.0;\n                    const granularGrainSizeInSamples = Math.floor(granularGrainSizeInSeconds * samplesPerSecond);\n                    const granularDelayLineLength = this.granularDelayLine.length;\n                    const grainIndex = this.granularGrainsLength;\n                    this.granularGrainsLength++;\n                    const grain = this.granularGrains[grainIndex];\n                    grain.ageInSamples = 0;\n                    grain.maxAgeInSamples = granularGrainSizeInSamples;\n                    const minDelayTimeInSeconds = 0.02;\n                    const maxDelayTimeInSeconds = 2.4;\n                    grain.delayLinePosition = this.usesRandomGrainLocation ? (minDelayTimeInSeconds + (maxDelayTimeInSeconds - minDelayTimeInSeconds) * Math.random() * Math.random() * samplesPerSecond) % (granularDelayLineLength - 1) : minDelayTimeInSeconds;\n                    if (Config.granularEnvelopeType == 0) {\n                        grain.initializeParabolicEnvelope(grain.maxAgeInSamples, 1.0);\n                    }\n                    else if (Config.granularEnvelopeType == 1) {\n                        grain.initializeRCBEnvelope(grain.maxAgeInSamples, 1.0);\n                    }\n                    grain.addDelay(Math.random() * samplesPerTick * 4);\n                }\n            }\n        }\n        if (usesDistortion) {\n            let useDistortionStart = instrument.distortion;\n            let useDistortionEnd = instrument.distortion;\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n            }\n            const distortionSliderStart = Math.min(1.0, envelopeStarts[42] * useDistortionStart / (Config.distortionRange - 1));\n            const distortionSliderEnd = Math.min(1.0, envelopeEnds[42] * useDistortionEnd / (Config.distortionRange - 1));\n            const distortionStart = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n            const distortionEnd = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n            const distortionDriveStart = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n            const distortionDriveEnd = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n            this.distortion = distortionStart;\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n            this.distortionDrive = distortionDriveStart;\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n        }\n        if (usesBitcrusher) {\n            let freqSettingStart = instrument.bitcrusherFreq * Math.sqrt(envelopeStarts[44]);\n            let freqSettingEnd = instrument.bitcrusherFreq * Math.sqrt(envelopeEnds[44]);\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[44]);\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[44]);\n            }\n            let quantizationSettingStart = instrument.bitcrusherQuantization * Math.sqrt(envelopeStarts[43]);\n            let quantizationSettingEnd = instrument.bitcrusherQuantization * Math.sqrt(envelopeEnds[43]);\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[43]);\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[43]);\n            }\n            const basePitch = Config.keys[synth.song.key].basePitch + (Config.pitchesPerOctave * synth.song.octave);\n            const freqStart = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n            const freqEnd = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n            const phaseDeltaStart = Math.min(1.0, freqStart / samplesPerSecond);\n            const phaseDeltaEnd = Math.min(1.0, freqEnd / samplesPerSecond);\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n            const scaleStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n            const scaleEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n            this.bitcrusherScale = scaleStart;\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n            const foldLevelStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n            const foldLevelEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n            this.bitcrusherFoldLevel = foldLevelStart;\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n        }\n        let eqFilterVolume = 1.0;\n        if (instrument.eqFilterType) {\n            const eqFilterSettingsStart = instrument.eqFilter;\n            if (instrument.eqSubFilters[1] == null)\n                instrument.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd = instrument.eqSubFilters[1];\n            let startSimpleFreq = instrument.eqFilterSimpleCut;\n            let startSimpleGain = instrument.eqFilterSimplePeak;\n            let endSimpleFreq = instrument.eqFilterSimpleCut;\n            let endSimpleGain = instrument.eqFilterSimplePeak;\n            let filterChanges = false;\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n            let startPoint;\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint = eqFilterSettingsEnd.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.eqFilters.length < 1)\n                    this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.eqFilters.length < 1)\n                    this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            this.eqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\n            for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                let startPoint = eqFilterSettings.controlPoints[i];\n                let endPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.eqFilters.length <= i)\n                    this.eqFilters[i] = new DynamicBiquadFilter();\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            }\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        const mainInstrumentVolume = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = mainInstrumentVolume;\n        let mixVolumeEnd = mainInstrumentVolume;\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\n            const startVal = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true);\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n        let eqFilterVolumeStart = eqFilterVolume;\n        let eqFilterVolumeEnd = eqFilterVolume;\n        let delayInputMultStart = 1.0;\n        let delayInputMultEnd = 1.0;\n        if (usesPanning) {\n            const panEnvelopeStart = envelopeStarts[41] * 2.0 - 1.0;\n            const panEnvelopeEnd = envelopeEnds[41] * 2.0 - 1.0;\n            let usePanStart = instrument.pan;\n            let usePanEnd = instrument.pan;\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n            }\n            let panStart = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter * panEnvelopeStart));\n            let panEnd = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter * panEnvelopeEnd));\n            const volumeStartL = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n            const volumeStartR = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n            const volumeEndL = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n            const volumeEndR = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n            const maxDelaySamples = samplesPerSecond * Config.panDelaySecondsMax;\n            let usePanDelayStart = instrument.panDelay;\n            let usePanDelayEnd = instrument.panDelay;\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n            }\n            const delayStart = panStart * usePanDelayStart * maxDelaySamples / 10;\n            const delayEnd = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n            const delayStartL = Math.max(0.0, delayStart);\n            const delayStartR = Math.max(0.0, -delayStart);\n            const delayEndL = Math.max(0.0, delayEnd);\n            const delayEndR = Math.max(0.0, -delayEnd);\n            this.panningVolumeL = volumeStartL;\n            this.panningVolumeR = volumeStartR;\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n        }\n        if (usesChorus) {\n            const chorusEnvelopeStart = envelopeStarts[45];\n            const chorusEnvelopeEnd = envelopeEnds[45];\n            let useChorusStart = instrument.chorus;\n            let useChorusEnd = instrument.chorus;\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n            }\n            let chorusStart = Math.min(1.0, chorusEnvelopeStart * useChorusStart / (Config.chorusRange - 1));\n            let chorusEnd = Math.min(1.0, chorusEnvelopeEnd * useChorusEnd / (Config.chorusRange - 1));\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n            this.chorusVoiceMult = chorusStart;\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n            this.chorusCombinedMult = chorusCombinedMultStart;\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n        }\n        if (usesRingModulation) {\n            let useRingModStart = instrument.ringModulation;\n            let useRingModEnd = instrument.ringModulation;\n            let useRingModEnvelopeStart = envelopeStarts[49];\n            let useRingModEnvelopeEnd = envelopeEnds[49];\n            let useRingModHzStart = Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1));\n            let useRingModHzEnd = Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1));\n            let useRingModHzEnvelopeStart = envelopeStarts[50];\n            let useRingModHzEnvelopeEnd = envelopeEnds[50];\n            if (synth.isModActive(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex)) {\n                useRingModStart = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, false));\n                useRingModEnd = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, true));\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex)) {\n                useRingModHzStart = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n                useRingModHzEnd = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n            }\n            useRingModHzStart *= useRingModHzEnvelopeStart;\n            useRingModHzEnd *= useRingModHzEnvelopeEnd;\n            let ringModStart = Math.min(1.0, (useRingModStart * useRingModEnvelopeStart) / (Config.ringModRange - 1));\n            let ringModEnd = Math.min(1.0, (useRingModEnd * useRingModEnvelopeEnd) / (Config.ringModRange - 1));\n            this.ringModMix = ringModStart;\n            this.ringModMixDelta = (ringModEnd - ringModStart) / roundedSamplesPerTick;\n            this.ringModHzOffset = instrument.ringModHzOffset;\n            let ringModPhaseDeltaStart = (Math.max(0, calculateRingModHertz(useRingModHzStart))) / synth.samplesPerSecond;\n            let ringModPhaseDeltaEnd = (Math.max(0, calculateRingModHertz(useRingModHzEnd))) / synth.samplesPerSecond;\n            if (useRingModHzStart < 1 / (Config.ringModHzRange - 1) || useRingModHzEnd < 1 / (Config.ringModHzRange - 1)) {\n                ringModPhaseDeltaStart *= useRingModHzStart * (Config.ringModHzRange - 1);\n                ringModPhaseDeltaEnd *= useRingModHzEnd * (Config.ringModHzRange - 1);\n            }\n            this.ringModMixFadeDelta = 0;\n            if (this.ringModMixFade < 0)\n                this.ringModMixFade = 0;\n            if (ringModPhaseDeltaStart <= 0 && ringModPhaseDeltaEnd <= 0 && this.ringModMixFade != 0) {\n                this.ringModMixFadeDelta = this.ringModMixFade / -40;\n            }\n            else if (ringModPhaseDeltaStart > 0 && ringModPhaseDeltaEnd > 0) {\n                this.ringModMixFade = 1.0;\n            }\n            this.ringModPhaseDelta = ringModPhaseDeltaStart;\n            this.ringModPhaseDeltaScale = ringModPhaseDeltaStart == 0 ? 1 : Math.pow(ringModPhaseDeltaEnd / ringModPhaseDeltaStart, 1.0 / roundedSamplesPerTick);\n            this.ringModWaveformIndex = instrument.ringModWaveformIndex;\n            this.ringModPulseWidth = instrument.ringModPulseWidth;\n        }\n        let maxEchoMult = 0.0;\n        let averageEchoDelaySeconds = 0.0;\n        if (usesEcho) {\n            const echoSustainEnvelopeStart = envelopeStarts[46];\n            const echoSustainEnvelopeEnd = envelopeEnds[46];\n            let useEchoSustainStart = instrument.echoSustain;\n            let useEchoSustainEnd = instrument.echoSustain;\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n                useEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false));\n                useEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true));\n            }\n            const echoMultStart = Math.min(1.0, Math.pow(echoSustainEnvelopeStart * useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n            const echoMultEnd = Math.min(1.0, Math.pow(echoSustainEnvelopeEnd * useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n            this.echoMult = echoMultStart;\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\n            const echoDelayEnvelopeStart = envelopeStarts[55];\n            const echoDelayEnvelopeEnd = envelopeEnds[55];\n            let useEchoDelayStart = instrument.echoDelay * echoDelayEnvelopeStart;\n            let useEchoDelayEnd = instrument.echoDelay * echoDelayEnvelopeEnd;\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false) * echoDelayEnvelopeStart;\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true) * echoDelayEnvelopeEnd;\n            }\n            const tmpEchoDelayOffsetStart = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            const tmpEchoDelayOffsetEnd = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            if (this.echoDelayOffsetEnd != null) {\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n            }\n            else {\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n            }\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n            this.echoDelayOffsetRatio = 0.0;\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n            const shelfRadians = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n        let maxReverbMult = 0.0;\n        if (usesReverb) {\n            const reverbEnvelopeStart = envelopeStarts[47];\n            const reverbEnvelopeEnd = envelopeEnds[47];\n            let useReverbStart = instrument.reverb;\n            let useReverbEnd = instrument.reverb;\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n            }\n            const reverbStart = Math.min(1.0, Math.pow(reverbEnvelopeStart * useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n            const reverbEnd = Math.min(1.0, Math.pow(reverbEnvelopeEnd * useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n            this.reverbMult = reverbStart;\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\n            const shelfRadians = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        }\n        else if (!this.flushingDelayLines) {\n            if (this.attentuationProgress == 0.0) {\n                eqFilterVolumeEnd = 0.0;\n            }\n            else {\n                eqFilterVolumeStart = 0.0;\n                eqFilterVolumeEnd = 0.0;\n            }\n            const attenuationThreshold = 1.0 / 256.0;\n            const halfLifeMult = -Math.log2(attenuationThreshold);\n            let delayDuration = 0.0;\n            if (usesChorus) {\n                delayDuration += Config.chorusMaxDelay;\n            }\n            if (usesEcho) {\n                const attenuationPerSecond = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n                const halfLife = -1.0 / Math.log2(attenuationPerSecond);\n                const echoDuration = halfLife * halfLifeMult;\n                delayDuration += echoDuration;\n            }\n            if (usesReverb) {\n                const averageMult = maxReverbMult * 2.0;\n                const averageReverbDelaySeconds = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n                const attenuationPerSecond = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n                const halfLife = -1.0 / Math.log2(attenuationPerSecond);\n                const reverbDuration = halfLife * halfLifeMult;\n                delayDuration += reverbDuration;\n            }\n            if (usesGranular) {\n                this.computeGrains = false;\n            }\n            const secondsInTick = samplesPerTick / samplesPerSecond;\n            const progressInTick = secondsInTick / delayDuration;\n            const progressAtEndOfTick = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        }\n        else {\n            eqFilterVolumeStart = 0.0;\n            eqFilterVolumeEnd = 0.0;\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n            let totalDelaySamples = 0;\n            if (usesChorus)\n                totalDelaySamples += synth.chorusDelayBufferSize;\n            if (usesEcho)\n                totalDelaySamples += this.echoDelayLineL.length;\n            if (usesReverb)\n                totalDelaySamples += Config.reverbDelayBufferSize;\n            if (usesGranular)\n                totalDelaySamples += this.granularMaximumDelayTimeInSeconds;\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n        this.eqFilterVolume = eqFilterVolumeStart;\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n        this.envelopeComputer.clearEnvelopes();\n    }\n    updateWaves(instrument, samplesPerSecond) {\n        this.volumeScale = 1.0;\n        if (instrument.type == 0) {\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n            this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n            this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n            this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n            this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n            this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n            this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 6) {\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 9) {\n            this.wave = (this.aliases) ? instrument.customChipWave : instrument.customChipWaveIntegral;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 2) {\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 5) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 7) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 3) {\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 4) {\n            for (let i = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.wave = null;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else {\n            this.wave = null;\n        }\n    }\n    getDrumsetWave(pitch) {\n        if (this.type == 4) {\n            return this.drumsetSpectrumWaves[pitch].wave;\n        }\n        else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n    static drumsetIndexReferenceDelta(index) {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n    static _drumsetIndexToSpectrumOctave(index) {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n}\nclass ChannelState {\n    constructor() {\n        this.instruments = [];\n        this.muted = false;\n        this.singleSeamlessInstrument = null;\n    }\n}\nexport class Synth {\n    syncSongState() {\n        const channelCount = this.song.getChannelCount();\n        for (let i = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i = 0; i < channelCount; i++) {\n            const channel = this.song.channels[i];\n            const channelState = this.channels[i];\n            for (let j = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n    initModFilters(song) {\n        if (song != null) {\n            song.tmpEqFilterStart = song.eqFilter;\n            song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\n                    instrument.tmpEqFilterEnd = null;\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    warmUpSynthesizer(song) {\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick = this.getSamplesPerTick();\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++)\n                        instrumentState.envelopeTime[envelopeIndex] = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n            }\n        }\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n    }\n    computeLatestModValues() {\n        if (this.song != null && this.song.modChannelCount > 0) {\n            let latestModTimes = [];\n            let latestModInsTimes = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n                for (let instrument = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n            let currentPart = this.beat * Config.partsPerBeat + this.part;\n            for (let channelIndex = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n                    let pattern;\n                    for (let currentBar = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n                        if (pattern != null) {\n                            let instrumentIdx = pattern.instruments[0];\n                            let instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts = [];\n                            let latestPinValues = [];\n                            let partsInBar = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            for (let mod = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        const songFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index;\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModTimes[instrument.modulators[mod]]) {\n                                            if (songFilterParam) {\n                                                let tgtSong = this.song;\n                                                if (instrument.modFilterTypes[mod] == 0) {\n                                                    tgtSong.tmpEqFilterStart = tgtSong.eqSubFilters[latestPinValues[mod]];\n                                                }\n                                                else {\n                                                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                        if (tgtSong.tmpEqFilterStart != null && tgtSong.tmpEqFilterStart == tgtSong.eqSubFilters[i]) {\n                                                            tgtSong.tmpEqFilterStart = new FilterSettings();\n                                                            tgtSong.tmpEqFilterStart.fromJsonObject(tgtSong.eqSubFilters[i].toJsonObject());\n                                                            i = Config.filterMorphCount;\n                                                        }\n                                                    }\n                                                    if (tgtSong.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtSong.tmpEqFilterStart.controlPointCount) {\n                                                        if (instrument.modFilterTypes[mod] % 2)\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                        else\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                    }\n                                                }\n                                                tgtSong.tmpEqFilterEnd = tgtSong.tmpEqFilterStart;\n                                            }\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    }\n                                    else {\n                                        let usedInstruments = [];\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            for (let i = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                                                usedInstruments.push(i);\n                                            }\n                                        }\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            const tgtPattern = this.song.getPattern(instrument.modChannels[mod], currentBar);\n                                            if (tgtPattern != null)\n                                                usedInstruments = tgtPattern.instruments;\n                                        }\n                                        else {\n                                            usedInstruments.push(instrument.modInstruments[mod]);\n                                        }\n                                        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            const eqFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\n                                            const noteFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index;\n                                            let modulatorAdjust = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            }\n                                            else if (noteFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]) {\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\n                                                    }\n                                                    else {\n                                                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\n                                                }\n                                                else if (noteFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    }\n                                                    else {\n                                                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else\n                                                    this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    determineInvalidModulators(instrument) {\n        if (this.song == null)\n            return;\n        for (let mod = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            if (instrument.modChannels[mod] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            const channel = this.song.channels[instrument.modChannels[mod]];\n            if (channel == null)\n                continue;\n            let tgtInstrumentList = [];\n            if (instrument.modInstruments[mod] >= channel.instruments.length) {\n                tgtInstrumentList = channel.instruments;\n            }\n            else {\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\n            }\n            for (let i = 0; i < tgtInstrumentList.length; i++) {\n                const tgtInstrument = tgtInstrumentList[i];\n                if (tgtInstrument == null)\n                    continue;\n                const str = Config.modulators[instrument.modulators[mod]].name;\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != 15 && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\n                    || ((tgtInstrument.type != 1 && tgtInstrument.type != 11) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                    || tgtInstrument.type != 11 && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                    || ((tgtInstrument.type != 6 && tgtInstrument.type != 8) && (str == \"pulse width\" || str == \"decimal offset\"))\n                    || ((tgtInstrument.type != 8) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {\n                    instrument.invalidModulators[mod] = false;\n                    i = tgtInstrumentList.length;\n                }\n            }\n        }\n    }\n    static operatorAmplitudeCurve(amplitude) {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n    get playing() {\n        return this.isPlayingSong;\n    }\n    get recording() {\n        return this.isRecording;\n    }\n    get playhead() {\n        return this.playheadInternal;\n    }\n    set playhead(value) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n    getSamplesPerBar() {\n        if (this.song == null)\n            throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n    getTicksIntoBar() {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    getCurrentPart() {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n    findPartsInBar(bar) {\n        if (this.song == null)\n            return 0;\n        let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n    getTotalSamples(enableIntro, enableOutro, loop) {\n        if (this.song == null)\n            return -1;\n        let startBar = enableIntro ? 0 : this.song.loopStart;\n        let endBar = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods = false;\n        let hasNextBarMods = false;\n        let prevTempo = this.song.tempo;\n        for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar = startBar; bar < endBar; bar++) {\n                let pattern = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (startBar > 0) {\n            let latestTempoPin = null;\n            let latestTempoValue = 0;\n            for (let bar = startBar - 1; bar >= 0; bar--) {\n                for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n                    if (pattern != null) {\n                        let instrumentIdx = pattern.instruments[0];\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let partsInBar = this.findPartsInBar(bar);\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n        if (hasTempoMods || hasNextBarMods) {\n            let bar = startBar;\n            let ended = false;\n            let totalSamples = 0;\n            while (!ended) {\n                let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart = 0;\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n                if (hasTempoMods) {\n                    let foundMod = false;\n                    for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        foundMod = true;\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar = Config.partsPerBeat * Config.ticksPerPart / 60;\n                                                            if (currPinTempo != prevPinTempo) {\n                                                                totalSamples += -this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n                                                            }\n                                                            else {\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0)\n                        loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n            }\n            return Math.ceil(totalSamples);\n        }\n        else {\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n    getTotalBars(enableIntro, enableOutro, useLoopCount = this.loopRepeatCount) {\n        if (this.song == null)\n            throw new Error();\n        let bars = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro)\n            bars += this.song.loopStart;\n        if (enableOutro)\n            bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n    constructor(song = null) {\n        this.samplesPerSecond = 44100;\n        this.song = null;\n        this.preferLowerLatency = false;\n        this.anticipatePoorPerformance = false;\n        this.liveInputDuration = 0;\n        this.liveBassInputDuration = 0;\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n        this.liveInputPitches = [];\n        this.liveBassInputPitches = [];\n        this.liveInputChannel = 0;\n        this.liveBassInputChannel = 0;\n        this.liveInputInstruments = [];\n        this.liveBassInputInstruments = [];\n        this.loopRepeatCount = -1;\n        this.volume = 1.0;\n        this.oscRefreshEventTimer = 0;\n        this.oscEnabled = true;\n        this.enableMetronome = false;\n        this.countInMetronome = false;\n        this.renderingSong = false;\n        this.heldMods = [];\n        this.wantToSkip = false;\n        this.playheadInternal = 0.0;\n        this.bar = 0;\n        this.prevBar = null;\n        this.nextBar = null;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.isAtStartOfTick = true;\n        this.isAtEndOfTick = true;\n        this.tickSampleCountdown = 0;\n        this.modValues = [];\n        this.modInsValues = [];\n        this.nextModValues = [];\n        this.nextModInsValues = [];\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.liveInputEndTime = 0.0;\n        this.browserAutomaticallyClearsAudioBuffer = true;\n        this.tempDrumSetControlPoint = new FilterControlPoint();\n        this.tempFrequencyResponse = new FrequencyResponse();\n        this.loopBarStart = -1;\n        this.loopBarEnd = -1;\n        this.channels = [];\n        this.tonePool = new Deque();\n        this.tempMatchedPitchTones = Array(Config.maxChordSize).fill(null);\n        this.startedMetronome = false;\n        this.metronomeSamplesRemaining = -1;\n        this.metronomeAmplitude = 0.0;\n        this.metronomePrevAmplitude = 0.0;\n        this.metronomeFilter = 0.0;\n        this.limit = 0.0;\n        this.songEqFilterVolume = 1.0;\n        this.songEqFilterVolumeDelta = 0.0;\n        this.songEqFiltersL = [];\n        this.songEqFiltersR = [];\n        this.songEqFilterCount = 0;\n        this.initialSongEqFilterInput1L = 0.0;\n        this.initialSongEqFilterInput2L = 0.0;\n        this.initialSongEqFilterInput1R = 0.0;\n        this.initialSongEqFilterInput2R = 0.0;\n        this.tempMonoInstrumentSampleBuffer = null;\n        this.audioCtx = null;\n        this.scriptNode = null;\n        this.audioProcessCallback = (audioProcessingEvent) => {\n            const outputBuffer = audioProcessingEvent.outputBuffer;\n            const outputDataL = outputBuffer.getChannelData(0);\n            const outputDataR = outputBuffer.getChannelData(1);\n            if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n                this.browserAutomaticallyClearsAudioBuffer = false;\n            }\n            if (!this.browserAutomaticallyClearsAudioBuffer) {\n                const length = outputBuffer.length;\n                for (let i = 0; i < length; i++) {\n                    outputDataL[i] = 0.0;\n                    outputDataR[i] = 0.0;\n                }\n            }\n            if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n                this.deactivateAudio();\n            }\n            else {\n                this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n                if (this.oscEnabled) {\n                    if (this.oscRefreshEventTimer <= 0) {\n                        events.raise(\"oscilloscopeUpdate\", outputDataL, outputDataR);\n                        this.oscRefreshEventTimer = 2;\n                    }\n                    else {\n                        this.oscRefreshEventTimer--;\n                    }\n                }\n            }\n        };\n        this.computeDelayBufferSizes();\n        if (song != null)\n            this.setSong(song);\n    }\n    setSong(song) {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        }\n        else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n    computeDelayBufferSizes() {\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n    activateAudio() {\n        const bufferSize = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null)\n                this.deactivateAudio();\n            const latencyHint = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2);\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n    deactivateAudio() {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close)\n                this.audioCtx.close();\n            this.audioCtx = null;\n        }\n    }\n    maintainLiveInput() {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n    play() {\n        if (this.isPlayingSong)\n            return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n    pause() {\n        if (!this.isPlayingSong)\n            return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.preferLowerLatency = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            this.song.tmpEqFilterStart = null;\n            this.song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n    startRecording() {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n    resetEffects() {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n    setModValue(volumeStart, volumeEnd, channelIndex, instrumentIndex, setting) {\n        let val = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        }\n        else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n        return val;\n    }\n    getModValue(setting, channel, instrument, nextVal) {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting] : this.modValues[setting];\n            }\n        }\n        else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting] : this.modInsValues[channel][instrument][setting];\n            }\n        }\n        return -1;\n    }\n    isAnyModActive(channel, instrument) {\n        for (let setting = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    unsetMod(setting, channel, instrument) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n                else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n    isFilterModActive(forNoteFilter, channelIdx, instrumentIdx, forSong) {\n        var _a;\n        const instrument = this.song.channels[channelIdx].instruments[instrumentIdx];\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (forSong) {\n                if (((_a = this === null || this === void 0 ? void 0 : this.song) === null || _a === void 0 ? void 0 : _a.tmpEqFilterEnd) != null)\n                    return true;\n            }\n            else {\n                if (instrument.eqFilterType)\n                    return false;\n                if (instrument.tmpEqFilterEnd != null)\n                    return true;\n            }\n        }\n        return false;\n    }\n    isModActive(setting, channel, instrument) {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        }\n        else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n    forceHoldMods(volumeStart, channelIndex, instrumentIndex, setting) {\n        let found = false;\n        for (let i = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n    snapToStart() {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n    goToBar(bar) {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n    snapToBar() {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n    jumpIntoLoop() {\n        if (!this.song)\n            return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n    goToNextBar() {\n        if (!this.song)\n            return;\n        this.prevBar = this.bar;\n        const oldBar = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n    goToPrevBar() {\n        if (!this.song)\n            return;\n        this.prevBar = null;\n        const oldBar = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n    getNextBar() {\n        let nextBar = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song.barCount) {\n                nextBar = this.song.barCount - 1;\n            }\n        }\n        else if (this.bar == this.loopBarEnd && !this.renderingSong) {\n            nextBar = this.loopBarStart;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd + 1, this.song.loopStart + this.song.loopLength)) {\n            nextBar = this.song.loopStart;\n        }\n        return nextBar;\n    }\n    skipBar() {\n        if (!this.song)\n            return;\n        const samplesPerTick = this.getSamplesPerTick();\n        this.prevBar = this.bar;\n        if (this.loopBarEnd != this.bar)\n            this.bar++;\n        else {\n            this.bar = this.loopBarStart;\n        }\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n        this.isAtStartOfTick = true;\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\n            this.bar = this.song.loopStart;\n            if (this.loopBarStart != -1)\n                this.bar = this.loopBarStart;\n            if (this.loopRepeatCount > 0)\n                this.loopRepeatCount--;\n        }\n    }\n    computeSongState(samplesPerTick) {\n        if (this.song == null)\n            return;\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const samplesPerSecond = this.samplesPerSecond;\n        let eqFilterVolume = 1.0;\n        if (this.song.eqFilterType) {\n            const eqFilterSettingsStart = this.song.eqFilter;\n            if (this.song.eqSubFilters[1] == null)\n                this.song.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd = this.song.eqSubFilters[1];\n            let startSimpleFreq = this.song.eqFilterSimpleCut;\n            let startSimpleGain = this.song.eqFilterSimplePeak;\n            let endSimpleFreq = this.song.eqFilterSimpleCut;\n            let endSimpleGain = this.song.eqFilterSimplePeak;\n            let filterChanges = false;\n            let startPoint;\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint = eqFilterSettingsEnd.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length < 1)\n                    this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length < 1)\n                    this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length < 1)\n                    this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length < 1)\n                    this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            this.songEqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings = (this.song.tmpEqFilterStart != null) ? this.song.tmpEqFilterStart : this.song.eqFilter;\n            for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                let startPoint = eqFilterSettings.controlPoints[i];\n                let endPoint = (this.song.tmpEqFilterEnd != null && this.song.tmpEqFilterEnd.controlPoints[i] != null) ? this.song.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length <= i)\n                    this.songEqFiltersL[i] = new DynamicBiquadFilter();\n                this.songEqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length <= i)\n                    this.songEqFiltersR[i] = new DynamicBiquadFilter();\n                this.songEqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            }\n            this.songEqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        let eqFilterVolumeStart = eqFilterVolume;\n        let eqFilterVolumeEnd = eqFilterVolume;\n        this.songEqFilterVolume = eqFilterVolumeStart;\n        this.songEqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n    }\n    synthesize(outputDataL, outputDataR, outputBufferLength, playSong = true) {\n        if (this.song == null) {\n            for (let i = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n        const outputDataLUnfiltered = outputDataL.slice();\n        const outputDataRUnfiltered = outputDataR.slice();\n        const song = this.song;\n        this.song.inVolumeCap = 0.0;\n        this.song.outVolumeCap = 0.0;\n        let samplesPerTick = this.getSamplesPerTick();\n        let ended = false;\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0)\n                    this.loopRepeatCount--;\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n        this.syncSongState();\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\n        }\n        const volume = +this.volume;\n        const limitDecay = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit = +this.limit;\n        let skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n        let bufferIndex = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount)\n                this.nextBar = null;\n            const samplesLeftInBuffer = outputBufferLength - bufferIndex;\n            const samplesLeftInTick = Math.ceil(this.tickSampleCountdown);\n            const runLength = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd = bufferIndex + runLength;\n            if (this.isPlayingSong || this.renderingSong) {\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.wantToSkip) {\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\n                    this.pause();\n                    return;\n                }\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n                this.wantToSkip = false;\n                this.skipBar();\n                continue;\n            }\n            this.computeSongState(samplesPerTick);\n            for (let channelIndex = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel = song.channels[channelIndex];\n                const channelState = this.channels[channelIndex];\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    const instrumentState = channelState.instruments[instrumentIndex];\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n                            instrumentState.computed = false;\n                            instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n                    for (let i = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    for (let i = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n                    const tickSampleCountdown = this.tickSampleCountdown;\n                    const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed = instrument.vibratoSpeed;\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod = this.samplesPerSecond / hz;\n                        const radiansPerSample = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i = bufferIndex; i < stopIndex; i++) {\n                            outputDataLUnfiltered[i] += this.metronomeAmplitude;\n                            outputDataRUnfiltered[i] += this.metronomeAmplitude;\n                            const tempAmplitude = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                }\n                else {\n                    this.startedMetronome = false;\n                }\n            }\n            for (let i = bufferIndex; i < runEnd; i++) {\n                {\n                    let filtersL = this.songEqFiltersL;\n                    let filtersR = this.songEqFiltersR;\n                    const filterCount = this.songEqFilterCount | 0;\n                    let initialFilterInput1L = +this.initialSongEqFilterInput1L;\n                    let initialFilterInput2L = +this.initialSongEqFilterInput2L;\n                    let initialFilterInput1R = +this.initialSongEqFilterInput1R;\n                    let initialFilterInput2R = +this.initialSongEqFilterInput2R;\n                    const applyFilters = Synth.applyFilters;\n                    let eqFilterVolume = +this.songEqFilterVolume;\n                    const eqFilterVolumeDelta = +this.songEqFilterVolumeDelta;\n                    const inputSampleL = outputDataL[i];\n                    let sampleL = inputSampleL;\n                    sampleL = applyFilters(sampleL, initialFilterInput1L, initialFilterInput2L, filterCount, filtersL);\n                    initialFilterInput2L = initialFilterInput1L;\n                    initialFilterInput1L = inputSampleL;\n                    sampleL *= eqFilterVolume;\n                    outputDataL[i] = sampleL;\n                    const inputSampleR = outputDataR[i];\n                    let sampleR = inputSampleR;\n                    sampleR = applyFilters(sampleR, initialFilterInput1R, initialFilterInput2R, filterCount, filtersR);\n                    initialFilterInput2R = initialFilterInput1R;\n                    initialFilterInput1R = inputSampleR;\n                    sampleR *= eqFilterVolume;\n                    outputDataR[i] = sampleR;\n                    eqFilterVolume += eqFilterVolumeDelta;\n                    this.sanitizeFilters(filtersL);\n                    if (!(initialFilterInput1L < 100) || !(initialFilterInput2L < 100)) {\n                        initialFilterInput1L = 0.0;\n                        initialFilterInput2L = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1L) < epsilon)\n                        initialFilterInput1L = 0.0;\n                    if (Math.abs(initialFilterInput2L) < epsilon)\n                        initialFilterInput2L = 0.0;\n                    this.initialSongEqFilterInput1L = initialFilterInput1L;\n                    this.initialSongEqFilterInput2L = initialFilterInput2L;\n                    this.sanitizeFilters(filtersR);\n                    if (!(initialFilterInput1R < 100) || !(initialFilterInput2R < 100)) {\n                        initialFilterInput1R = 0.0;\n                        initialFilterInput2R = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1R) < epsilon)\n                        initialFilterInput1R = 0.0;\n                    if (Math.abs(initialFilterInput2R) < epsilon)\n                        initialFilterInput2R = 0.0;\n                    this.initialSongEqFilterInput1R = initialFilterInput1R;\n                    this.initialSongEqFilterInput2R = initialFilterInput2R;\n                }\n                const sampleL = (outputDataL[i] + outputDataLUnfiltered[i]) * song.masterGain * song.masterGain;\n                const sampleR = (outputDataR[i] + outputDataRUnfiltered[i]) * song.masterGain * song.masterGain;\n                const absL = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs);\n                const limitRange = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                const limitTarget = (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume);\n            }\n            bufferIndex += runLength;\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            }\n                            else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n                const ticksIntoBar = this.getTicksIntoBar();\n                const tickTimeStart = ticksIntoBar;\n                const secondsPerTick = samplesPerTick / this.samplesPerSecond;\n                const currentPart = this.getCurrentPart();\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState = this.channels[channel].instruments[instrumentIdx];\n                        const envelopeComputer = instrumentState.envelopeComputer;\n                        const envelopeSpeeds = [];\n                        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n                            envelopeSpeeds[i] = 0;\n                        }\n                        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                            let useEnvelopeSpeed = instrument.envelopeSpeed;\n                            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channel, instrumentIdx) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n                            }\n                            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                                if (Number.isInteger(useEnvelopeSpeed)) {\n                                    instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                                }\n                                else {\n                                    instrumentState.envelopeTime[envelopeIndex] += ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]) * perEnvelopeSpeed;\n                                }\n                            }\n                            else {\n                                instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                            }\n                        }\n                        if (instrumentState.activeTones.count() > 0) {\n                            const tone = instrumentState.activeTones.get(0);\n                            envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, instrumentState, this, channel, instrumentIdx);\n                        }\n                        const envelopeStarts = envelopeComputer.envelopeStarts;\n                        const arpEnvelopeStart = envelopeStarts[48];\n                        let useArpeggioSpeed = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            }\n                            else {\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * useArpeggioSpeed);\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            }\n                            else {\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        envelopeComputer.clearEnvelopes();\n                    }\n                }\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        if (instrument.tmpEqFilterEnd != null) {\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\n                        }\n                        else {\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        }\n                        else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n                if (song.tmpEqFilterEnd != null) {\n                    song.tmpEqFilterStart = song.tmpEqFilterEnd;\n                }\n                else {\n                    song.tmpEqFilterStart = song.eqFilter;\n                }\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    for (let i = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                this.beat = 0;\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                }\n                                else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0)\n                                        this.loopRepeatCount--;\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio));\n                    for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                        instrumentState.envelopeTime[envelopeIndex] = (instrumentState.envelopeTime[envelopeIndex] % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                    }\n                }\n            }\n            const maxInstrumentsPerChannel = this.song.getMaxInstrumentsPerChannel();\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument = 0; instrument < maxInstrumentsPerChannel; instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon)\n            limit = 0.0;\n        this.limit = limit;\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n    }\n    freeTone(tone) {\n        this.tonePool.pushBack(tone);\n    }\n    newTone() {\n        if (this.tonePool.count() > 0) {\n            const tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n    releaseTone(instrumentState, tone) {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n    freeReleasedTone(instrumentState, toneIndex) {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n    freeAllTones() {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0)\n                    this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0)\n                    this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0)\n                    this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0)\n                    this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n    determineLiveInputTones(song, channelIndex, samplesPerTick) {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pitches = this.liveInputPitches;\n        const bassPitches = this.liveBassInputPitches;\n        if (this.liveInputPitches.length > 0 || this.liveBassInputPitches.length > 0) {\n            this.computeLatestModValues();\n        }\n        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState = channelState.instruments[instrumentIndex];\n            const toneList = instrumentState.liveInputTones;\n            let toneCount = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n                if (instrument.getChord().singleTone) {\n                    let tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n                    for (let i = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                }\n                else {\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n                    for (let i = 0; i < pitches.length; i++) {\n                        let tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount];\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        }\n                        else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n                if (instrument.getChord().singleTone) {\n                    let tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                }\n                else {\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        let tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount];\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        }\n                        else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n    adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, otherPattern, instrumentIndex, transition, chord, note, otherNote, forceContinue) {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                return null;\n            }\n            const otherInstrument = channel.instruments[otherPattern.instruments[0]];\n            if (forceContinue) {\n                return otherInstrument.getChord();\n            }\n            const otherTransition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n    static adjacentNotesHaveMatchingPitches(firstNote, secondNote) {\n        if (firstNote.pitches.length != secondNote.pitches.length)\n            return false;\n        const firstNoteInterval = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1)\n                return false;\n        }\n        return true;\n    }\n    moveTonesIntoOrderedTempMatchedList(toneList, notePitches) {\n        for (let i = 0; i < toneList.count(); i++) {\n            const tone = toneList.get(i);\n            const pitch = tone.pitches[0] + tone.lastInterval;\n            for (let j = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n        while (toneList.count() > 0) {\n            const tone = toneList.popFront();\n            for (let j = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n    determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong) {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pattern = song.getPattern(channelIndex, this.bar);\n        const currentPart = this.getCurrentPart();\n        const currentTick = this.tick + Config.ticksPerPart * currentPart;\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n            let notes = [];\n            let prevNotes = [];\n            let nextNotes = [];\n            let fillCount = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n            if (pattern != null && !channel.muted) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > prevNotes[pattern.notes[i].pitches[0]].start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < nextNotes[pattern.notes[i].pitches[0]].start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n            let modToneCount = 0;\n            const newInstrumentIndex = (song.patternInstruments && (pattern != null)) ? pattern.instruments[0] : 0;\n            const instrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList = instrumentState.activeModTones;\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && prevNotes[mod].end != notes[mod].start)\n                        prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && nextNotes[mod].start != notes[mod].end)\n                        nextNotes[mod] = null;\n                }\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument = prevNotes[mod];\n                    let nextNoteForThisInstrument = nextNotes[mod];\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    const atNoteStart = (Config.ticksPerPart * notes[mod].start == currentTick) && this.isAtStartOfTick;\n                    let tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        }\n                        else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n                    for (let i = 0; i < notes[mod].pitches.length; i++) {\n                        tone.pitches[i] = notes[mod].pitches[i];\n                    }\n                    tone.pitchCount = notes[mod].pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod].start;\n                    tone.noteEndPart = notes[mod].end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            while (toneList.count() > modToneCount) {\n                const tone = toneList.popBack();\n                const channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                }\n                else {\n                    this.freeTone(tone);\n                }\n            }\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n            let note = null;\n            let prevNote = null;\n            let nextNote = null;\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start)\n                        prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end)\n                        nextNote = null;\n                }\n            }\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            }\n            else {\n                channelState.singleSeamlessInstrument = null;\n            }\n            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState = channelState.instruments[instrumentIndex];\n                const toneList = instrumentState.activeTones;\n                let toneCount = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument = prevNote;\n                    let nextNoteForThisInstrument = nextNote;\n                    const partsPerBar = Config.partsPerBeat * song.beatsPerBar;\n                    const transition = instrument.getTransition();\n                    const chord = instrument.getChord();\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    let tonesInPrevNote = 0;\n                    let tonesInNextNote = 0;\n                    if (note.start == 0) {\n                        let prevPattern = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    }\n                    else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;\n                    }\n                    if (note.end == partsPerBar) {\n                        let nextPattern = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    }\n                    else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;\n                    }\n                    if (chord.singleTone) {\n                        const atNoteStart = (Config.ticksPerPart * note.start == currentTick);\n                        let tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            }\n                            else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        }\n                        else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                    else {\n                        const transition = instrument.getTransition();\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n                        let strumOffsetParts = 0;\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            let prevNoteForThisTone = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone = note;\n                            let nextNoteForThisTone = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote = false;\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                }\n                                else {\n                                    break;\n                                }\n                            }\n                            let noteEndPart = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n                            const atNoteStart = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount];\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            }\n                            else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            }\n                            else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                }\n                                else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            }\n                            else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                    if (transition.continues && (toneList.count() <= 0) || (note.pitches.length <= 0))\n                        instrumentState.envelopeComputer.reset();\n                }\n                while (toneList.count() > toneCount) {\n                    const tone = toneList.popBack();\n                    const channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    }\n                    else {\n                        this.freeTone(tone);\n                    }\n                }\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n    clearTempMatchedPitchTones(toneCount, instrumentState) {\n        for (let i = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                }\n                else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n    playTone(channelIndex, bufferIndex, runLength, tone) {\n        const channelState = this.channels[channelIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        if (instrumentState.synthesizer != null)\n            instrumentState.synthesizer(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n        instrumentState.envelopeComputer.clearEnvelopes();\n    }\n    playModTone(song, channelIndex, samplesPerTick, bufferIndex, roundedSamplesPerTick, tone, released, shouldFadeOutFast) {\n        const channel = song.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        if (tone.note != null) {\n            const ticksIntoBar = this.getTicksIntoBar();\n            const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown = this.tickSampleCountdown;\n            const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n    static computeChordExpression(chordSize) {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n    computeTone(song, channelIndex, samplesPerTick, tone, released, shouldFadeOutFast) {\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition = instrument.getTransition();\n        const chord = instrument.getChord();\n        const chordExpression = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel = song.getChannelIsNoise(channelIndex);\n        const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime = 1.0 / this.samplesPerSecond;\n        const beatsPerPart = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar = this.getTicksIntoBar();\n        const partTimeStart = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart = this.getCurrentPart();\n        let specialIntervalMult = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n        let toneIsOnLastTick = shouldFadeOutFast;\n        let intervalStart = 0.0;\n        let intervalEnd = 0.0;\n        let fadeExpressionStart = 1.0;\n        let fadeExpressionEnd = 1.0;\n        let chordExpressionStart = chordExpression;\n        let chordExpressionEnd = chordExpression;\n        let expressionReferencePitch = 16;\n        let basePitch = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression = 1.0;\n        let pitchDamping = 48;\n        if (instrument.type == 3) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0;\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        }\n        else if (instrument.type == 4) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        }\n        else if (instrument.type == 2) {\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        }\n        else if (instrument.type == 1 || instrument.type == 11) {\n            baseExpression = Config.fmBaseExpression;\n        }\n        else if (instrument.type == 0) {\n            baseExpression = Config.chipBaseExpression;\n            if (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n                if (Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);\n                }\n                else {\n                    basePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);\n                }\n            }\n            else {\n                if (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune;\n                }\n                else if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune;\n                }\n            }\n        }\n        else if (instrument.type == 9) {\n            baseExpression = Config.chipBaseExpression;\n        }\n        else if (instrument.type == 5) {\n            baseExpression = Config.harmonicsBaseExpression;\n        }\n        else if (instrument.type == 6) {\n            baseExpression = Config.pwmBaseExpression;\n        }\n        else if (instrument.type == 8) {\n            baseExpression = Config.supersawBaseExpression;\n        }\n        else if (instrument.type == 7) {\n            baseExpression = Config.pickedStringBaseExpression;\n        }\n        else if (instrument.type == 10) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        }\n        else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n            instrumentState.envelopeComputer.reset();\n            if (instrument.type == 0 && instrument.isUsingAdvancedLoopControls) {\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWaves[i] = 0;\n                    tone.chipWaveCompletionsLastWave[i] = 0;\n                }\n            }\n        }\n        tone.freshlyAllocated = false;\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n        if (released) {\n            const startTicksSinceReleased = tone.ticksSinceReleased;\n            const endTicksSinceReleased = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks)\n                toneIsOnLastTick = true;\n        }\n        else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        }\n        else {\n            const note = tone.note;\n            const nextNote = tone.nextNote;\n            const noteStartPart = tone.noteStartPart;\n            const noteEndPart = tone.noteEndPart;\n            const endPinIndex = note.getEndPinIndex(currentPart);\n            const startPin = note.pins[endPinIndex - 1];\n            const endPin = note.pins[endPinIndex];\n            const noteStartTick = noteStartPart * Config.ticksPerPart;\n            const noteEndTick = noteEndPart * Config.ticksPerPart;\n            const pinStart = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd = (note.start + endPin.time) * Config.ticksPerPart;\n            tone.ticksSinceReleased = 0;\n            const tickTimeStart = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd = tickTimeEnd - noteStartTick;\n            const pinRatioStart = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    const noteLengthTicks = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks)\n                        toneIsOnLastTick = true;\n                }\n            }\n        }\n        tone.isOnLastTick = toneIsOnLastTick;\n        let tmpNoteFilter = instrument.noteFilter;\n        let startPoint;\n        let endPoint;\n        if (instrument.noteFilterType) {\n            const noteFilterSettingsStart = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd = instrument.noteSubFilters[1];\n            let startSimpleFreq = instrument.noteFilterSimpleCut;\n            let startSimpleGain = instrument.noteFilterSimplePeak;\n            let endSimpleFreq = instrument.noteFilterSimpleCut;\n            let endSimpleGain = instrument.noteFilterSimplePeak;\n            let filterChanges = false;\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n        const envelopeComputer = tone.envelopeComputer;\n        const envelopeSpeeds = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, tone.instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n            }\n            let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed] * perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n                if (Number.isInteger(useEnvelopeSpeed)) {\n                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                }\n                else {\n                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)] * perEnvelopeSpeed;\n                }\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed;\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, envelopeSpeeds, instrumentState, this, channelIndex, tone.instrumentIndex);\n        const envelopeStarts = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n        if (transition.continues && (tone.prevNote == null || tone.note == null)) {\n            instrumentState.envelopeComputer.reset();\n        }\n        if (tone.note != null && transition.slides) {\n            const prevNote = tone.prevNote;\n            const nextNote = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart)\n                    intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd)\n                    intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart)\n                        chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd)\n                        chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart)\n                    intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd)\n                    intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart)\n                        chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd)\n                        chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n        if (effectsIncludePitchShift(instrument.effects)) {\n            let pitchShift = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart = 1.0;\n            let pitchShiftScalarEnd = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart = envelopeStarts[18];\n            const envelopeEnd = envelopeEnds[18];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart = envelopeStarts[19];\n            const envelopeEnd = envelopeEnds[19];\n            let modDetuneStart = instrument.detune;\n            let modDetuneEnd = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n        if (effectsIncludeVibrato(instrument.effects)) {\n            let delayTicks;\n            let vibratoAmplitudeStart;\n            let vibratoAmplitudeEnd;\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2;\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n            else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2;\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n            let vibratoStart;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            }\n            else {\n                let vibratoLfoStart = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart = envelopeStarts[20];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n            let vibratoLfoEnd = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd = envelopeEnds[20];\n            if (instrument.type != 10) {\n                let vibratoEnd = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n                tone.prevVibrato = vibratoEnd;\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            const fadeInSeconds = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\n            }\n        }\n        if (instrument.type == 4 && tone.drumsetPitch == null) {\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null)\n                tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n        let noteFilterExpression = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\n            tone.noteFilterCount = 0;\n        }\n        else {\n            const noteAllFreqsEnvelopeStart = envelopeStarts[1];\n            const noteAllFreqsEnvelopeEnd = envelopeEnds[1];\n            if (instrument.noteFilterType) {\n                const noteFreqEnvelopeStart = envelopeStarts[21];\n                const noteFreqEnvelopeEnd = envelopeEnds[21];\n                const notePeakEnvelopeStart = envelopeStarts[29];\n                const notePeakEnvelopeEnd = envelopeEnds[29];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                if (tone.noteFilters.length < 1)\n                    tone.noteFilters[0] = new DynamicBiquadFilter();\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                tone.noteFilterCount = 1;\n            }\n            else {\n                const noteFilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n                for (let i = 0; i < noteFilterSettings.controlPointCount; i++) {\n                    const noteFreqEnvelopeStart = envelopeStarts[21 + i];\n                    const noteFreqEnvelopeEnd = envelopeEnds[21 + i];\n                    const notePeakEnvelopeStart = envelopeStarts[29 + i];\n                    const notePeakEnvelopeEnd = envelopeEnds[29 + i];\n                    let startPoint = noteFilterSettings.controlPoints[i];\n                    const endPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n                    if (startPoint.type != endPoint.type) {\n                        startPoint = endPoint;\n                    }\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                    if (tone.noteFilters.length <= i)\n                        tone.noteFilters[i] = new DynamicBiquadFilter();\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                }\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\n            }\n        }\n        if (instrument.type == 4) {\n            const drumsetEnvelopeComputer = tone.envelopeComputer;\n            const drumsetFilterEnvelope = instrument.getDrumsetEnvelope(tone.drumsetPitch);\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);\n            drumsetEnvelopeComputer.computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd);\n            const drumsetFilterEnvelopeStart = drumsetEnvelopeComputer.drumsetFilterEnvelopeStart;\n            const drumsetFilterEnvelopeEnd = drumsetEnvelopeComputer.drumsetFilterEnvelopeEnd;\n            const point = this.tempDrumSetControlPoint;\n            point.type = 0;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.50);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFilters.length == tone.noteFilterCount)\n                tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n        if (instrument.type == 1 || instrument.type == 11) {\n            let sineExpressionBoost = 1.0;\n            let totalCarrierExpression = 0.0;\n            let arpeggioInterval = 0;\n            const arpeggiates = chord.arpeggiates;\n            const isMono = chord.name == \"monophonic\";\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n            const carrierCount = (instrument.type == 11 ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {\n                const associatedCarrierIndex = (instrument.type == 11 ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch = tone.pitches[arpeggiates ? 0 : isMono ? instrument.monoChordTone : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd = freqMult * baseFreqEnd + hzOffset;\n                const freqEnvelopeStart = envelopeStarts[5 + i];\n                const freqEnvelopeEnd = envelopeEnds[5 + i];\n                let freqStart;\n                let freqEnd;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                }\n                else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n                let amplitudeStart = instrument.operators[i].amplitude;\n                let amplitudeEnd = instrument.operators[i].amplitude;\n                if (i < 4) {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n                else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n                const amplitudeCurveStart = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                let expressionStart = amplitudeMultStart;\n                let expressionEnd = amplitudeMultEnd;\n                if (i < carrierCount) {\n                    let pitchExpressionStart;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i];\n                    }\n                    else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n                    totalCarrierExpression += amplitudeCurveEnd;\n                }\n                else {\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n                expressionStart *= envelopeStarts[11 + i];\n                expressionEnd *= envelopeEnds[11 + i];\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    const startVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            }\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            let expressionStart = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[0];\n            let expressionEnd = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[0];\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) {\n                expressionStart = 0;\n                expressionEnd = 0;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            let useFeedbackAmplitudeStart = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n            let feedbackAmplitudeStart = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n            let feedbackStart = feedbackAmplitudeStart * envelopeStarts[17];\n            let feedbackEnd = feedbackAmplitudeEnd * envelopeEnds[17];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n        }\n        else {\n            const freqEndRatio = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n            const basePhaseDeltaScale = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n            const isMono = chord.name == \"monophonic\";\n            let pitch = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval || isMono)) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                }\n                else if (chord.arpeggiates) {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                }\n                else {\n                    pitch = tone.pitches[instrument.monoChordTone];\n                }\n            }\n            const startPitch = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart;\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0];\n            }\n            else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult = baseExpression * noteFilterExpression;\n            if (instrument.type == 2) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == 0) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == 6) {\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n                const pulseWidthStart = pulseWidthModStart * envelopeStarts[2];\n                const pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[37];\n                tone.decimalOffset = decimalOffsetStart;\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == 7) {\n                let useSustainStart = instrument.stringSustain;\n                let useSustainEnd = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n            }\n            const startFreq = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == 0 || instrument.type == 9 || instrument.type == 5 || instrument.type == 7 || instrument.type == 3 || instrument.type == 6 || instrument.type == 2 || instrument.type == 4) {\n                const unisonVoices = instrument.unisonVoices;\n                const unisonSpread = instrument.unisonSpread;\n                const unisonOffset = instrument.unisonOffset;\n                const unisonExpression = instrument.unisonExpression;\n                const voiceCountExpression = (instrument.type == 7) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[4];\n                const unisonEnvelopeEnd = envelopeEnds[4];\n                const unisonStartA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonEndA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonStartA;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonEndA / unisonStartA, 1.0 / roundedSamplesPerTick);\n                const divisor = (unisonVoices == 1) ? 1 : (unisonVoices - 1);\n                for (let i = 1; i <= unisonVoices; i++) {\n                    const unisonStart = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeStart / 12.0) * (specialIntervalMult);\n                    const unisonEnd = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeEnd / 12.0) * (specialIntervalMult);\n                    tone.phaseDeltas[i] = startFreq * sampleTime * unisonStart;\n                    tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonEnd / unisonStart, 1.0 / roundedSamplesPerTick);\n                }\n                for (let i = unisonVoices + 1; i < Config.unisonVoicesMax; i++) {\n                    if (i == 2) {\n                        const unisonBStart = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\n                        const unisonBEnd = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\n                        tone.phaseDeltas[i] = startFreq * sampleTime * unisonBStart;\n                        tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\n                    }\n                    else {\n                        tone.phaseDeltas[i] = tone.phaseDeltas[0];\n                        tone.phaseDeltaScales[i] = tone.phaseDeltaScales[0];\n                    }\n                }\n            }\n            else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n            let supersawExpressionStart = 1.0;\n            let supersawExpressionEnd = 1.0;\n            if (instrument.type == 8) {\n                const minFirstVoiceAmplitude = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n                let useDynamismStart = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n                const curvedDynamismStart = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[38]), 0.2);\n                const curvedDynamismEnd = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[38]), 0.2);\n                const firstVoiceAmplitudeStart = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n                const firstVoiceAmplitudeEnd = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n                const dynamismStart = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                const dynamismEnd = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                tone.supersawDynamism = dynamismStart;\n                tone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n                const initializeSupersaw = (tone.supersawDelayIndex == -1);\n                if (initializeSupersaw) {\n                    let accumulator = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] = accumulator;\n                        accumulator += -Math.log(Math.random());\n                    }\n                    const amplitudeSum = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n                    const slope = amplitudeSum;\n                    let sample = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        const normalizedPhase = tone.phases[i] / accumulator;\n                        tone.phases[i] = normalizedPhase;\n                        sample += (normalizedPhase - 0.5) * amplitude;\n                    }\n                    let zeroCrossingPhase = 1.0;\n                    let prevDrop = 0.0;\n                    for (let i = Config.supersawVoiceCount - 1; i >= 0; i--) {\n                        const nextDrop = 1.0 - tone.phases[i];\n                        const phaseDelta = nextDrop - prevDrop;\n                        if (sample < 0.0) {\n                            const distanceToZeroCrossing = -sample / slope;\n                            if (distanceToZeroCrossing < phaseDelta) {\n                                zeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n                                break;\n                            }\n                        }\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        sample += phaseDelta * slope - amplitude;\n                        prevDrop = nextDrop;\n                    }\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] += zeroCrossingPhase;\n                    }\n                    for (let i = 1; i < Config.supersawVoiceCount - 1; i++) {\n                        const swappedIndex = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n                        const temp = tone.phases[i];\n                        tone.phases[i] = tone.phases[swappedIndex];\n                        tone.phases[swappedIndex] = temp;\n                    }\n                }\n                const baseSpreadSlider = instrument.supersawSpread / Config.supersawSpreadMax;\n                let useSpreadStart = baseSpreadSlider;\n                let useSpreadEnd = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n                const spreadSliderStart = useSpreadStart * envelopeStarts[39];\n                const spreadSliderEnd = useSpreadEnd * envelopeEnds[39];\n                const averageSpreadSlider = (spreadSliderStart + spreadSliderEnd) * 0.5;\n                const curvedSpread = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n                for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                    const offset = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n                    tone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n                }\n                const baseShape = instrument.supersawShape / Config.supersawShapeMax;\n                let useShapeStart = baseShape * envelopeStarts[40];\n                let useShapeEnd = baseShape * envelopeEnds[40];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n                const shapeStart = useShapeStart * envelopeStarts[40];\n                const shapeEnd = useShapeEnd * envelopeEnds[40];\n                tone.supersawShape = shapeStart;\n                tone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[37];\n                tone.decimalOffset = decimalOffsetStart;\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n                let pulseWidthStart = pulseWidthModStart * envelopeStarts[2];\n                let pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];\n                pulseWidthStart -= decimalOffsetStart / 10000;\n                pulseWidthEnd -= decimalOffsetStart / 10000;\n                const phaseDeltaStart = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n                const phaseDeltaEnd = startFreq * sampleTime * freqEndRatio;\n                tone.supersawPrevPhaseDelta = phaseDeltaEnd;\n                const delayLengthStart = pulseWidthStart / phaseDeltaStart;\n                const delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n                tone.supersawDelayLength = delayLengthStart;\n                tone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n                const minBufferLength = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n                if (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n                    const likelyMaximumLength = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n                    const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n                    if (!initializeSupersaw && tone.supersawDelayLine != null) {\n                        const oldDelayBufferMask = (tone.supersawDelayLine.length - 1) >> 0;\n                        const startCopyingFromIndex = tone.supersawDelayIndex;\n                        for (let i = 0; i < tone.supersawDelayLine.length; i++) {\n                            newDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                        }\n                    }\n                    tone.supersawDelayLine = newDelayLine;\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n                else if (initializeSupersaw) {\n                    tone.supersawDelayLine.fill(0.0);\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n                const pulseExpressionRatio = Config.pwmBaseExpression / Config.supersawBaseExpression;\n                supersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n                supersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n            }\n            let expressionStart = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[0] * supersawExpressionStart;\n            let expressionEnd = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[0] * supersawExpressionEnd;\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                const startVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) {\n                expressionStart = 0;\n                expressionEnd = 0;\n                instrumentState.awake = false;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            if (instrument.type == 7) {\n                let stringDecayStart;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                }\n                else {\n                    const sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[3];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd = tone.envelopeComputer.envelopeEnds[3];\n                let stringDecayEnd = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n                const unisonVoices = instrument.unisonVoices;\n                for (let i = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        pickedString.delayIndex = -1;\n                    }\n                }\n                for (let i = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n    static getLFOAmplitude(instrument, secondsIntoBar) {\n        let effect = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n    static getInstrumentSynthFunction(instrument) {\n        if (instrument.type == 1) {\n            const fingerprint = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource = [];\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs = [];\n                        for (let j = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    }\n                    else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n                                    const feedbackIndices = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                }\n                                else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    }\n                    else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    }\n                    else {\n                        synthSource.push(line);\n                    }\n                }\n                const wrappedFmSynth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        }\n        else if (instrument.type == 0) {\n            if (instrument.isUsingAdvancedLoopControls) {\n                return Synth.loopableChipSynth;\n            }\n            return Synth.chipSynth;\n        }\n        else if (instrument.type == 9) {\n            return Synth.chipSynth;\n        }\n        else if (instrument.type == 5) {\n            return Synth.harmonicsSynth;\n        }\n        else if (instrument.type == 6) {\n            return Synth.pulseWidthSynth;\n        }\n        else if (instrument.type == 8) {\n            return Synth.supersawSynth;\n        }\n        else if (instrument.type == 7) {\n            return Synth.pickedStringSynth;\n        }\n        else if (instrument.type == 2) {\n            return Synth.noiseSynth;\n        }\n        else if (instrument.type == 3) {\n            return Synth.spectrumSynth;\n        }\n        else if (instrument.type == 4) {\n            return Synth.drumsetSynth;\n        }\n        else if (instrument.type == 10) {\n            return Synth.modSynth;\n        }\n        else if (instrument.type == 11) {\n            const fingerprint = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource = [];\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs = [];\n                        for (let j = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    }\n                    else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount + 2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n                                    const feedbackIndices = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                }\n                                else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    }\n                    else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount + 2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    }\n                    else {\n                        synthSource.push(line);\n                    }\n                }\n                const wrappedFm6Synth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n                Synth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        }\n        else {\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n    static wrap(x, b) {\n        return (x % b + b) % b;\n    }\n    static loopableChipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let chipFunction = Synth.loopableChipFunctionCache[instrumentState.unisonVoices];\n        if (chipFunction == undefined) {\n            let chipSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            chipSource += `\n            const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n            // const aliases = false;\n            const data = synth.tempMonoInstrumentSampleBuffer;\n            const wave = instrumentState.wave;\n            const volumeScale = instrumentState.volumeScale;\n            const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n\n            let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n            let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n            `;\n            chipSource += `\n            let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;\n            if (chipWaveLoopLength < 2) {\n                chipWaveLoopStart = 0;\n                chipWaveLoopEnd = waveLength;\n                chipWaveLoopLength = waveLength;\n            }\n            const chipWaveLoopMode = instrumentState.chipWaveLoopMode;\n            const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;\n            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n            if(instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {\n            `;\n            for (let i = 1; i < voiceCount; i++) {\n                chipSource += `\n                if (instrumentState.unisonVoices <= #)\n                    tone.phases[#] = tone.phases[#-1];\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            }`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                let phaseDelta# = tone.phaseDeltas[#] * waveLength;\n                let direction# = tone.directions[#];\n                let chipWaveCompletion# = tone.chipWaveCompletions[#];\n\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\n                // If playing once or looping, we force the correct direction,\n                // since it shouldn't really change. This is mostly so that if\n                // the mode is changed midway through playback, it won't get\n                // stuck on the wrong direction.\n                if (!chipWavePlayBackwards) {`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        direction# = 1;\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `} else {`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        direction# = -1;\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                }\n            }\n            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                    chipWaveCompletion# = 0;\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \n            }\n            \n            const chipWaveCompletionFadeLength = 1000;\n            let expression = +tone.expression;\n            const expressionDelta = +tone.expressionDelta;\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                let lastWave# = tone.chipWaveCompletionsLastWave[#];\n                const phaseDeltaScale# = +tone.phaseDeltaScales[#];\n                let phase# = Synth.wrap(tone.phases[#], 1) * waveLength;\n                let prevWaveIntegral# = 0;\n\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            if (!aliases) {\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                    const phase#Int = Math.floor(phase#);\n                    const index# = Synth.wrap(phase#Int, waveLength);\n                    const phaseRatio# = phase# - phase#Int;\n                    prevWaveIntegral# = +wave[index#];\n                    prevWaveIntegral# += (wave[Synth.wrap(index# + 1, waveLength)] - prevWaveIntegral#) * phaseRatio#;\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            }\n            const filters = tone.noteFilters;\n            const filterCount = tone.noteFilterCount | 0;\n            let initialFilterInput1 = +tone.initialNoteFilterInput1;\n            let initialFilterInput2 = +tone.initialNoteFilterInput2;\n            const applyFilters = Synth.applyFilters;\n            const stopIndex = bufferIndex + roundedSamplesPerTick;\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                let prevWave# = tone.chipWavePrevWaves[#];\n\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                let wrapped = 0;\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                    if (chipWaveCompletion# > 0 && chipWaveCompletion# < chipWaveCompletionFadeLength) {\n                        chipWaveCompletion#++;\n                    }\n                    phase# += phaseDelta# * direction#;\n\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                if (chipWaveLoopMode === 2) {\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        if (direction# === 1) {\n                            if (phase# > waveLength) {\n                                if (chipWaveCompletion# <= 0) {\n                                    lastWave# = prevWave#;\n                                    chipWaveCompletion#++;\n                                }\n                                wrapped = #;\n                            }\n                        } else if (direction# === -1) {\n                            if (phase# < 0) {\n                                if (chipWaveCompletion# <= 0) {\n                                    lastWave# = prevWave#;\n                                    chipWaveCompletion#++;\n                                }\n                                wrapped = 1;\n                            }\n                        }\n\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                } else if (chipWaveLoopMode === 3) {\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        if (direction# === 1) {\n                            if (phase# > chipWaveLoopEnd) {\n                                if (chipWaveCompletion# <= 0) {\n                                    lastWave# = prevWave#;\n                                    chipWaveCompletion#++;\n                                }\n                                wrapped = 1;\n                            }\n                        } else if (direction# === -1) {\n                            if (phase# < chipWaveLoopStart) {\n                                if (chipWaveCompletion# <= 0) {\n                                    lastWave# = prevWave#;\n                                    chipWaveCompletion#++;\n                                }\n                                wrapped = 1;\n                            }\n                        }\n\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                } else if (chipWaveLoopMode === 0) {\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        if (direction# === 1) {\n                            if (phase# > chipWaveLoopEnd) {\n                                phase# = chipWaveLoopStart + Synth.wrap(phase# - chipWaveLoopEnd, chipWaveLoopLength);\n                                // phase# = chipWaveLoopStart;\n                                wrapped = 1;\n                            }\n                        } else if (direction# === -1) {\n                            if (phase# < chipWaveLoopStart) {\n                                phase# = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phase#, chipWaveLoopLength);\n                                // phase# = chipWaveLoopEnd;\n                                wrapped = 1;\n                            }\n                        }\n\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \n                } else if (chipWaveLoopMode === 1) {\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        if (direction# === 1) {\n                            if (phase# > chipWaveLoopEnd) {\n                                phase# = chipWaveLoopEnd - Synth.wrap(phase# - chipWaveLoopEnd, chipWaveLoopLength);\n                                // phase# = chipWaveLoopEnd;\n                                direction# = -1;\n                                wrapped = 1;\n                            }\n                        } else if (direction# === -1) {\n                            if (phase# < chipWaveLoopStart) {\n                                phase# = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phase#, chipWaveLoopLength);\n                                // phase# = chipWaveLoopStart;\n                                direction# = 1;\n                                wrapped = 1;\n                            }\n                        }\n\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \n                }\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                    let wave# = 0;\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \n                let inputSample = 0;\n                if (aliases) {\n                    inputSample = 0;\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        wave# = wave[Synth.wrap(Math.floor(phase#), waveLength)];\n                        prevWave# = wave#;\n                        const completionFade# = chipWaveCompletion# > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletion#, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                        \n                        if (chipWaveCompletion# > 0) {\n                            inputSample += lastWave# * completionFade#;\n                        } else {\n                            inputSample += wave#;\n                        }\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `   \n                } else {\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        const phase#Int = Math.floor(phase#);\n                        const index# = Synth.wrap(phase#Int, waveLength);\n                        let nextWaveIntegral# = wave[index#];\n                        const phaseRatio# = phase# - phase#Int;\n                        nextWaveIntegral# += (wave[Synth.wrap(index# + 1, waveLength)] - nextWaveIntegral#) * phaseRatio#;\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                            let pwi# = 0;\n                            const phase#_ = Math.max(0, phase# - phaseDelta# * direction#);\n                            const phase#Int = Math.floor(phase#_);\n                            const index# = Synth.wrap(phase#Int, waveLength);\n                            pwi# = wave[index#];\n                            pwi# += (wave[Synth.wrap(index# + 1, waveLength)] - pwi#) * (phase#_ - phase#Int) * direction#;\n                            prevWaveIntegral# = pwi#;\n                            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \n                    }\n                    if (chipWaveLoopMode === 1 && wrapped !== 0) {\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                            wave# = prevWave#;\n                            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                    } else {\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                            wave# = (nextWaveIntegral# - prevWaveIntegral#) / (phaseDelta# * direction#);\n                            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                    }\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                        prevWave# = wave#;\n                        prevWaveIntegral# = nextWaveIntegral#;\n                        const completionFade# = chipWaveCompletion# > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletion#, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                        if (chipWaveCompletion# > 0) {\n                            inputSample += lastWave# * completionFade#;\n                        } else {\n                            inputSample += wave#;\n                        }\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n                }\n                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n                initialFilterInput2 = initialFilterInput1;\n                initialFilterInput1 = inputSample * volumeScale;\n                const output = sample * expression;\n                expression += expressionDelta;\n                data[sampleIndex] += output;\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                    phaseDelta# *= phaseDeltaScale#;\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            }\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                tone.phases[#] = phase# / waveLength;\n                tone.phaseDeltas[#] = phaseDelta# / waveLength;\n                tone.directions[#] = direction#;\n                tone.chipWaveCompletions[#] = chipWaveCompletion#;\n                tone.chipWavePrevWaves[#] = prevWave#;\n                tone.chipWaveCompletionsLastWave[#] = lastWave#;\n                \n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n            tone.expression = expression;\n            synth.sanitizeFilters(filters);\n            tone.initialNoteFilterInput1 = initialFilterInput1;\n            tone.initialNoteFilterInput2 = initialFilterInput2;\n        }`;\n            chipFunction = new Function(\"Config\", \"Synth\", \"effectsIncludeDistortion\", chipSource)(Config, Synth, effectsIncludeDistortion);\n            Synth.loopableChipFunctionCache[instrumentState.unisonVoices] = chipFunction;\n        }\n        chipFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static chipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let chipFunction = Synth.chipFunctionCache[instrumentState.unisonVoices];\n        if (chipFunction == undefined) {\n            let chipSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            chipSource += `\n        const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const volumeScale = instrumentState.volumeScale;\n\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `let phaseDelta# = tone.phaseDeltas[#] * waveLength;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            `.replaceAll(\"#\", i + \"\");\n            }\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `let phase# = (tone.phases[#] % 1) * waveLength;\n            let prevWaveIntegral# = 0.0;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        if (!aliases) {\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `const phase#Int = phase# | 0;\n                const index# = phase#Int % waveLength;\n                prevWaveIntegral# = +wave[index#]\n                const phase#Ratio = phase# - phase#Int;\n                prevWaveIntegral# += (wave[index# + 1] - prevWaveIntegral#) * phase#Ratio;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\n        } \n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        let inputSample = 0;\n            if (aliases) {\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `phase# += phaseDelta#;\n\n                    const inputSample# = wave[(0 | phase#) % waveLength];\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleListA = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleListA.push(\"inputSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            chipSource += \"inputSample = \" + sampleListA.join(\" + \") + \";\";\n            chipSource += `} else {\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `phase# += phaseDelta#;\n\n                     \n                        const phase#Int = phase# | 0;\n                        const index# = phase#Int % waveLength;\n                        let nextWaveIntegral# = wave[index#]\n                        const phase#Ratio = phase# - phase#Int;\n                        nextWaveIntegral# += (wave[index# + 1] - nextWaveIntegral#) * phase#Ratio;\n                        const wave# = (nextWaveIntegral# - prevWaveIntegral#) / phaseDelta#;\n                        prevWaveIntegral# = nextWaveIntegral#;\n                        let inputSample# = wave#;\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleListB = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleListB.push(\"inputSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            chipSource += \"inputSample = \" + sampleListB.join(\" + \") + \";\";\n            chipSource += `}\n        `;\n            chipSource += `const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample * volumeScale;`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\n                phaseDelta# *= phaseDeltaScale#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `tone.phases[#] = phase# / waveLength;\n            tone.phaseDeltas[#] = phaseDelta# / waveLength;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += \"tone.expression = expression;\";\n            chipSource += `\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }`;\n            chipFunction = new Function(\"Config\", \"Synth\", \"effectsIncludeDistortion\", chipSource)(Config, Synth, effectsIncludeDistortion);\n            Synth.chipFunctionCache[instrumentState.unisonVoices] = chipFunction;\n        }\n        chipFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static harmonicsSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let harmonicsFunction = Synth.harmonicsFunctionCache[instrumentState.unisonVoices];\n        if (harmonicsFunction == undefined) {\n            let harmonicsSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            harmonicsSource += `\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const waveLength = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n         `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `let phaseDelta# = tone.phaseDeltas[#] * waveLength;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            `.replaceAll(\"#\", i + \"\");\n            }\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `let phase# = (tone.phases[#] % 1) * waveLength;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += `const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `const phase#Int = phase# | 0;\n            const index# = phase#Int % waveLength;\n            prevWaveIntegral# = +wave[index#]\n            const phase#Ratio = phase# - phase#Int;\n            prevWaveIntegral# += (wave[index# + 1] - prevWaveIntegral#) * phase#Ratio;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += `const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `\n                        phase# += phaseDelta#;\n                        const phase#Int = phase# | 0;\n                        const index# = phase#Int % waveLength;\n                        let nextWaveIntegral# = wave[index#]\n                        const phase#Ratio = phase# - phase#Int;\n                        nextWaveIntegral# += (wave[index# + 1] - nextWaveIntegral#) * phase#Ratio;\n                        const wave# = (nextWaveIntegral# - prevWaveIntegral#) / phaseDelta#;\n                        prevWaveIntegral# = nextWaveIntegral#;\n                        let inputSample# = wave#;\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"inputSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            harmonicsSource += \"inputSample = \" + sampleList.join(\" + \") + \";\";\n            harmonicsSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `\n                phaseDelta# *= phaseDeltaScale#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += `const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `tone.phases[#] = phase# / waveLength;\n            tone.phaseDeltas[#] = phaseDelta# / waveLength;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += \"tone.expression = expression;\";\n            harmonicsSource += `\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }`;\n            harmonicsFunction = new Function(\"Config\", \"Synth\", harmonicsSource)(Config, Synth);\n            Synth.harmonicsFunctionCache[instrumentState.unisonVoices] = harmonicsFunction;\n        }\n        harmonicsFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static pickedStringSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = instrumentState.unisonVoices;\n        let pickedStringFunction = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n                if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[1] = tone.phases[0];\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`;\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            pickedStringSource += sampleList.join(\" + \");\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}`;\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static effectsSynth(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) {\n        const usesDistortion = effectsIncludeDistortion(instrumentState.effects);\n        const usesBitcrusher = effectsIncludeBitcrusher(instrumentState.effects);\n        const usesEqFilter = instrumentState.eqFilterCount > 0;\n        const usesPanning = effectsIncludePanning(instrumentState.effects);\n        const usesChorus = effectsIncludeChorus(instrumentState.effects);\n        const usesEcho = effectsIncludeEcho(instrumentState.effects);\n        const usesReverb = effectsIncludeReverb(instrumentState.effects);\n        const usesGranular = effectsIncludeGranular(instrumentState.effects);\n        const usesRingModulation = effectsIncludeRingModulation(instrumentState.effects);\n        let signature = 0;\n        if (usesDistortion)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesBitcrusher)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesEqFilter)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesPanning)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesChorus)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesEcho)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesReverb)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesGranular)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesRingModulation)\n            signature = signature | 1;\n        let effectsFunction = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n            const usesDelays = usesChorus || usesReverb || usesEcho || usesGranular;\n            effectsSource += `\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;\n                `;\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`;\n            }\n            if (usesGranular) {\n                effectsSource += `\n                let granularWet = instrumentState.granularMix;\n                const granularMixDelta = instrumentState.granularMixDelta;\n                let granularDry = 1.0 - granularWet; \n                const granularDelayLine = instrumentState.granularDelayLine;\n                const granularGrains = instrumentState.granularGrains;\n                let granularGrainCount = instrumentState.granularGrainsLength;\n                const granularDelayLineLength = granularDelayLine.length;\n                const granularDelayLineMask = granularDelayLineLength - 1;\n                let granularDelayLineIndex = instrumentState.granularDelayLineIndex;\n                const usesRandomGrainLocation = instrumentState.usesRandomGrainLocation;\n                const computeGrains = instrumentState.computeGrains;\n                instrumentState.granularDelayLineDirty = true;\n                `;\n            }\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`;\n            }\n            if (usesRingModulation) {\n                effectsSource += `\n\t\t\t\t\n                let ringModMix = +instrumentState.ringModMix;\n                let ringModMixDelta = +instrumentState.ringModMixDelta;\n                let ringModPhase = +instrumentState.ringModPhase;\n                let ringModPhaseDelta = +instrumentState.ringModPhaseDelta;\n                let ringModPhaseDeltaScale = +instrumentState.ringModPhaseDeltaScale;\n                let ringModWaveformIndex = +instrumentState.ringModWaveformIndex;\n                let ringModMixFade = +instrumentState.ringModMixFade;\n                let ringModMixFadeDelta = +instrumentState.ringModMixFadeDelta;\n                \n                let ringModPulseWidth = +instrumentState.ringModPulseWidth;\n\n                let waveform = Config.operatorWaves[ringModWaveformIndex].samples; \n                if (ringModWaveformIndex == Config.operatorWaves.dictionary['pulse width'].index) {\n                    waveform = Synth.getOperatorWave(ringModWaveformIndex, ringModPulseWidth).samples;\n                }\n                const waveformLength = waveform.length - 1;\n                `;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;`;\n            }\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`;\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`;\n            }\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`;\n            }\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`;\n            }\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`;\n            }\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    `;\n            if (usesGranular) {\n                effectsSource += `\n                let sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n                let granularOutput = 0;\n                for (let grainIndex = 0; grainIndex < granularGrainCount; grainIndex++) {\n                    const grain = granularGrains[grainIndex];\n                    if(computeGrains) {\n                        if(grain.delay > 0) {\n                            grain.delay--;\n                        } else {\n                            const grainDelayLinePosition = grain.delayLinePosition;\n                            const grainDelayLinePositionInt = grainDelayLinePosition | 0;\n                            // const grainDelayLinePositionT = grainDelayLinePosition - grainDelayLinePositionInt;\n                            let grainAgeInSamples = grain.ageInSamples;\n                            const grainMaxAgeInSamples = grain.maxAgeInSamples;\n                            // const grainSample0 = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                            // const grainSample1 = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt)) + 1) & granularDelayLineMask];\n                            // let grainSample = grainSample0 + (grainSample1 - grainSample0) * grainDelayLinePositionT; // Linear interpolation (@TODO: sounds quite bad?)\n                            let grainSample = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt))    ) & granularDelayLineMask]; // No interpolation\n                            `;\n                if (Config.granularEnvelopeType == 0) {\n                    effectsSource += `\n                                const grainEnvelope = grain.parabolicEnvelopeAmplitude;\n                                `;\n                }\n                else if (Config.granularEnvelopeType == 1) {\n                    effectsSource += `\n                                const grainEnvelope = grain.rcbEnvelopeAmplitude;\n                                `;\n                }\n                effectsSource += `\n                            grainSample *= grainEnvelope;\n                            granularOutput += grainSample;\n                            if (grainAgeInSamples > grainMaxAgeInSamples) {\n                                if (granularGrainCount > 0) {\n                                    // Faster equivalent of .pop, ignoring the order in the array.\n                                    const lastGrainIndex = granularGrainCount - 1;\n                                    const lastGrain = granularGrains[lastGrainIndex];\n                                    granularGrains[grainIndex] = lastGrain;\n                                    granularGrains[lastGrainIndex] = grain;\n                                    granularGrainCount--;\n                                    grainIndex--;\n                                    // ^ Dangerous, since this could end up causing an infinite loop,\n                                    // but should be okay in this case.\n                                }\n                            } else {\n                                grainAgeInSamples++;\n                            `;\n                if (Config.granularEnvelopeType == 0) {\n                    effectsSource += `\n                                    grain.parabolicEnvelopeAmplitude += grain.parabolicEnvelopeSlope;\n                                    grain.parabolicEnvelopeSlope += grain.parabolicEnvelopeCurve;\n                                    `;\n                }\n                else if (Config.granularEnvelopeType == 1) {\n                    effectsSource += `\n                                    grain.updateRCBEnvelope();\n                                    `;\n                }\n                effectsSource += `\n                                grain.ageInSamples = grainAgeInSamples;\n                                // if(usesRandomGrainLocation) {\n                                //     grain.delayLine -= grainPitchShift;\n                                // }\n                            }\n                        }\n                    }\n                }\n                granularWet += granularMixDelta;\n                granularDry -= granularMixDelta;\n                granularOutput *= Config.granularOutputLoudnessCompensation;\n                granularDelayLine[granularDelayLineIndex] = sample;\n                granularDelayLineIndex = (granularDelayLineIndex + 1) & granularDelayLineMask;\n                sample = sample * granularDry + granularOutput * granularWet;\n                tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;\n                `;\n            }\n            else {\n                effectsSource += `let sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n                tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`;\n            }\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`;\n            }\n            if (usesRingModulation) {\n                effectsSource += ` \n                \n                const ringModOutput = sample * waveform[(ringModPhase*waveformLength)|0];\n                const ringModMixF = Math.max(0, ringModMix * ringModMixFade);\n                sample = sample * (1 - ringModMixF) + ringModOutput * ringModMixF;\n\n                ringModMix += ringModMixDelta;\n                ringModPhase += ringModPhaseDelta;\n                ringModPhase = ringModPhase % 1.0;\n                ringModPhaseDelta *= ringModPhaseDeltaScale;\n                ringModMixFade += ringModMixFadeDelta;\n                `;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;`;\n            }\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`;\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`;\n            }\n            else {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;`;\n            }\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`;\n            }\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    `;\n            }\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;`;\n            }\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;`;\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`;\n            }\n            effectsSource += `\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);`;\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`;\n            }\n            if (usesGranular) {\n                effectsSource += `\n                    instrumentState.granularMix = granularWet;\n                    instrumentState.granularGrainsLength = granularGrainCount;\n                    instrumentState.granularDelayLineIndex = granularDelayLineIndex;\n                `;\n            }\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`;\n            }\n            if (usesRingModulation) {\n                effectsSource += ` \n                instrumentState.ringModMix = ringModMix;\n                instrumentState.ringModMixDelta = ringModMixDelta;\n                instrumentState.ringModPhase = ringModPhase;\n                instrumentState.ringModPhaseDelta = ringModPhaseDelta;\n                instrumentState.ringModPhaseDeltaScale = ringModPhaseDeltaScale;\n                instrumentState.ringModWaveformIndex = ringModWaveformIndex;\n                instrumentState.ringModPulseWidth = ringModPulseWidth;\n                instrumentState.ringModMixFade = ringModMixFade;\n                 `;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`;\n            }\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`;\n            }\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`;\n            }\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`;\n            }\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`;\n            }\n            effectsSource += \"}\";\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n    static pulseWidthSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let pulseFunction = Synth.pulseFunctionCache[instrumentState.unisonVoices];\n        if (pulseFunction == undefined) {\n            let pulseSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            pulseSource += `\n        const data = synth.tempMonoInstrumentSampleBuffer;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `let phaseDelta# = tone.phaseDeltas[#];\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            `.replaceAll(\"#\", i + \"\");\n            }\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `phase# = (tone.phases[#] % 1);\n            `.replaceAll(\"#\", i + \"\");\n            }\n            pulseSource += `let pulseWidth = tone.pulseWidth;\n        const pulseWidthDelta = tone.pulseWidthDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `const sawPhaseA# = phase# % 1;\n                const sawPhaseB# = (phase# + pulseWidth) % 1;\n                let pulseWave# = sawPhaseB# - sawPhaseA#;\n                if (!instrumentState.aliases) {\n                    if (sawPhaseA# < phaseDelta#) {\n                        var t = sawPhaseA# / phaseDelta#;\n                        pulseWave# += (t + t - t * t - 1) * 0.5;\n                    } else if (sawPhaseA# > 1.0 - phaseDelta#) {\n                        var t = (sawPhaseA# - 1.0) / phaseDelta#;\n                        pulseWave# += (t + t + t * t + 1) * 0.5;\n                    }\n                    if (sawPhaseB# < phaseDelta#) {\n                        var t = sawPhaseB# / phaseDelta#;\n                        pulseWave# -= (t + t - t * t - 1) * 0.5;\n                    } else if (sawPhaseB# > 1.0 - phaseDelta#) {\n                        var t = (sawPhaseB# - 1.0) / phaseDelta#;\n                        pulseWave# -= (t + t + t * t + 1) * 0.5;\n                    }\n                }\n\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"pulseWave\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            pulseSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            pulseSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            pulseSource += `pulseWidth += pulseWidthDelta;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `tone.phases[#] = phase#;\n            tone.phaseDeltas[#] = phaseDelta#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            pulseSource += `tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }`;\n            pulseFunction = new Function(\"Config\", \"Synth\", pulseSource)(Config, Synth);\n            Synth.pulseFunctionCache[instrumentState.unisonVoices] = pulseFunction;\n        }\n        pulseFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static supersawSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const voiceCount = Config.supersawVoiceCount | 0;\n        let phaseDelta = tone.phaseDeltas[0];\n        const phaseDeltaScale = +tone.phaseDeltaScales[0];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phases = tone.phases;\n        let dynamism = +tone.supersawDynamism;\n        const dynamismDelta = +tone.supersawDynamismDelta;\n        const unisonDetunes = tone.supersawUnisonDetunes;\n        let shape = +tone.supersawShape;\n        const shapeDelta = +tone.supersawShapeDelta;\n        let delayLength = +tone.supersawDelayLength;\n        const delayLengthDelta = +tone.supersawDelayLengthDelta;\n        const delayLine = tone.supersawDelayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        let delayIndex = tone.supersawDelayIndex | 0;\n        delayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            let phase = (phases[0] + phaseDelta) % 1.0;\n            let supersawSample = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                }\n                else if (phase > 1.0 - phaseDelta) {\n                    var t = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n            phases[0] = phase;\n            for (let i = 1; i < voiceCount; i++) {\n                const detunedPhaseDelta = phaseDelta * unisonDetunes[i];\n                let phase = (phases[i] + detunedPhaseDelta) % 1.0;\n                supersawSample += phase * dynamism;\n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    }\n                    else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n                phases[i] = phase;\n            }\n            delayLine[delayIndex & delayBufferMask] = supersawSample;\n            const delaySampleTime = delayIndex - delayLength;\n            const lowerIndex = delaySampleTime | 0;\n            const upperIndex = lowerIndex + 1;\n            const delayRatio = delaySampleTime - lowerIndex;\n            const prevDelaySample = delayLine[lowerIndex & delayBufferMask];\n            const nextDelaySample = delayLine[upperIndex & delayBufferMask];\n            const delaySample = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n            delayIndex++;\n            const inputSample = supersawSample - delaySample * shape;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseDelta *= phaseDeltaScale;\n            dynamism += dynamismDelta;\n            shape += shapeDelta;\n            delayLength += delayLengthDelta;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.supersawDynamism = dynamism;\n        tone.supersawShape = shape;\n        tone.supersawDelayLength = delayLength;\n        tone.supersawDelayIndex = delayIndex;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n    static noiseSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let noiseFunction = Synth.noiseFunctionCache[instrumentState.unisonVoices];\n        if (noiseFunction == undefined) {\n            let noiseSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            noiseSource += `\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `\n            let phaseDelta# = tone.phaseDeltas[#];\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n            let noiseSample# = +tone.noiseSamples[#];\n            // This is for a \"legacy\" style simplified 1st order lowpass filter with\n            // a cutoff frequency that is relative to the tone's fundamental frequency.\n            const pitchRelativefilter# = Math.min(1.0, phaseDelta# * instrumentState.noisePitchFilterMult);\n            \n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[#-1];\n            `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += `\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        const phaseMask = Config.spectrumNoiseLength - 1;\n\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `let phase# = (tone.phases[#] % 1) * Config.chipNoiseLength;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += \"let test = true;\";\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `\n            if (tone.phases[#] == 0.0) {\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\n                phase# = Math.random() * Config.chipNoiseLength;\n                if (@ <= # && test && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {`.replaceAll(\"#\", i + \"\").replaceAll(\"@\", voiceCount + \"\").replaceAll(\"~\", tone.phases.length + \"\");\n                for (let j = i + 1; j < tone.phases.length; j++) {\n                    noiseSource += \"phase~ = phase#;\".replaceAll(\"#\", i + \"\").replaceAll(\"~\", j + \"\");\n                }\n                noiseSource += `\n                    test = false;\n                }\n            }`;\n            }\n            noiseSource += `\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `\n                let waveSample# = wave[phase# & phaseMask];\n\n                noiseSample# += (waveSample# - noiseSample#) * pitchRelativefilter#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"noiseSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            noiseSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            noiseSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += `const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `tone.phases[#] = phase# / `.replaceAll(\"#\", i + \"\") + Config.chipNoiseLength + `;\n            tone.phaseDeltas[#] = phaseDelta#;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += \"tone.expression = expression;\";\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `tone.noiseSamples[#] = noiseSample#;\n             `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += `\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }`;\n            noiseFunction = new Function(\"Config\", \"Synth\", noiseSource)(Config, Synth);\n            ;\n            Synth.noiseFunctionCache[instrumentState.unisonVoices] = noiseFunction;\n        }\n        noiseFunction(synth, bufferIndex, runLength, tone, instrumentState);\n    }\n    static spectrumSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let spectrumFunction = Synth.spectrumFunctionCache[instrumentState.unisonVoices];\n        if (spectrumFunction == undefined) {\n            let spectrumSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            spectrumSource += `\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const samplesInPeriod = (1 << 7);\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `\n                if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[#-1];\n                let phaseDelta# = tone.phaseDeltas[#] * samplesInPeriod;\n                let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n                let noiseSample# = +tone.noiseSamples[#];\n                // This is for a \"legacy\" style simplified 1st order lowpass filter with\n                // a cutoff frequency that is relative to the tone's fundamental frequency.\n                const pitchRelativefilter# = Math.min(1.0, phaseDelta#);\n                `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        const phaseMask = Config.spectrumNoiseLength - 1;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `let phase# = (tone.phases[#] % 1) * Config.spectrumNoiseLength;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\n            if (tone.phases[0] == 0.0) {\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\n                phase0 = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta0;\n            `;\n            for (let i = 1; i < voiceCount; i++) {\n                spectrumSource += `\n                if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {\n                    phase# = phase0;\n                }\n            `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `}`;\n            for (let i = 1; i < voiceCount; i++) {\n                spectrumSource += `\n                if (tone.phases[#] == 0.0 && !(instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {\n                    // Zero phase means the tone was reset, just give noise a random start phase instead.\n                phase# = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta#;\n                }\n            `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {`;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `\n                const phase#Int = phase# | 0;\n                const index# = phase#Int & phaseMask;\n                let waveSample# = wave[index#]\n                const phase#Ratio = phase# - phase#Int;\n                waveSample# += (wave[index# + 1] - waveSample#) * phase#Ratio;\n\n                noiseSample# += (waveSample# - noiseSample#) * pitchRelativefilter#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"noiseSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            spectrumSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            spectrumSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `tone.phases[#] = phase# / `.replaceAll(\"#\", i + \"\") + Config.spectrumNoiseLength + `;\n            tone.phaseDeltas[#] = phaseDelta# / samplesInPeriod;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += \"tone.expression = expression;\";\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `tone.noiseSamples[#] = noiseSample#;\n             `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }`;\n            spectrumFunction = new Function(\"Config\", \"Synth\", spectrumSource)(Config, Synth);\n            ;\n            Synth.spectrumFunctionCache[instrumentState.unisonVoices] = spectrumFunction;\n        }\n        spectrumFunction(synth, bufferIndex, runLength, tone, instrumentState);\n    }\n    static drumsetSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let drumFunction = Synth.drumFunctionCache[instrumentState.unisonVoices];\n        if (drumFunction == undefined) {\n            let drumSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            drumSource += `\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        let wave = instrumentState.getDrumsetWave(tone.drumsetPitch);\n        const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch);\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `let phaseDelta# = tone.phaseDeltas[#] / referenceDelta;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;`;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `let phase# = (tone.phases[#] % 1) * Config.spectrumNoiseLength;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `\n        if (tone.phases[0] == 0.0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phase0 = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta0;\n        `;\n            for (let i = 1; i < voiceCount; i++) {\n                drumSource += `\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {\n                phase# = phase0;\n            }\n        `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `}`;\n            for (let i = 1; i < voiceCount; i++) {\n                drumSource += `\n            if (tone.phases[#] == 0.0 && !(instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phase# = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta#;\n            }\n        `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `const phaseMask = Config.spectrumNoiseLength - 1;\n\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `\n                const phase#Int = phase# | 0;\n                const index# = phase#Int & phaseMask;\n                let noiseSample# = wave[index#]\n                const phase#Ratio = phase# - phase#Int;\n                noiseSample# += (wave[index# + 1] - noiseSample#) * phase#Ratio;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"noiseSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            drumSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            drumSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `tone.phases[#] = phase# / `.replaceAll(\"#\", i + \"\") + Config.spectrumNoiseLength + `;\n            tone.phaseDeltas[#] = phaseDelta# * referenceDelta;\n            `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `tone.expression = expression;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }`;\n            drumFunction = new Function(\"Config\", \"Synth\", \"InstrumentState\", drumSource)(Config, Synth, InstrumentState);\n            ;\n            Synth.drumFunctionCache[instrumentState.unisonVoices] = drumFunction;\n        }\n        drumFunction(synth, bufferIndex, runLength, tone, instrumentState);\n    }\n    static modSynth(synth, stereoBufferIndex, roundedSamplesPerTick, tone, instrument) {\n        if (!synth.song)\n            return;\n        let mod = Config.modCount - 1 - tone.pitches[0];\n        if (instrument.invalidModulators[mod])\n            return;\n        let setting = instrument.modulators[mod];\n        let usedInstruments = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            usedInstruments.push(0);\n        }\n        else {\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                for (let i = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                }\n            }\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar).instruments;\n            }\n            else {\n                usedInstruments.push(instrument.modInstruments[mod]);\n            }\n        }\n        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n            for (let i = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n            }\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            else if (setting == Config.modulators.dictionary[\"reset envelope\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                const tgtInstrumentState = synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrumentState.envelopeTime[envelopeTarget] = 0;\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            else if (setting == Config.modulators.dictionary[\"song eq\"].index) {\n                const tgtSong = synth.song;\n                let dotTarget = instrument.modFilterTypes[mod] | 0;\n                if (dotTarget == 0) {\n                    let pinIdx = 0;\n                    const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                    while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                        pinIdx++;\n                    let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                    if (tgtSong.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtSong.eqSubFilters[tone.note.pins[pinIdx].size] != null) {\n                        tgtSong.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtSong.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtSong.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                    }\n                    else {\n                        tgtSong.tmpEqFilterEnd = tgtSong.eqFilter;\n                    }\n                }\n                else {\n                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                        if (tgtSong.tmpEqFilterEnd == tgtSong.eqSubFilters[i] && tgtSong.tmpEqFilterEnd != null) {\n                            tgtSong.tmpEqFilterEnd = new FilterSettings();\n                            tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqSubFilters[i].toJsonObject());\n                        }\n                    }\n                    if (tgtSong.tmpEqFilterEnd == null) {\n                        tgtSong.tmpEqFilterEnd = new FilterSettings();\n                        tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqFilter.toJsonObject());\n                    }\n                    if (tgtSong.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                        if (dotTarget % 2) {\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                        }\n                        else {\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                if (!tgtInstrument.eqFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n                    if (dotTarget == 0) {\n                        let pinIdx = 0;\n                        const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                            pinIdx++;\n                        let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                        if (tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                        }\n                        else {\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) {\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            }\n                            else {\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n                    if (dotTarget == 0) {\n                        let pinIdx = 0;\n                        const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                            pinIdx++;\n                        let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                        if (tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                        }\n                        else {\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) {\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            }\n                            else {\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope speed\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let speed = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    if (Number.isInteger(speed)) {\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = Config.perEnvelopeSpeedIndices[speed];\n                    }\n                    else {\n                        speed = (1 - (speed % 1)) * Config.perEnvelopeSpeedIndices[Math.floor(speed)] + (speed % 1) * Config.perEnvelopeSpeedIndices[Math.ceil(speed)];\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = speed;\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope lower bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeLowerBound = bound / 10;\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope upper bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeUpperBound = bound / 10;\n                }\n            }\n        }\n    }\n    static findRandomZeroCrossing(wave, waveLength) {\n        let phase = Math.random() * waveLength;\n        const phaseMask = waveLength - 1;\n        let indexPrev = phase & phaseMask;\n        let wavePrev = wave[indexPrev];\n        const stride = 16;\n        for (let attemptsRemaining = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext = (indexPrev + stride) & phaseMask;\n            const waveNext = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                for (let i = 0; i < stride; i++) {\n                    const innerIndexNext = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        const slope = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    }\n                    else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            }\n            else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n        return phase;\n    }\n    static instrumentVolumeToVolumeMult(instrumentVolume) {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    static volumeMultToInstrumentVolume(volumeMult) {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    static noteSizeToVolumeMult(size) {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    static volumeMultToNoteSize(volumeMult) {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n    static fadeInSettingToSeconds(setting) {\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n    }\n    static secondsToFadeInSetting(seconds) {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n    static fadeOutSettingToTicks(setting) {\n        return Config.fadeOutTicks[setting];\n    }\n    static ticksToFadeOutSetting(ticks) {\n        let lower = Config.fadeOutTicks[0];\n        if (ticks <= lower)\n            return 0;\n        for (let i = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper = Config.fadeOutTicks[i];\n            if (ticks <= upper)\n                return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n    static detuneToCents(detune) {\n        return detune - Config.detuneCenter;\n    }\n    static centsToDetune(cents) {\n        return cents + Config.detuneCenter;\n    }\n    static getOperatorWave(waveform, pulseWidth) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n    getSamplesPerTick() {\n        if (this.song == null)\n            return 0;\n        let beatsPerMinute = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n    getSamplesPerTickSpecificBPM(beatsPerMinute) {\n        const beatsPerSecond = beatsPerMinute / 60.0;\n        const partsPerSecond = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n    static fittingPowerOfTwo(x) {\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n    }\n    sanitizeFilters(filters) {\n        let reset = false;\n        for (const filter of filters) {\n            const output1 = Math.abs(filter.output1);\n            const output2 = Math.abs(filter.output2);\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon)\n                filter.output1 = 0.0;\n            if (output2 < epsilon)\n                filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n    static sanitizeDelayLine(delayLine, lastIndex, mask) {\n        while (true) {\n            lastIndex--;\n            const index = lastIndex & mask;\n            const sample = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon))\n                break;\n            delayLine[index] = 0.0;\n        }\n    }\n    static applyFilters(sample, input1, input2, filterCount, filters) {\n        for (let i = 0; i < filterCount; i++) {\n            const filter = filters[i];\n            const output1 = filter.output1;\n            const output2 = filter.output2;\n            const a1 = filter.a1;\n            const a2 = filter.a2;\n            const b0 = filter.b0;\n            const b1 = filter.b1;\n            const b2 = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            }\n            else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n    computeTicksSinceStart(ofBar = false) {\n        var _a, _b;\n        const beatsPerBar = ((_a = this.song) === null || _a === void 0 ? void 0 : _a.beatsPerBar) ? (_b = this.song) === null || _b === void 0 ? void 0 : _b.beatsPerBar : 8;\n        if (ofBar) {\n            return Config.ticksPerPart * Config.partsPerBeat * beatsPerBar * this.bar;\n        }\n        else {\n            return this.tick + Config.ticksPerPart * (this.part + Config.partsPerBeat * (this.beat + beatsPerBar * this.bar));\n        }\n    }\n}\nSynth.tempFilterStartCoefficients = new FilterCoefficients();\nSynth.tempFilterEndCoefficients = new FilterCoefficients();\nSynth.fmSynthFunctionCache = {};\nSynth.fm6SynthFunctionCache = {};\nSynth.effectsFunctionCache = Array(1 << 7).fill(undefined);\nSynth.pickedStringFunctionCache = Array(3).fill(undefined);\nSynth.spectrumFunctionCache = [];\nSynth.noiseFunctionCache = [];\nSynth.drumFunctionCache = [];\nSynth.chipFunctionCache = [];\nSynth.pulseFunctionCache = [];\nSynth.harmonicsFunctionCache = [];\nSynth.loopableChipFunctionCache = Array(Config.unisonVoicesMax + 1).fill(undefined);\nSynth.fmSourceTemplate = (`\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\nSynth.operatorSourceTemplate = (`\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\nexport { Config };\n//# sourceMappingURL=synth.js.map"],"mappings":"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AO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GA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,CAC/C,MAAM27B,EAAmBib,EAAkB52C,GAC3C,GAAiC,SAA7B27B,EAAuB,KACvB,SAEJ,GAAgC,MAA5BA,EAAuB,KACvB,SAEJ,MAAMkb,EAAWlb,EAAuB,KAClCmb,EAAQ,CACV,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAEEC,EAAW,CACb,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAEEC,EAAe,CACjB,OACA,QACA,SACA,MACA,YACA,UACA,YACA,eACA,mBACA,QACA,cACA,UACA,QACA,kBACA,QACA,gBACA,iBACA,aACA,mBACA,kBACA,OACA,gBACA,eACA,gBACA,cACA,YACA,YACA,cACA,UACA,YACA,UACA,YACA,eAEAF,EAAMG,SAASJ,GACfF,GAA0B,E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"}